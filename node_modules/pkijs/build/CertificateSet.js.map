{"version":3,"sources":["../src/CertificateSet.js"],"names":["CertificateSet","constructor","parameters","certificates","defaultValues","fromSchema","schema","memberName","Error","names","asn1js","Set","name","blockName","value","Repeated","Choice","Certificate","Constructed","idBlock","tagClass","tagNumber","Any","AttributeCertificateV1","valueBlock","AttributeCertificateV2","OtherCertificateFormat","asn1","compareSchema","verified","Array","from","result","element","initialTagNumber","elementSequence","Sequence","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport Certificate from \"./Certificate.js\";\nimport AttributeCertificateV1 from \"./AttributeCertificateV1.js\";\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\";\nimport OtherCertificateFormat from \"./OtherCertificateFormat.js\";\n//**************************************************************************************\n/**\n * Class from RFC5652\n */\nexport default class CertificateSet\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for CertificateSet class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Array}\n\t\t * @desc certificates\n\t\t */\n\t\tthis.certificates = getParametersValue(parameters, \"certificates\", CertificateSet.defaultValues(\"certificates\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"certificates\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * CertificateSet ::= SET OF CertificateChoices\n\t *\n\t * CertificateChoices ::= CHOICE {\n\t *    certificate Certificate,\n\t *    extendedCertificate [0] IMPLICIT ExtendedCertificate,  -- Obsolete\n\t *    v1AttrCert [1] IMPLICIT AttributeCertificateV1,        -- Obsolete\n\t *    v2AttrCert [2] IMPLICIT AttributeCertificateV2,\n\t *    other [3] IMPLICIT OtherCertificateFormat }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (\n\t\t\tnew asn1js.Set({\n\t\t\t\tname: (names.blockName || \"\"),\n\t\t\t\tvalue: [\n\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\tname: (names.certificates || \"certificates\"),\n\t\t\t\t\t\tvalue: new asn1js.Choice({\n\t\t\t\t\t\t\tvalue: [\n\t\t\t\t\t\t\t\tCertificate.schema(),\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tvalue: [\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Any()\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}), // JUST A STUB\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tvalue: AttributeCertificateV1.schema().valueBlock.value\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tvalue: AttributeCertificateV2.schema().valueBlock.value\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tvalue: OtherCertificateFormat.schema().valueBlock.value\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t})\n\t\t);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"certificates\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tCertificateSet.schema()\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificateSet\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.certificates = Array.from(asn1.result.certificates || [], element =>\n\t\t{\n\t\t\tconst initialTagNumber = element.idBlock.tagNumber;\n\n\t\t\tif(element.idBlock.tagClass === 1)\n\t\t\t\treturn new Certificate({ schema: element });\n\t\t\t\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\n\t\t\tconst elementSequence = new asn1js.Sequence({\n\t\t\t\tvalue: element.valueBlock.value\n\t\t\t});\n\t\t\t//endregion\n\n\t\t\tswitch(initialTagNumber)\n\t\t\t{\n\t\t\t\tcase 1:\n\t\t\t\t\treturn new AttributeCertificateV1({ schema: elementSequence });\n\t\t\t\tcase 2:\n\t\t\t\t\treturn new AttributeCertificateV2({ schema: elementSequence });\n\t\t\t\tcase 3:\n\t\t\t\t\treturn new OtherCertificateFormat({ schema: elementSequence });\n\t\t\t\tcase 0:\n\t\t\t\tdefault:\n\t\t\t}\n\t\t\t\n\t\t\treturn element;\n\t\t});\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Set({\n\t\t\tvalue: Array.from(this.certificates, element =>\n\t\t\t{\n\t\t\t\tswitch(true)\n\t\t\t\t{\n\t\t\t\t\tcase (element instanceof Certificate):\n\t\t\t\t\t\treturn element.toSchema();\n\t\t\t\t\tcase (element instanceof AttributeCertificateV1):\n\t\t\t\t\t\treturn new asn1js.Constructed({\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\n\t\t\t\t\t\t});\n\t\t\t\t\tcase (element instanceof AttributeCertificateV2):\n\t\t\t\t\t\treturn new asn1js.Constructed({\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\n\t\t\t\t\t\t});\n\t\t\t\t\tcase (element instanceof OtherCertificateFormat):\n\t\t\t\t\t\treturn new asn1js.Constructed({\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\n\t\t\t\t\t\t});\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn element;\n\t\t\t})\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tcertificates: Array.from(this.certificates, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"],"file":"CertificateSet.js"}