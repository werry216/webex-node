{"version":3,"sources":["../src/EnvelopedData.js"],"names":["EnvelopedData","constructor","parameters","version","defaultValues","originatorInfo","recipientInfos","encryptedContentInfo","unprotectedAttrs","fromSchema","schema","memberName","OriginatorInfo","EncryptedContentInfo","Error","compareWithDefault","memberValue","certs","certificates","length","crls","contentType","contentEncryptionAlgorithm","encryptedContent","names","asn1js","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","valueBlock","Set","Repeated","RecipientInfo","Attribute","asn1","compareSchema","verified","result","valueDec","Array","from","element","toSchema","outputArray","push","toJSON","_object","addRecipientByCertificate","certificate","variant","encryptionParameters","subjectPublicKeyInfo","algorithm","algorithmId","indexOf","oaepHashAlgorithm","kdfAlgorithm","kekEncryptionLength","useOAEP","algorithmParams","hashOID","hashAlgorithm","AlgorithmIdentifier","Null","rsaOAEPParams","RSAESOAEPParams","maskGenAlgorithm","keyInfo","KeyTransRecipientInfo","rid","IssuerAndSerialNumber","issuer","serialNumber","keyEncryptionAlgorithm","recipientCertificate","encryptedKey","RecipientEncryptedKey","KeyAgreeRecipientIdentifier","aesKWoid","aesKW","ecdhOID","kdf","ukmBuffer","ArrayBuffer","ukmView","Uint8Array","KeyAgreeRecipientInfo","ukm","OctetString","valueHex","recipientEncryptedKeys","RecipientEncryptedKeys","encryptedKeys","addRecipientByPreDefinedData","preDefinedData","byteLength","keyIdentifierBuffer","keyIdentifierView","keyIdentifier","hmacHashAlgorithm","iterationCount","keyEncryptionAlgorithmParams","kekOID","KEKRecipientInfo","kekid","KEKIdentifier","preDefinedKEK","pbkdf2OID","saltBuffer","saltView","hmacOID","hash","pbkdf2Params","PBKDF2Params","salt","prf","PasswordRecipientinfo","keyDerivationAlgorithm","password","encrypt","contentToEncrypt","sequence","Promise","resolve","ivBuffer","ivView","contentView","sessionKey","exportedSessionKey","recipientsPromises","_this","contentEncryptionOID","reject","crypto","then","generateKey","iv","error","exportKey","SubKeyAgreeRecipientInfo","index","currentSequence","ecdhPublicKey","ecdhPrivateKey","recipientCurve","recipientCurveLength","exportedECDHPublicKey","curveObject","ObjectIdentifier","curveOID","toString","namedCurve","publicKey","privateKey","getPublicKey","usages","deriveBits","public","aesKWAlgorithm","KWalgorithm","kwLength","kwLengthBuffer","kwLengthView","j","eccInfo","ECCCMSSharedInfo","entityUInfo","suppPubInfo","encodedInfo","toBER","ecdhAlgorithm","importKey","wrapKey","fromBER","originator","OriginatorIdentifierOrKey","OriginatorPublicKey","SubKeyTransRecipientInfo","algorithmParameters","ex","jjj","SubKEKRecipientInfo","kekAlgorithm","SubPasswordRecipientinfo","passwordView","iterations","deriveKey","i","all","decrypt","recipientIndex","decryptionParameters","recipientPrivateKey","buffer","unwrapKey","dataBuffer","isConstructed","content"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\r\nimport { getOIDByAlgorithm, getRandomValues, getCrypto, getAlgorithmByOID, kdf } from \"./common.js\";\r\nimport OriginatorInfo from \"./OriginatorInfo.js\";\r\nimport RecipientInfo from \"./RecipientInfo.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RSAESOAEPParams from \"./RSAESOAEPParams.js\";\r\nimport KeyTransRecipientInfo from \"./KeyTransRecipientInfo.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport RecipientEncryptedKey from \"./RecipientEncryptedKey.js\";\r\nimport KeyAgreeRecipientIdentifier from \"./KeyAgreeRecipientIdentifier.js\";\r\nimport KeyAgreeRecipientInfo from \"./KeyAgreeRecipientInfo.js\";\r\nimport RecipientEncryptedKeys from \"./RecipientEncryptedKeys.js\";\r\nimport KEKRecipientInfo from \"./KEKRecipientInfo.js\";\r\nimport KEKIdentifier from \"./KEKIdentifier.js\";\r\nimport PBKDF2Params from \"./PBKDF2Params.js\";\r\nimport PasswordRecipientinfo from \"./PasswordRecipientinfo.js\";\r\nimport ECCCMSSharedInfo from \"./ECCCMSSharedInfo.js\";\r\nimport OriginatorIdentifierOrKey from \"./OriginatorIdentifierOrKey.js\";\r\nimport OriginatorPublicKey from \"./OriginatorPublicKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EnvelopedData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EnvelopedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", EnvelopedData.defaultValues(\"version\"));\r\n\t\t\r\n\t\tif(\"originatorInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OriginatorInfo}\r\n\t\t\t * @desc originatorInfo\r\n\t\t\t */\r\n\t\t\tthis.originatorInfo = getParametersValue(parameters, \"originatorInfo\", EnvelopedData.defaultValues(\"originatorInfo\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Array.<RecipientInfo>}\r\n\t\t * @desc recipientInfos\r\n\t\t */\r\n\t\tthis.recipientInfos = getParametersValue(parameters, \"recipientInfos\", EnvelopedData.defaultValues(\"recipientInfos\"));\r\n\t\t/**\r\n\t\t * @type {EncryptedContentInfo}\r\n\t\t * @desc encryptedContentInfo\r\n\t\t */\r\n\t\tthis.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EnvelopedData.defaultValues(\"encryptedContentInfo\"));\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc unprotectedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EnvelopedData.defaultValues(\"unprotectedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"originatorInfo\":\r\n\t\t\t\treturn new OriginatorInfo();\r\n\t\t\tcase \"recipientInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn new EncryptedContentInfo();\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === EnvelopedData.defaultValues(memberName));\r\n\t\t\tcase \"originatorInfo\":\r\n\t\t\t\treturn ((memberValue.certs.certificates.length === 0) && (memberValue.crls.crls.length === 0));\r\n\t\t\tcase \"recipientInfos\":\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent))));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EnvelopedData ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,\r\n\t *    recipientInfos RecipientInfos,\r\n\t *    encryptedContentInfo EncryptedContentInfo,\r\n\t *    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [originatorInfo]\r\n\t\t * @property {string} [recipientInfos]\r\n\t\t * @property {string} [encryptedContentInfo]\r\n\t\t * @property {string} [unprotectedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.originatorInfo || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: OriginatorInfo.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.recipientInfos || \"\"),\r\n\t\t\t\t\t\t\tvalue: RecipientInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tEncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.unprotectedAttrs || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"originatorInfo\",\r\n\t\t\t\"recipientInfos\",\r\n\t\t\t\"encryptedContentInfo\",\r\n\t\t\t\"unprotectedAttrs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEnvelopedData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\toriginatorInfo: \"originatorInfo\",\r\n\t\t\t\t\trecipientInfos: \"recipientInfos\",\r\n\t\t\t\t\tencryptedContentInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptedContentInfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tunprotectedAttrs: \"unprotectedAttrs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EnvelopedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"originatorInfo\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.originatorInfo = new OriginatorInfo({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.originatorInfo.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tthis.recipientInfos = Array.from(asn1.result.recipientInfos, element => new RecipientInfo({ schema: element }));\r\n\t\tthis.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in asn1.result)\r\n\t\t\tthis.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\tif(\"originatorInfo\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.originatorInfo.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.recipientInfos, element => element.toSchema())\r\n\t\t}));\r\n\t\t\r\n\t\toutputArray.push(this.encryptedContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.unprotectedAttrs, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\t\t\r\n\t\tif(\"originatorInfo\" in this)\r\n\t\t\t_object.originatorInfo = this.originatorInfo.toJSON();\r\n\t\t\r\n\t\t_object.recipientInfos = Array.from(this.recipientInfos, element => element.toJSON());\r\n\t\t_object.encryptedContentInfo = this.encryptedContentInfo.toJSON();\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t\t_object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Helpers function for filling \"RecipientInfo\" based on recipient's certificate.\r\n\t * Problem with WebCrypto is that for RSA certificates we have only one option - \"key transport\" and\r\n\t * for ECC certificates we also have one option - \"key agreement\". As soon as Google will implement\r\n\t * DH algorithm it would be possible to use \"key agreement\" also for RSA certificates.\r\n\t * @param {Certificate} [certificate] Recipient's certificate\r\n\t * @param {Object} [parameters] Additional parameters neccessary for \"fine tunning\" of encryption process\r\n\t * @param {number} [variant] Variant = 1 is for \"key transport\", variant = 2 is for \"key agreement\". In fact the \"variant\" is unneccessary now because Google has no DH algorithm implementation. Thus key encryption scheme would be choosen by certificate type only: \"key transport\" for RSA and \"key agreement\" for ECC certificates.\r\n\t */\r\n\taddRecipientByCertificate(certificate, parameters, variant)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tconst encryptionParameters = parameters || {};\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Check type of certificate\r\n\t\tif(certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.113549\") !== (-1))\r\n\t\t\tvariant = 1; // For the moment it is the only variant for RSA-based certificates\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.10045\") !== (-1))\r\n\t\t\t\tvariant = 2; // For the moment it is the only variant for ECC-based certificates\r\n\t\t\telse\r\n\t\t\t\tthrow new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize encryption parameters \r\n\t\tif((\"oaepHashAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.oaepHashAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"kdfAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.kdfAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"kekEncryptionLength\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.kekEncryptionLength = 256;\r\n\r\n\t\tif((\"useOAEP\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.useOAEP = true;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Add new \"recipient\" depends on \"variant\" and certificate type \r\n\t\tswitch(variant)\r\n\t\t{\r\n\t\t\tcase 1: // Key transport scheme\r\n\t\t\t\t{\r\n\t\t\t\t\tlet algorithmId;\r\n\t\t\t\t\tlet algorithmParams;\r\n\r\n\t\t\t\t\tif(encryptionParameters.useOAEP === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\t\talgorithmId = getOIDByAlgorithm({\r\n\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif(algorithmId === \"\")\r\n\t\t\t\t\t\t\tthrow new Error(\"Can not find OID for RSA-OAEP\");\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t//region RSAES-OAEP-params\r\n\t\t\t\t\t\tconst hashOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\t\tname: encryptionParameters.oaepHashAlgorithm\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif(hashOID === \"\")\r\n\t\t\t\t\t\t\tthrow new Error(`Unknown OAEP hash algorithm: ${encryptionParameters.oaepHashAlgorithm}`);\r\n\r\n\t\t\t\t\t\tconst hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hashOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({\r\n\t\t\t\t\t\t\thashAlgorithm,\r\n\t\t\t\t\t\t\tmaskGenAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // id-mgf1\r\n\t\t\t\t\t\t\t\talgorithmParams: hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\talgorithmParams = rsaOAEPParams.toSchema();\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse // Use old RSAES-PKCS1-v1_5 schema instead\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\t\talgorithmId = getOIDByAlgorithm({\r\n\t\t\t\t\t\t\tname: \"RSAES-PKCS1-v1_5\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif(algorithmId === \"\")\r\n\t\t\t\t\t\t\tthrow new Error(\"Can not find OID for RSAES-PKCS1-v1_5\");\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\talgorithmParams = new asn1js.Null();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//region KeyTransRecipientInfo\r\n\t\t\t\t\tconst keyInfo = new KeyTransRecipientInfo({\r\n\t\t\t\t\t\tversion: 0,\r\n\t\t\t\t\t\trid: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\tissuer: certificate.issuer,\r\n\t\t\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId,\r\n\t\t\t\t\t\t\talgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientCertificate: certificate\r\n\t\t\t\t\t\t// \"encryptedKey\" will be calculated in \"encrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 1,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // Key agreement scheme\r\n\t\t\t\t{\r\n\t\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t\tconst encryptedKey = new RecipientEncryptedKey({\r\n\t\t\t\t\t\trid: new KeyAgreeRecipientIdentifier({\r\n\t\t\t\t\t\t\tvariant: 1,\r\n\t\t\t\t\t\t\tvalue: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\t\tissuer: certificate.issuer,\r\n\t\t\t\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t// \"encryptedKey\" will be calculated in \"encrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst aesKWoid = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\t\tlength: encryptionParameters.kekEncryptionLength\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(aesKWoid === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown length for key encryption algorithm: ${encryptionParameters.kekEncryptionLength}`);\r\n\t\t\t\t\r\n\t\t\t\t\tconst aesKW = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: aesKWoid,\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region KeyAgreeRecipientInfo\r\n\t\t\t\t\tconst ecdhOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tkdf: encryptionParameters.kdfAlgorithm\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(ecdhOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown KDF algorithm: ${encryptionParameters.kdfAlgorithm}`);\r\n\t\t\t\t\r\n\t\t\t\t\t// In fact there is no need in so long UKM, but RFC2631\r\n\t\t\t\t\t// has requirement that \"UserKeyMaterial\" must be 512 bits long\r\n\t\t\t\t\tconst ukmBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst ukmView = new Uint8Array(ukmBuffer);\r\n\t\t\t\t\tgetRandomValues(ukmView); // Generate random values in 64 bytes long buffer\r\n\t\t\t\t\r\n\t\t\t\t\tconst keyInfo = new KeyAgreeRecipientInfo({\r\n\t\t\t\t\t\tversion: 3,\r\n\t\t\t\t\t\t// \"originator\" will be calculated in \"encrypt\" function because ephemeral key would be generated there\r\n\t\t\t\t\t\tukm: new asn1js.OctetString({ valueHex: ukmBuffer }),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: ecdhOID,\r\n\t\t\t\t\t\t\talgorithmParams: aesKW.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientEncryptedKeys: new RecipientEncryptedKeys({\r\n\t\t\t\t\t\t\tencryptedKeys: [encryptedKey]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientCertificate: certificate\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 2,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown \"variant\" value: ${variant}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Add recipient based on pre-defined data like password or KEK\r\n\t * @param {ArrayBuffer} preDefinedData ArrayBuffer with pre-defined data\r\n\t * @param {Object} parameters Additional parameters neccessary for \"fine tunning\" of encryption process\r\n\t * @param {number} variant Variant = 1 for pre-defined \"key encryption key\" (KEK). Variant = 2 for password-based encryption.\r\n\t */\r\n\taddRecipientByPreDefinedData(preDefinedData, parameters, variant)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst encryptionParameters = parameters || {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check initial parameters\r\n\t\tif((preDefinedData instanceof ArrayBuffer) === false)\r\n\t\t\tthrow new Error(\"Please pass \\\"preDefinedData\\\" in ArrayBuffer type\");\r\n\t\t\r\n\t\tif(preDefinedData.byteLength === 0)\r\n\t\t\tthrow new Error(\"Pre-defined data could have zero length\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize encryption parameters\r\n\t\tif((\"keyIdentifier\" in encryptionParameters) === false)\r\n\t\t{\r\n\t\t\tconst keyIdentifierBuffer = new ArrayBuffer(16);\r\n\t\t\tconst keyIdentifierView = new Uint8Array(keyIdentifierBuffer);\r\n\t\t\tgetRandomValues(keyIdentifierView);\r\n\t\t\t\r\n\t\t\tencryptionParameters.keyIdentifier = keyIdentifierBuffer;\r\n\t\t}\r\n\t\t\r\n\t\tif((\"hmacHashAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.hmacHashAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"iterationCount\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.iterationCount = 2048;\r\n\t\t\r\n\t\tif((\"keyEncryptionAlgorithm\" in encryptionParameters) === false)\r\n\t\t{\r\n\t\t\tencryptionParameters.keyEncryptionAlgorithm = {\r\n\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\tlength: 256\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tif((\"keyEncryptionAlgorithmParams\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.keyEncryptionAlgorithmParams = new asn1js.Null();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Add new recipient based on passed variant\r\n\t\tswitch(variant)\r\n\t\t{\r\n\t\t\tcase 1: // KEKRecipientInfo\r\n\t\t\t\t{\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\r\n\t\t\t\t\tif(kekOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region KEKRecipientInfo\r\n\t\t\t\t\tconst keyInfo = new KEKRecipientInfo({\r\n\t\t\t\t\t\tversion: 4,\r\n\t\t\t\t\t\tkekid: new KEKIdentifier({\r\n\t\t\t\t\t\t\tkeyIdentifier: new asn1js.OctetString({ valueHex: encryptionParameters.keyIdentifier })\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: kekOID,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t For AES-KW params are NULL, but for other algorithm could another situation.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tpreDefinedKEK: preDefinedData\r\n\t\t\t\t\t// \"encryptedKey\" would be set in \"ecrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 3,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // PasswordRecipientinfo\r\n\t\t\t\t{\r\n\t\t\t\t\t//region keyDerivationAlgorithm\r\n\t\t\t\t\tconst pbkdf2OID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(pbkdf2OID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Can not find OID for PBKDF2\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Salt\r\n\t\t\t\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\t\t\tgetRandomValues(saltView);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region HMAC-based algorithm\r\n\t\t\t\t\tconst hmacOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\tname: encryptionParameters.hmacHashAlgorithm\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(hmacOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Incorrect value for \"hmacHashAlgorithm\": ${encryptionParameters.hmacHashAlgorithm}`);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region PBKDF2-params\r\n\t\t\t\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\t\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\t\t\t\titerationCount: encryptionParameters.iterationCount,\r\n\t\t\t\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\r\n\t\t\t\t\tif(kekOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region PasswordRecipientinfo\r\n\t\t\t\t\tconst keyInfo = new PasswordRecipientinfo({\r\n\t\t\t\t\t\tversion: 0,\r\n\t\t\t\t\t\tkeyDerivationAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: kekOID,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t For AES-KW params are NULL, but for other algorithm could be another situation.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tpassword: preDefinedData\r\n\t\t\t\t\t// \"encryptedKey\" would be set in \"ecrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 4,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown value for \"variant\": ${variant}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Enveloped Data content with encrypted data\r\n\t * @param {Object} contentEncryptionAlgorithm WebCrypto algorithm. For the moment here could be only \"AES-CBC\" or \"AES-GCM\" algorithms.\r\n\t * @param {ArrayBuffer} contentToEncrypt Content to encrypt\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(contentEncryptionAlgorithm, contentToEncrypt)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tgetRandomValues(ivView);\r\n\t\t\r\n\t\tconst contentView = new Uint8Array(contentToEncrypt);\r\n\t\t\r\n\t\tlet sessionKey;\r\n\t\tlet encryptedContent;\r\n\t\tlet exportedSessionKey;\r\n\t\t\r\n\t\tconst recipientsPromises = [];\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for input parameters\r\n\t\tconst contentEncryptionOID = getOIDByAlgorithm(contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Generate new content encryption key\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.generateKey(contentEncryptionAlgorithm, true, [\"encrypt\"]));\r\n\t\t//endregion\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tsessionKey = result;\r\n\t\t\t\r\n\t\t\treturn crypto.encrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tsessionKey,\r\n\t\t\tcontentView);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t//region Export raw content of content encryption key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Create output OCTETSTRING with encrypted content\r\n\t\t\tencryptedContent = result;\r\n\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\treturn crypto.exportKey(\"raw\", sessionKey);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t).then(result =>\r\n\t\t{\r\n\t\t\texportedSessionKey = result;\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t//region Append common information to CMS_ENVELOPED_DATA\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.version = 2;\r\n\t\t\tthis.encryptedContentInfo = new EncryptedContentInfo({\r\n\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\", // \"data\"\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: encryptedContent })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Special sub-functions to work with each recipient's type\r\n\t\tfunction SubKeyAgreeRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\r\n\t\t\tlet ecdhPublicKey;\r\n\t\t\tlet ecdhPrivateKey;\r\n\t\t\t\r\n\t\t\tlet recipientCurve;\r\n\t\t\tlet recipientCurveLength;\r\n\t\t\t\r\n\t\t\tlet exportedECDHPublicKey;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"namedCurve\" parameter from recipient's certificate\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tconst curveObject = _this.recipientInfos[index].value.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n\t\t\t\t\r\n\t\t\t\tif(curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName())\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"recipientCertificate\" for index ${index}`);\r\n\t\t\t\t\r\n\t\t\t\tconst curveOID = curveObject.valueBlock.toString();\r\n\t\t\t\t\r\n\t\t\t\tswitch(curveOID)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\t\t\trecipientCurve = \"P-256\";\r\n\t\t\t\t\t\trecipientCurveLength = 256;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\t\t\trecipientCurve = \"P-384\";\r\n\t\t\t\t\t\trecipientCurveLength = 384;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\t\t\trecipientCurve = \"P-521\";\r\n\t\t\t\t\t\trecipientCurveLength = 528;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect curve OID for index ${index}`);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn recipientCurve;\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Generate ephemeral ECDH key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.generateKey({\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tnamedCurve: result\r\n\t\t\t\t},\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"deriveBits\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Export public key of ephemeral ECDH key pair\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\tecdhPublicKey = result.publicKey;\r\n\t\t\t\tecdhPrivateKey = result.privateKey;\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.exportKey(\"spki\", ecdhPublicKey);\r\n\t\t\t},\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\texportedECDHPublicKey = result;\r\n\t\t\t\t\r\n\t\t\t\treturn _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Create shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result => crypto.deriveBits({\r\n\t\t\t\tname: \"ECDH\",\r\n\t\t\t\tpublic: result\r\n\t\t\t},\r\n\t\t\tecdhPrivateKey,\r\n\t\t\trecipientCurveLength),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Apply KDF function to shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t */\r\n\t\t\t\tresult =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get length of used AES-KW algorithm\r\n\t\t\t\t\tconst aesKWAlgorithm = new AlgorithmIdentifier({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in KWalgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Translate AES-KW length to ArrayBuffer\r\n\t\t\t\t\tlet kwLength = KWalgorithm.length;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst kwLengthBuffer = new ArrayBuffer(4);\r\n\t\t\t\t\tconst kwLengthView = new Uint8Array(kwLengthBuffer);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 3; j >= 0; j--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkwLengthView[j] = kwLength;\r\n\t\t\t\t\t\tkwLength >>= 8;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Create and encode \"ECC-CMS-SharedInfo\" structure\r\n\t\t\t\t\tconst eccInfo = new ECCCMSSharedInfo({\r\n\t\t\t\t\t\tkeyInfo: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: aesKWAlgorithm.algorithmId,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t Initially RFC5753 says that AES algorithms have absent parameters.\r\n\t\t\t\t\t\t\t But since early implementations all put NULL here. Thus, in order to be\r\n\t\t\t\t\t\t\t \"backward compatible\", index also put NULL here.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tentityUInfo: _this.recipientInfos[index].value.ukm,\r\n\t\t\t\t\t\tsuppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst encodedInfo = eccInfo.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get SHA algorithm used together with ECDH\r\n\t\t\t\t\tconst ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in ecdhAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\r\n\t\t\t\t},\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Import AES-KW key from result of KDF function\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.importKey(\"raw\", result, { name: \"AES-KW\" }, true, [\"wrapKey\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Finally wrap session key by using AES-KW algorithm\r\n\t\t\tcurrentSequence = currentSequence.then(result => crypto.wrapKey(\"raw\", sessionKey, result, { name: \"AES-KW\" }),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region OriginatorIdentifierOrKey\r\n\t\t\t\tconst asn1 = asn1js.fromBER(exportedECDHPublicKey);\r\n\t\t\t\t\t\r\n\t\t\t\tconst originator = new OriginatorIdentifierOrKey();\r\n\t\t\t\toriginator.variant = 3;\r\n\t\t\t\toriginator.value = new OriginatorPublicKey({ schema: asn1.result });\r\n\t\t\t\t// There is option when we can stay with ECParameters, but here index prefer to avoid the params\r\n\t\t\t\tif(\"algorithmParams\" in originator.value.algorithm)\r\n\t\t\t\t\tdelete originator.value.algorithm.algorithmParams;\r\n\t\t\t\t\t\r\n\t\t\t\t_this.recipientInfos[index].value.originator = originator;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t/*\r\n\t\t\t\t We will not support using of same ephemeral key for many recipients\r\n\t\t\t\t */\r\n\t\t\t\t_this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn {ecdhPrivateKey};\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\r\n\t\tasync function SubKeyTransRecipientInfo(index)\r\n\t\t{\r\n\t\t\tconst algorithmParameters = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\tif(\"name\" in algorithmParameters === false)\r\n\t\t\t\tthrow new Error(`Unknown keyEncryptionAlgorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\r\n\t\t\t//region RSA-OAEP case\r\n\t\t\tif(algorithmParameters.name === \"RSA-OAEP\")\r\n\t\t\t{\r\n\t\t\t\tconst schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\r\n\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n\r\n\t\t\t\talgorithmParameters.hash = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in algorithmParameters.hash) === false)\r\n\t\t\t\t\tthrow new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tconst publicKey = await _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\talgorithm: algorithmParameters,\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"wrapKey\"]\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst encryptedKey = await crypto.encrypt(publicKey.algorithm, publicKey, exportedSessionKey);\r\n\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({valueHex: encryptedKey});\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tconst jjj = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKEKRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import KEK from pre-defined data\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tnew Uint8Array(_this.recipientInfos[index].value.preDefinedKEK),\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"wrapKey\"]); // Too specific for AES-KW\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Wrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubPasswordRecipientinfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet pbkdf2Params;\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that we have encoded \"keyDerivationAlgorithm\" plus \"PBKDF2_params\" in there\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpbkdf2Params = new PBKDF2Params({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tconst passwordView = new Uint8Array(_this.recipientInfos[index].value.password);\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tpasswordView,\r\n\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"deriveKey\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive key for \"keyEncryptionAlgorithm\"\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get HMAC hash algorithm\r\n\t\t\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\t\t\t\r\n\t\t\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 \"salt\" value\r\n\t\t\t\tconst saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 iterations count\r\n\t\t\t\tconst iterations = pbkdf2Params.iterationCount;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.deriveKey({\r\n\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\titerations\r\n\t\t\t\t},\r\n\t\t\t\tresult,\r\n\t\t\t\tkekAlgorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"wrapKey\"]); // Usages are too specific for KEK algorithm\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Wrap previously exported session key (Also too specific for KEK algorithm)\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create special routines for each \"recipient\"\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tfor(let i = 0; i < this.recipientInfos.length; i++)\r\n\t\t\t{\r\n\t\t\t\t//region Initial variables\r\n\t\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\tswitch(this.recipientInfos[i].variant)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 1: // KeyTransRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKeyTransRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2: // KeyAgreeRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKeyAgreeRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3: // KEKRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKEKRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4: // PasswordRecipientinfo\r\n\t\t\t\t\t\tcurrentSequence = SubPasswordRecipientinfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Uknown recipient type in array with index ${i}`);\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\trecipientsPromises.push(currentSequence);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\treturn Promise.all(recipientsPromises);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Decrypt existing CMS Enveloped Data content\r\n\t * @param {number} recipientIndex Index of recipient\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(recipientIndex, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst decryptionParameters = parameters || {};\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for input parameters\r\n\t\tif((recipientIndex + 1) > this.recipientInfos.length)\r\n\t\t\treturn Promise.reject(`Maximum value for \"index\" is: ${this.recipientInfos.length - 1}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Special sub-functions to work with each recipient's type\r\n\t\tfunction SubKeyAgreeRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\r\n\t\t\tlet recipientCurve;\r\n\t\t\tlet recipientCurveLength;\r\n\t\t\t\r\n\t\t\tlet curveOID;\r\n\t\t\t\r\n\t\t\tlet ecdhPrivateKey;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"namedCurve\" parameter from recipient's certificate\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"recipientCertificate\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientCertificate\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"recipientPrivateKey\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tconst curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\tif(curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName())\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"recipientCertificate\" for index ${index}`);\r\n\t\t\t\tcurveOID = curveObject.valueBlock.toString();\r\n\t\t\t\t\t\r\n\t\t\t\tswitch(curveOID)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\t\t\trecipientCurve = \"P-256\";\r\n\t\t\t\t\t\trecipientCurveLength = 256;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\t\t\trecipientCurve = \"P-384\";\r\n\t\t\t\t\t\trecipientCurveLength = 384;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\t\t\trecipientCurve = \"P-521\";\r\n\t\t\t\t\t\trecipientCurveLength = 528;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect curve OID for index ${index}`);\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"pkcs8\",\r\n\t\t\t\t\tdecryptionParameters.recipientPrivateKey,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"deriveBits\"]\r\n\t\t\t\t);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import sender's ephemeral public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\tecdhPrivateKey = result;\r\n\t\t\t\t\t\r\n\t\t\t\t//region Change \"OriginatorPublicKey\" if \"curve\" parameter absent\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.originator.value.algorithm) === false)\r\n\t\t\t\t\t_this.recipientInfos[index].value.originator.value.algorithm.algorithmParams = new asn1js.ObjectIdentifier({ value: curveOID });\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Create ArrayBuffer with sender's public key\r\n\t\t\t\tconst buffer = _this.recipientInfos[index].value.originator.value.toSchema().toBER(false);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"spki\",\r\n\t\t\t\t\tbuffer,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Create shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.deriveBits({\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tpublic: result\r\n\t\t\t\t},\r\n\t\t\t\tecdhPrivateKey,\r\n\t\t\t\trecipientCurveLength),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Apply KDF function to shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t */\r\n\t\t\t\tresult =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get length of used AES-KW algorithm\r\n\t\t\t\t\tconst aesKWAlgorithm = new AlgorithmIdentifier({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in KWalgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Translate AES-KW length to ArrayBuffer\r\n\t\t\t\t\tlet kwLength = KWalgorithm.length;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst kwLengthBuffer = new ArrayBuffer(4);\r\n\t\t\t\t\tconst kwLengthView = new Uint8Array(kwLengthBuffer);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 3; j >= 0; j--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkwLengthView[j] = kwLength;\r\n\t\t\t\t\t\tkwLength >>= 8;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Create and encode \"ECC-CMS-SharedInfo\" structure\r\n\t\t\t\t\tconst eccInfo = new ECCCMSSharedInfo({\r\n\t\t\t\t\t\tkeyInfo: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: aesKWAlgorithm.algorithmId,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t Initially RFC5753 says that AES algorithms have absent parameters.\r\n\t\t\t\t\t\t\t But since early implementations all put NULL here. Thus, in order to be\r\n\t\t\t\t\t\t\t \"backward compatible\", index also put NULL here.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tentityUInfo: _this.recipientInfos[index].value.ukm,\r\n\t\t\t\t\t\tsuppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst encodedInfo = eccInfo.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get SHA algorithm used together with ECDH\r\n\t\t\t\t\tconst ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in ecdhAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\treturn kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\r\n\t\t\t\t},\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import AES-KW key from result of KDF function\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.importKey(\"raw\",\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t{ name: \"AES-KW\" },\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"unwrapKey\"]),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Finally unwrap session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t{ name: \"AES-KW\" },\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\r\n\t\tasync function SubKeyTransRecipientInfo(index)\r\n\t\t{\r\n\t\t\tif((\"recipientPrivateKey\" in decryptionParameters) === false)\r\n\t\t\t\tthrow new Error(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyTransRecipientInfo\\\"\");\r\n\r\n\t\t\tconst algorithmParameters = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\tif(\"name\" in algorithmParameters === false)\r\n\t\t\t\tthrow new Error(`Unknown keyEncryptionAlgorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\r\n\t\t\t//region RSA-OAEP case\r\n\t\t\tif(algorithmParameters.name === \"RSA-OAEP\")\r\n\t\t\t{\r\n\t\t\t\tconst schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\r\n\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n\r\n\t\t\t\talgorithmParameters.hash = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in algorithmParameters.hash) === false)\r\n\t\t\t\t\tthrow new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\tconst privateKey = await crypto.importKey(\r\n\t\t\t\t\"pkcs8\",\r\n\t\t\t\tdecryptionParameters.recipientPrivateKey,\r\n\t\t\t\talgorithmParameters,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"decrypt\"]\r\n\t\t\t);\r\n\r\n\t\t\tconst sessionKey = await crypto.decrypt(\r\n\t\t\t\tprivateKey.algorithm,\r\n\t\t\t\tprivateKey,\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex\r\n\t\t\t);\r\n\r\n\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\tthrow new Error(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\tsessionKey,\r\n\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"decrypt\"]\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKEKRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import KEK from pre-defined data\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"preDefinedData\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tdecryptionParameters.preDefinedData,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"unwrapKey\"]); // Too specific for AES-KW\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Unwrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubPasswordRecipientinfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet pbkdf2Params;\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"preDefinedData\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpbkdf2Params = new PBKDF2Params({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tdecryptionParameters.preDefinedData,\r\n\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"deriveKey\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive key for \"keyEncryptionAlgorithm\"\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get HMAC hash algorithm\r\n\t\t\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\t\t\t\r\n\t\t\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 \"salt\" value\r\n\t\t\t\tconst saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 iterations count\r\n\t\t\t\tconst iterations = pbkdf2Params.iterationCount;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.deriveKey({\r\n\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\titerations\r\n\t\t\t\t},\r\n\t\t\t\tresult,\r\n\t\t\t\tkekAlgorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"unwrapKey\"]); // Usages are too specific for KEK algorithm\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Unwrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Perform steps, specific to each type of session key encryption\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\tswitch(this.recipientInfos[recipientIndex].variant)\r\n\t\t\t{\r\n\t\t\t\tcase 1: // KeyTransRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKeyTransRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2: // KeyAgreeRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKeyAgreeRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3: // KEKRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKEKRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4: // PasswordRecipientinfo\r\n\t\t\t\t\tcurrentSequence = SubPasswordRecipientinfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(`Uknown recipient type in array with index ${recipientIndex}`);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Finally decrypt data by session key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"intialization vector\" for content encryption algorithm\r\n\t\t\tconst ivBuffer = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;\r\n\t\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\t\t\t\t\r\n\t\t\tif(this.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = this.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(const content of this.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\treturn crypto.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"EnvelopedData.js"}