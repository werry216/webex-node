{"version":3,"sources":["../src/SignedCertificateTimestampList.js"],"names":["SignedCertificateTimestamp","constructor","parameters","version","defaultValues","logID","timestamp","extensions","hashAlgorithm","signatureAlgorithm","signature","fromSchema","schema","fromStream","stream","memberName","ArrayBuffer","Date","asn1js","Any","Error","RawData","seqStream","SeqStream","ByteStream","buffer","data","blockLength","getUint16","getBlock","Uint8Array","slice","extensionsLength","signatureLength","signatureData","asn1","fromBER","offset","result","toSchema","toStream","appendUint16","byteLength","valueBeforeDecode","appendChar","appendView","timeBuffer","timeView","baseArray","valueOf","set","_hashAlgorithm","toLowerCase","_signatureAlgorithm","_signature","toBER","toJSON","verify","logs","dataType","logId","publicKeyBase64","publicKeyInfo","log","log_id","key","PublicKeyInfo","appendUint24","subtle","verifyWithPublicKey","_stream","_buffer","_length","valueBlock","valueHex","algorithmId","SignedCertificateTimestampList","timestamps","compareWithDefault","memberValue","length","names","optional","OctetString","name","blockName","dataLength","push","overallLength","timestampsData","timestampStream","view","Array","from","element","verifySCTsForCertificate","certificate","issuerCertificate","index","parsedValue","tbs","issuerId","preCert","crypto","Promise","reject","i","extnID","splice","encodeTBS","digest","subjectPublicKeyInfo","verifyArray","verifyResult"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, utilFromBase, utilToBase, bufferToHexCodes, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\";\nimport { ByteStream, SeqStream } from \"bytestreamjs\";\nimport { getCrypto, getEngine } from \"./common.js\";\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\n//**************************************************************************************\nexport class SignedCertificateTimestamp\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for SignedCertificateTimestamp class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", SignedCertificateTimestamp.defaultValues(\"version\"));\n\t\t/**\n\t\t * @type {ArrayBuffer}\n\t\t * @desc logID\n\t\t */\n\t\tthis.logID = getParametersValue(parameters, \"logID\", SignedCertificateTimestamp.defaultValues(\"logID\"));\n\t\t/**\n\t\t * @type {Date}\n\t\t * @desc timestamp\n\t\t */\n\t\tthis.timestamp = getParametersValue(parameters, \"timestamp\", SignedCertificateTimestamp.defaultValues(\"timestamp\"));\n\t\t/**\n\t\t * @type {ArrayBuffer}\n\t\t * @desc extensions\n\t\t */\n\t\tthis.extensions = getParametersValue(parameters, \"extensions\", SignedCertificateTimestamp.defaultValues(\"extensions\"));\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc hashAlgorithm\n\t\t */\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", SignedCertificateTimestamp.defaultValues(\"hashAlgorithm\"));\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc signatureAlgorithm\n\t\t */\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignedCertificateTimestamp.defaultValues(\"signatureAlgorithm\"));\n\t\t/**\n\t\t * @type {Object}\n\t\t * @desc signature\n\t\t */\n\t\tthis.signature = getParametersValue(parameters, \"signature\", SignedCertificateTimestamp.defaultValues(\"signature\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"stream\"\n\t\tif(\"stream\" in parameters)\n\t\t\tthis.fromStream(parameters.stream);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn 0;\n\t\t\tcase \"logID\":\n\t\t\tcase \"extensions\":\n\t\t\t\treturn new ArrayBuffer(0);\n\t\t\tcase \"timestamp\":\n\t\t\t\treturn new Date(0);\n\t\t\tcase \"hashAlgorithm\":\n\t\t\tcase \"signatureAlgorithm\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"signature\":\n\t\t\t\treturn new asn1js.Any();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestamp class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\tif((schema instanceof asn1js.RawData) === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestamp\");\n\t\t\n\t\tconst seqStream = new SeqStream({\n\t\t\tstream: new ByteStream({\n\t\t\t\tbuffer: schema.data\n\t\t\t})\n\t\t});\n\t\t\n\t\tthis.fromStream(seqStream);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert SeqStream data into current class\n\t * @param {!SeqStream} stream\n\t */\n\tfromStream(stream)\n\t{\n\t\tconst blockLength = stream.getUint16();\n\t\t\n\t\tthis.version = (stream.getBlock(1))[0];\n\t\t\n\t\tif(this.version === 0)\n\t\t{\n\t\t\tthis.logID = (new Uint8Array(stream.getBlock(32))).buffer.slice(0);\n\t\t\tthis.timestamp = new Date(utilFromBase(new Uint8Array(stream.getBlock(8)), 8));\n\t\t\t\n\t\t\t//region Extensions\n\t\t\tconst extensionsLength = stream.getUint16();\n\t\t\tthis.extensions = (new Uint8Array(stream.getBlock(extensionsLength))).buffer.slice(0);\n\t\t\t//endregion\n\t\t\t\n\t\t\t//region Hash algorithm\n\t\t\tswitch((stream.getBlock(1))[0])\n\t\t\t{\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.hashAlgorithm = \"none\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.hashAlgorithm = \"md5\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.hashAlgorithm = \"sha1\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.hashAlgorithm = \"sha224\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tthis.hashAlgorithm = \"sha256\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tthis.hashAlgorithm = \"sha384\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tthis.hashAlgorithm = \"sha512\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t\t}\n\t\t\t//endregion\n\t\t\t\n\t\t\t//region Signature algorithm\n\t\t\tswitch((stream.getBlock(1))[0])\n\t\t\t{\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.signatureAlgorithm = \"anonymous\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.signatureAlgorithm = \"rsa\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.signatureAlgorithm = \"dsa\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.signatureAlgorithm = \"ecdsa\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t\t}\n\t\t\t//endregion\n\t\t\t\n\t\t\t//region Signature\n\t\t\tconst signatureLength = stream.getUint16();\n\t\t\tconst signatureData = (new Uint8Array(stream.getBlock(signatureLength))).buffer.slice(0);\n\t\t\t\n\t\t\tconst asn1 = asn1js.fromBER(signatureData);\n\t\t\tif(asn1.offset === (-1))\n\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t\t\n\t\t\tthis.signature = asn1.result;\n\t\t\t//endregion\n\t\t\t\n\t\t\tif(blockLength !== (47 + extensionsLength + signatureLength))\n\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst stream = this.toStream();\n\t\t\n\t\treturn new asn1js.RawData({ data: stream.stream.buffer });\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to SeqStream data\n\t * @returns {SeqStream} SeqStream object\n\t */\n\ttoStream()\n\t{\n\t\tconst stream = new SeqStream();\n\t\t\n\t\tstream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecode.byteLength);\n\t\tstream.appendChar(this.version);\n\t\tstream.appendView(new Uint8Array(this.logID));\n\t\t\n\t\tconst timeBuffer = new ArrayBuffer(8);\n\t\tconst timeView = new Uint8Array(timeBuffer);\n\t\t\n\t\tconst baseArray = utilToBase(this.timestamp.valueOf(), 8);\n\t\ttimeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n\t\t\n\t\tstream.appendView(timeView);\n\t\tstream.appendUint16(this.extensions.byteLength);\n\t\t\n\t\tif(this.extensions.byteLength)\n\t\t\tstream.appendView(new Uint8Array(this.extensions));\n\t\t\n\t\tlet _hashAlgorithm;\n\t\t\n\t\tswitch(this.hashAlgorithm.toLowerCase())\n\t\t{\n\t\t\tcase \"none\":\n\t\t\t\t_hashAlgorithm = 0;\n\t\t\t\tbreak;\n\t\t\tcase \"md5\":\n\t\t\t\t_hashAlgorithm = 1;\n\t\t\t\tbreak;\n\t\t\tcase \"sha1\":\n\t\t\t\t_hashAlgorithm = 2;\n\t\t\t\tbreak;\n\t\t\tcase \"sha224\":\n\t\t\t\t_hashAlgorithm = 3;\n\t\t\t\tbreak;\n\t\t\tcase \"sha256\":\n\t\t\t\t_hashAlgorithm = 4;\n\t\t\t\tbreak;\n\t\t\tcase \"sha384\":\n\t\t\t\t_hashAlgorithm = 5;\n\t\t\t\tbreak;\n\t\t\tcase \"sha512\":\n\t\t\t\t_hashAlgorithm = 6;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Incorrect data for hashAlgorithm: ${this.hashAlgorithm}`);\n\t\t}\n\t\t\n\t\tstream.appendChar(_hashAlgorithm);\n\t\t\n\t\tlet _signatureAlgorithm;\n\t\t\n\t\tswitch(this.signatureAlgorithm.toLowerCase())\n\t\t{\n\t\t\tcase \"anonymous\":\n\t\t\t\t_signatureAlgorithm = 0;\n\t\t\t\tbreak;\n\t\t\tcase \"rsa\":\n\t\t\t\t_signatureAlgorithm = 1;\n\t\t\t\tbreak;\n\t\t\tcase \"dsa\":\n\t\t\t\t_signatureAlgorithm = 2;\n\t\t\t\tbreak;\n\t\t\tcase \"ecdsa\":\n\t\t\t\t_signatureAlgorithm = 3;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Incorrect data for signatureAlgorithm: ${this.signatureAlgorithm}`);\n\t\t}\n\t\t\n\t\tstream.appendChar(_signatureAlgorithm);\n\t\t\n\t\tconst _signature = this.signature.toBER(false);\n\t\t\n\t\tstream.appendUint16(_signature.byteLength);\n\t\tstream.appendView(new Uint8Array(_signature));\n\t\t\n\t\treturn stream;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tversion: this.version,\n\t\t\tlogID: bufferToHexCodes(this.logID),\n\t\t\ttimestamp: this.timestamp,\n\t\t\textensions: bufferToHexCodes(this.extensions),\n\t\t\thashAlgorithm: this.hashAlgorithm,\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm,\n\t\t\tsignature: this.signature.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Verify SignedCertificateTimestamp for specific input data\n\t * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\n\t * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\n\t * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\n\t * @param {ArrayBuffer} data Data to verify signature against. Could be encoded Certificate or encoded PreCert\n\t * @param {Number} [dataType=0] Type = 0 (data is encoded Certificate), type = 1 (data is encoded PreCert)\n\t * @return {Promise<void>}\n\t */\n\tasync verify(logs, data, dataType = 0)\n\t{\n\t\t//region Initial variables\n\t\tlet logId = toBase64(arrayBufferToString(this.logID));\n\t\t\n\t\tlet publicKeyBase64 = null;\n\t\tlet publicKeyInfo;\n\t\t\n\t\tlet stream = new SeqStream();\n\t\t//endregion\n\t\t\n\t\t//region Found and init public key\n\t\tfor(const log of logs)\n\t\t{\n\t\t\tif(log.log_id === logId)\n\t\t\t{\n\t\t\t\tpublicKeyBase64 = log.key;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(publicKeyBase64 === null)\n\t\t\tthrow new Error(`Public key not found for CT with logId: ${logId}`);\n\t\t\n\t\tconst asn1 = asn1js.fromBER(stringToArrayBuffer(fromBase64(publicKeyBase64)));\n\t\tif(asn1.offset === (-1))\n\t\t\tthrow new Error(`Incorrect key value for CT Log with logId: ${logId}`);\n\t\t\n\t\tpublicKeyInfo = new PublicKeyInfo({ schema: asn1.result });\n\t\t//endregion\n\t\t\n\t\t//region Initialize signed data block\n\t\tstream.appendChar(0x00); // sct_version\n\t\tstream.appendChar(0x00); // signature_type = certificate_timestamp\n\t\t\n\t\tconst timeBuffer = new ArrayBuffer(8);\n\t\tconst timeView = new Uint8Array(timeBuffer);\n\t\t\n\t\tconst baseArray = utilToBase(this.timestamp.valueOf(), 8);\n\t\ttimeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n\t\t\n\t\tstream.appendView(timeView);\n\t\t\n\t\tstream.appendUint16(dataType);\n\t\t\n\t\tif(dataType === 0)\n\t\t\tstream.appendUint24(data.byteLength);\n\t\t\n\t\tstream.appendView(new Uint8Array(data));\n\t\t\n\t\tstream.appendUint16(this.extensions.byteLength);\n\t\t\n\t\tif(this.extensions.byteLength !== 0)\n\t\t\tstream.appendView(new Uint8Array(this.extensions));\n\t\t//endregion\n\t\t\n\t\t//region Perform verification\n\t\treturn getEngine().subtle.verifyWithPublicKey(\n\t\t\tstream._stream._buffer.slice(0, stream._length),\n\t\t\t{ valueBlock: { valueHex: this.signature.toBER(false) } },\n\t\t\tpublicKeyInfo,\n\t\t\t{ algorithmId: \"\" },\n\t\t\t\"SHA-256\"\n\t\t);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC6962\n */\nexport default class SignedCertificateTimestampList\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for SignedCertificateTimestampList class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Array.<SignedCertificateTimestamp>}\n\t\t * @desc timestamps\n\t\t */\n\t\tthis.timestamps = getParametersValue(parameters, \"timestamps\", SignedCertificateTimestampList.defaultValues(\"timestamps\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"timestamps\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestampList class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"timestamps\":\n\t\t\t\treturn (memberValue.length === 0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestampList class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * SignedCertificateTimestampList ::= OCTET STRING\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [optional]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\tif((\"optional\" in names) === false)\n\t\t\tnames.optional = false;\n\t\t\n\t\treturn (new asn1js.OctetString({\n\t\t\tname: (names.blockName || \"SignedCertificateTimestampList\"),\n\t\t\toptional: names.optional\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Check the schema is valid\n\t\tif((schema instanceof asn1js.OctetString) === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tconst seqStream = new SeqStream({\n\t\t\tstream: new ByteStream({\n\t\t\t\tbuffer: schema.valueBlock.valueHex\n\t\t\t})\n\t\t});\n\t\t\n\t\tlet dataLength = seqStream.getUint16();\n\t\tif(dataLength !== seqStream.length)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n\t\t\n\t\twhile(seqStream.length)\n\t\t\tthis.timestamps.push(new SignedCertificateTimestamp({ stream: seqStream }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Initial variables\n\t\tconst stream = new SeqStream();\n\t\t\n\t\tlet overallLength = 0;\n\t\t\n\t\tconst timestampsData = [];\n\t\t//endregion\n\t\t\n\t\t//region Get overall length\n\t\tfor(const timestamp of this.timestamps)\n\t\t{\n\t\t\tconst timestampStream = timestamp.toStream();\n\t\t\ttimestampsData.push(timestampStream);\n\t\t\toverallLength += timestampStream.stream.buffer.byteLength;\n\t\t}\n\t\t//endregion\n\t\t\n\t\tstream.appendUint16(overallLength);\n\t\t\n\t\t//region Set data from all timestamps\n\t\tfor(const timestamp of timestampsData)\n\t\t\tstream.appendView(timestamp.stream.view);\n\t\t//endregion\n\t\t\n\t\treturn new asn1js.OctetString({ valueHex: stream.stream.buffer.slice(0) });\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\ttimestamps: Array.from(this.timestamps, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Verify SignedCertificateTimestamp for specific certificate content\n * @param {Certificate} certificate Certificate for which verification would be performed\n * @param {Certificate} issuerCertificate Certificate of the issuer of target certificate\n * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\n * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\n * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\n * @param {Number} [index=-1] Index of SignedCertificateTimestamp inside SignedCertificateTimestampList (for -1 would verify all)\n * @return {Array} Array of verification results\n */\nexport async function verifySCTsForCertificate(certificate, issuerCertificate, logs, index = (-1))\n{\n\t//region Initial variables\n\tlet parsedValue = null;\n\tlet tbs;\n\tlet issuerId;\n\t\n\tconst stream = new SeqStream();\n\t\n\tlet preCert;\n\t//endregion\n\t\n\t//region Get a \"crypto\" extension\n\tconst crypto = getCrypto();\n\tif(typeof crypto === \"undefined\")\n\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\n\t//endregion\n\t\n\t//region Remove certificate extension\n\tfor(let i = 0; i < certificate.extensions.length; i++)\n\t{\n\t\tswitch(certificate.extensions[i].extnID)\n\t\t{\n\t\t\tcase \"1.3.6.1.4.1.11129.2.4.2\":\n\t\t\t\t{\n\t\t\t\t\tparsedValue = certificate.extensions[i].parsedValue;\n\t\t\t\t\t\n\t\t\t\t\tif(parsedValue.timestamps.length === 0)\n\t\t\t\t\t\tthrow new Error(\"Nothing to verify in the certificate\");\n\t\t\t\t\t\n\t\t\t\t\tcertificate.extensions.splice(i, 1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t}\n\t//endregion\n\t\n\t//region Check we do have what to verify\n\tif(parsedValue === null)\n\t\tthrow new Error(\"No SignedCertificateTimestampList extension in the specified certificate\");\n\t//endregion\n\t\n\t//region Prepare modifier TBS value\n\ttbs = certificate.encodeTBS().toBER(false);\n\t//endregion\n\t\n\t//region Initialize \"issuer_key_hash\" value\n\tissuerId = await crypto.digest({ name: \"SHA-256\" }, new Uint8Array(issuerCertificate.subjectPublicKeyInfo.toSchema().toBER(false)));\n\t//endregion\n\t\n\t//region Make final \"PreCert\" value\n\tstream.appendView(new Uint8Array(issuerId));\n\tstream.appendUint24(tbs.byteLength);\n\tstream.appendView(new Uint8Array(tbs));\n\t\n\tpreCert = stream._stream._buffer.slice(0, stream._length);\n\t//endregion\n\t\n\t//region Call verification function for specified index\n\tif(index === (-1))\n\t{\n\t\tconst verifyArray = [];\n\t\t\n\t\tfor(const timestamp of parsedValue.timestamps)\n\t\t{\n\t\t\tconst verifyResult = await timestamp.verify(logs, preCert, 1);\n\t\t\tverifyArray.push(verifyResult);\n\t\t}\n\t\t\n\t\treturn verifyArray;\n\t}\n\t\n\tif(index >= parsedValue.timestamps.length)\n\t\tindex = (parsedValue.timestamps.length - 1);\n\t\n\treturn [await parsedValue.timestamps[index].verify(logs, preCert, 1)];\n\t//endregion\n}\n//**********************************************************************************\n"],"file":"SignedCertificateTimestampList.js"}