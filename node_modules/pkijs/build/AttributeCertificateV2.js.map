{"version":3,"sources":["../src/AttributeCertificateV2.js"],"names":["ObjectDigestInfo","constructor","parameters","digestedObjectType","defaultValues","otherObjectTypeID","digestAlgorithm","objectDigest","fromSchema","schema","memberName","asn1js","Enumerated","ObjectIdentifier","AlgorithmIdentifier","BitString","Error","names","Sequence","name","blockName","value","optional","asn1","compareSchema","verified","result","toSchema","push","toJSON","V2Form","issuerName","baseCertificateID","objectDigestInfo","GeneralNames","IssuerSerial","Constructed","idBlock","tagClass","tagNumber","valueBlock","Holder","entityName","AttributeCertificateInfoV2","version","holder","issuer","signature","serialNumber","attrCertValidityPeriod","attributes","issuerUniqueID","extensions","Integer","AttCertValidityPeriod","Extensions","Choice","Repeated","Attribute","valueDec","Array","from","element","AttributeCertificateV2","acinfo","signatureAlgorithm","signatureValue"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Attribute from \"./Attribute.js\";\nimport Extensions from \"./Extensions.js\";\nimport { AttCertValidityPeriod, IssuerSerial } from \"./AttributeCertificateV1.js\";\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class ObjectDigestInfo\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for ObjectDigestInfo class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Enumerated}\n\t\t * @desc digestedObjectType\n\t\t */\n\t\tthis.digestedObjectType = getParametersValue(parameters, \"digestedObjectType\", ObjectDigestInfo.defaultValues(\"digestedObjectType\"));\n\t\t\n\t\tif(\"otherObjectTypeID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectIdentifier}\n\t\t\t * @desc otherObjectTypeID\n\t\t\t */\n\t\t\tthis.otherObjectTypeID = getParametersValue(parameters, \"otherObjectTypeID\", ObjectDigestInfo.defaultValues(\"otherObjectTypeID\"));\n\t\t\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc digestAlgorithm\n\t\t */\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", ObjectDigestInfo.defaultValues(\"digestAlgorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc objectDigest\n\t\t */\n\t\tthis.objectDigest = getParametersValue(parameters, \"objectDigest\", ObjectDigestInfo.defaultValues(\"objectDigest\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"digestedObjectType\":\n\t\t\t\treturn new asn1js.Enumerated();\n\t\t\tcase \"otherObjectTypeID\":\n\t\t\t\treturn new asn1js.ObjectIdentifier();\n\t\t\tcase \"digestAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"objectDigest\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ObjectDigestInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * ObjectDigestInfo ::= SEQUENCE {\n\t *   digestedObjectType  ENUMERATED {\n\t *     publicKey            (0),\n\t *     publicKeyCert        (1),\n\t *     otherObjectTypes     (2) },\n\t *   -- otherObjectTypes MUST NOT\n\t *   -- be used in this profile\n\t *   otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,\n\t *   digestAlgorithm     AlgorithmIdentifier,\n\t *   objectDigest        BIT STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [digestedObjectType]\n\t\t * @property {string} [otherObjectTypeID]\n\t\t * @property {string} [digestAlgorithm]\n\t\t * @property {string} [objectDigest]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Enumerated({ name: (names.digestedObjectType || \"\") }),\n\t\t\t\tnew asn1js.ObjectIdentifier({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.otherObjectTypeID || \"\")\n\t\t\t\t}),\n\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.objectDigest || \"\") }),\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"digestedObjectType\",\n\t\t\t\"otherObjectTypeID\",\n\t\t\t\"digestAlgorithm\",\n\t\t\t\"objectDigest\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tObjectDigestInfo.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tdigestedObjectType: \"digestedObjectType\",\n\t\t\t\t\totherObjectTypeID: \"otherObjectTypeID\",\n\t\t\t\t\tdigestAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"digestAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tobjectDigest: \"objectDigest\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ObjectDigestInfo\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.digestedObjectType = asn1.result.digestedObjectType;\n\t\t\n\t\tif(\"otherObjectTypeID\" in asn1.result)\n\t\t\tthis.otherObjectTypeID = asn1.result.otherObjectTypeID;\n\t\t\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\n\t\tthis.objectDigest = asn1.result.objectDigest;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [this.digestedObjectType]\n\t\t});\n\t\t\n\t\tif(\"otherObjectTypeID\" in this)\n\t\t\tresult.value.push(this.otherObjectTypeID);\n\t\t\n\t\tresult.value.push(this.digestAlgorithm.toSchema());\n\t\tresult.value.push(this.objectDigest);\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tdigestedObjectType: this.digestedObjectType.toJSON()\n\t\t};\n\t\t\n\t\tif(\"otherObjectTypeID\" in this)\n\t\t\tresult.otherObjectTypeID = this.otherObjectTypeID.toJSON();\n\t\t\n\t\tresult.digestAlgorithm = this.digestAlgorithm.toJSON();\n\t\tresult.objectDigest = this.objectDigest.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class V2Form\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for V2Form class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"issuerName\" in parameters)\n\t\t\t/**\n\t\t\t * @type {GeneralNames}\n\t\t\t * @desc issuerName\n\t\t\t */\n\t\t\tthis.issuerName = getParametersValue(parameters, \"issuerName\", V2Form.defaultValues(\"issuerName\"));\n\t\t\n\t\tif(\"baseCertificateID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {IssuerSerial}\n\t\t\t * @desc baseCertificateID\n\t\t\t */\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", V2Form.defaultValues(\"baseCertificateID\"));\n\t\t\n\t\tif(\"objectDigestInfo\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectDigestInfo}\n\t\t\t * @desc objectDigestInfo\n\t\t\t */\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", V2Form.defaultValues(\"objectDigestInfo\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"issuerName\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"baseCertificateID\":\n\t\t\t\treturn new IssuerSerial();\n\t\t\tcase \"objectDigestInfo\":\n\t\t\t\treturn new ObjectDigestInfo();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for V2Form class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * V2Form ::= SEQUENCE {\n\t *   issuerName            GeneralNames  OPTIONAL,\n\t *   baseCertificateID     [0] IssuerSerial  OPTIONAL,\n\t *   objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL\n\t *     -- issuerName MUST be present in this profile\n\t *     -- baseCertificateID and objectDigestInfo MUST NOT\n\t *     -- be present in this profile\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuerName]\n\t\t * @property {string} [baseCertificateID]\n\t\t * @property {string} [objectDigestInfo]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tGeneralNames.schema({\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: names.issuerName\n\t\t\t\t\t}\n\t\t\t\t}, true),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"issuerName\",\n\t\t\t\"baseCertificateID\",\n\t\t\t\"objectDigestInfo\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tV2Form.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tissuerName: \"issuerName\",\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for V2Form\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"issuerName\" in asn1.result)\n\t\t\tthis.issuerName = new GeneralNames({ schema: asn1.result.issuerName });\n\t\t\n\t\tif(\"baseCertificateID\" in asn1.result)\n\t\t{\n\t\t\tthis.baseCertificateID = new IssuerSerial({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in asn1.result)\n\t\t{\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.objectDigestInfo.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence();\n\t\t\n\t\tif(\"issuerName\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerName.toSchema());\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn result;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {};\n\t\t\n\t\tif(\"issuerName\" in this)\n\t\t\tresult.issuerName = this.issuerName.toJSON();\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class Holder\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for Holder class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"baseCertificateID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {IssuerSerial}\n\t\t\t * @desc baseCertificateID\n\t\t\t */\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", Holder.defaultValues(\"baseCertificateID\"));\n\t\t\n\t\tif(\"entityName\" in parameters)\n\t\t\t/**\n\t\t\t * @type {GeneralNames}\n\t\t\t * @desc entityName\n\t\t\t */\n\t\t\tthis.entityName = getParametersValue(parameters, \"entityName\", Holder.defaultValues(\"entityName\"));\n\t\t\n\t\tif(\"objectDigestInfo\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectDigestInfo}\n\t\t\t * @desc objectDigestInfo\n\t\t\t */\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", Holder.defaultValues(\"objectDigestInfo\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"baseCertificateID\":\n\t\t\t\treturn new IssuerSerial();\n\t\t\tcase \"entityName\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"objectDigestInfo\":\n\t\t\t\treturn new ObjectDigestInfo();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for Holder class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * Holder ::= SEQUENCE {\n\t *   baseCertificateID   [0] IssuerSerial OPTIONAL,\n\t *       -- the issuer and serial number of\n\t *       -- the holder's Public Key Certificate\n\t *   entityName          [1] GeneralNames OPTIONAL,\n\t *       -- the name of the claimant or role\n\t *   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL\n\t *       -- used to directly authenticate the holder,\n\t *       -- for example, an executable\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [baseCertificateID]\n\t\t * @property {string} [entityName]\n\t\t * @property {string} [objectDigestInfo]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.entityName || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 1 // [2]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: GeneralNames.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"baseCertificateID\",\n\t\t\t\"entityName\",\n\t\t\t\"objectDigestInfo\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tHolder.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\n\t\t\t\t\tentityName: \"entityName\",\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Holder\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"baseCertificateID\" in asn1.result)\n\t\t{\n\t\t\tthis.baseCertificateID = new IssuerSerial({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"entityName\" in asn1.result)\n\t\t{\n\t\t\tthis.entityName = new GeneralNames({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.entityName.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in asn1.result)\n\t\t{\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.objectDigestInfo.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence();\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"entityName\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: this.entityName.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {};\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\n\t\t\n\t\tif(\"entityName\" in this)\n\t\t\tresult.entityName = this.entityName.toJSON();\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class AttributeCertificateInfoV2\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateInfoV2 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV2.defaultValues(\"version\"));\n\t\t/**\n\t\t * @type {Holder}\n\t\t * @desc holder\n\t\t */\n\t\tthis.holder = getParametersValue(parameters, \"holder\", AttributeCertificateInfoV2.defaultValues(\"holder\"));\n\t\t/**\n\t\t * @type {GeneralNames|V2Form}\n\t\t * @desc issuer\n\t\t */\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV2.defaultValues(\"issuer\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signature\n\t\t */\n\t\tthis.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV2.defaultValues(\"signature\"));\n\t\t/**\n\t\t * @type {Integer}\n\t\t * @desc serialNumber\n\t\t */\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV2.defaultValues(\"serialNumber\"));\n\t\t/**\n\t\t * @type {AttCertValidityPeriod}\n\t\t * @desc attrCertValidityPeriod\n\t\t */\n\t\tthis.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV2.defaultValues(\"attrCertValidityPeriod\"));\n\t\t/**\n\t\t * @type {Array.<Attribute>}\n\t\t * @desc attributes\n\t\t */\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV2.defaultValues(\"attributes\"));\n\t\t\n\t\tif(\"issuerUniqueID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {BitString}\n\t\t\t * @desc issuerUniqueID\n\t\t\t */\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV2.defaultValues(\"issuerUniqueID\"));\n\t\t\n\t\tif(\"extensions\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Extensions}\n\t\t\t * @desc extensions\n\t\t\t */\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV2.defaultValues(\"extensions\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn 1;\n\t\t\tcase \"holder\":\n\t\t\t\treturn new Holder();\n\t\t\tcase \"issuer\":\n\t\t\t\treturn {};\n\t\t\tcase \"signature\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"serialNumber\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"attrCertValidityPeriod\":\n\t\t\t\treturn new AttCertValidityPeriod();\n\t\t\tcase \"attributes\":\n\t\t\t\treturn [];\n\t\t\tcase \"issuerUniqueID\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tcase \"extensions\":\n\t\t\t\treturn new Extensions();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateInfoV2 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificateInfoV2 ::= SEQUENCE {\n\t *   version                 AttCertVersion, -- version is v2\n\t *   holder                  Holder,\n\t *   issuer                  AttCertIssuer,\n\t *   signature               AlgorithmIdentifier,\n\t *   serialNumber            CertificateSerialNumber,\n\t *   attrCertValidityPeriod  AttCertValidityPeriod,\n\t *   attributes              SEQUENCE OF Attribute,\n\t *   issuerUniqueID          UniqueIdentifier OPTIONAL,\n\t *   extensions              Extensions OPTIONAL\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuer]\n\t\t * @property {string} [serialNumber]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\n\t\t\t\tHolder.schema(names.holder || {}),\n\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tGeneralNames.schema({\n\t\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\t\tblockName: (names.issuer || \"\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\tname: (names.issuer || \"\"),\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: V2Form.schema().valueBlock.value\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signature || {}),\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\n\t\t\t\tAttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n\t\t\t\tnew asn1js.Sequence({\n\t\t\t\t\tname: (names.attributes || \"\"),\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\tvalue: Attribute.schema()\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.BitString({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.issuerUniqueID || \"\")\n\t\t\t\t}),\n\t\t\t\tExtensions.schema(names.extensions || {}, true)\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"version\",\n\t\t\t\"holder\",\n\t\t\t\"issuer\",\n\t\t\t\"signature\",\n\t\t\t\"serialNumber\",\n\t\t\t\"attrCertValidityPeriod\",\n\t\t\t\"attributes\",\n\t\t\t\"issuerUniqueID\",\n\t\t\t\"extensions\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateInfoV2.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tversion: \"version\",\n\t\t\t\t\tholder: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"holder\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tissuer: \"issuer\",\n\t\t\t\t\tsignature: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signature\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tserialNumber: \"serialNumber\",\n\t\t\t\t\tattrCertValidityPeriod: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"attrCertValidityPeriod\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tattributes: \"attributes\",\n\t\t\t\t\tissuerUniqueID: \"issuerUniqueID\",\n\t\t\t\t\textensions: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"extensions\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV2\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\t\tthis.holder = new Holder({ schema: asn1.result.holder });\n\t\t\n\t\tswitch(asn1.result.issuer.idBlock.tagClass)\n\t\t{\n\t\t\tcase 3: // V2Form\n\t\t\t\tthis.issuer = new V2Form({\n\t\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\t\tvalue: asn1.result.issuer.valueBlock.value\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 1: // GeneralNames (should not be used)\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Incorect value for 'issuer' in AttributeCertificateInfoV2\");\n\t\t}\n\t\t\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n\t\tthis.serialNumber = asn1.result.serialNumber;\n\t\tthis.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n\t\tthis.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n\t\t\n\t\tif(\"issuerUniqueID\" in asn1.result)\n\t\t\tthis.issuerUniqueID = asn1.result.issuerUniqueID;\n\t\t\n\t\tif(\"extensions\" in asn1.result)\n\t\t\tthis.extensions = new Extensions({ schema: asn1.result.extensions });\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ value: this.version }),\n\t\t\t\tthis.holder.toSchema(),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: this.issuer.toSchema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tthis.signature.toSchema(),\n\t\t\t\tthis.serialNumber,\n\t\t\t\tthis.attrCertValidityPeriod.toSchema(),\n\t\t\t\tnew asn1js.Sequence({\n\t\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\n\t\t\t\t})\n\t\t\t]\n\t\t});\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerUniqueID);\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.valueBlock.value.push(this.extensions.toSchema());\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tversion: this.version,\n\t\t\tholder: this.holder.toJSON(),\n\t\t\tissuer: this.issuer.toJSON(),\n\t\t\tsignature: this.signature.toJSON(),\n\t\t\tserialNumber: this.serialNumber.toJSON(),\n\t\t\tattrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),\n\t\t\tattributes: Array.from(this.attributes, element => element.toJSON())\n\t\t};\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.issuerUniqueID = this.issuerUniqueID.toJSON();\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.extensions = this.extensions.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport default class AttributeCertificateV2\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateV2 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {AttributeCertificateInfoV2}\n\t\t * @desc acinfo\n\t\t */\n\t\tthis.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV2.defaultValues(\"acinfo\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signatureAlgorithm\n\t\t */\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV2.defaultValues(\"signatureAlgorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc signatureValue\n\t\t */\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV2.defaultValues(\"signatureValue\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"acinfo\":\n\t\t\t\treturn new AttributeCertificateInfoV2();\n\t\t\tcase \"signatureAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"signatureValue\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateV2 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificate ::= SEQUENCE {\n\t *   acinfo               AttributeCertificateInfoV2,\n\t *   signatureAlgorithm   AlgorithmIdentifier,\n\t *   signatureValue       BIT STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {Object} [acinfo]\n\t\t * @property {Object} [signatureAlgorithm]\n\t\t * @property {string} [signatureValue]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tAttributeCertificateInfoV2.schema(names.acinfo || {}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"acinfo\",\n\t\t\t\"signatureAlgorithm\",\n\t\t\t\"signatureValue\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateV2.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tacinfo: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"acinfo\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureValue: \"signatureValue\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateV2\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.acinfo = new AttributeCertificateInfoV2({ schema: asn1.result.acinfo });\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n\t\tthis.signatureValue = asn1.result.signatureValue;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tthis.acinfo.toSchema(),\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\n\t\t\t\tthis.signatureValue\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tacinfo: this.acinfo.toJSON(),\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\n\t\t\tsignatureValue: this.signatureValue.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"],"file":"AttributeCertificateV2.js"}