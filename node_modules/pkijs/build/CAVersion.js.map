{"version":3,"sources":["../src/CAVersion.js"],"names":["CAVersion","constructor","parameters","certificateIndex","defaultValues","keyIndex","fromSchema","schema","memberName","Error","asn1js","Integer","blockName","value","valueBlock","valueHex","slice","valueView","Uint8Array","byteLength","tempValue","ArrayBuffer","tempValueView","set","keyIndexBuffer","keyIndexView8","temp","keyIndexView16","Uint16Array","certificateIndexBuffer","certificateIndexView8","certificateIndexView16","toSchema","certificateIndexView","keyIndexView","toJSON"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AACA;;AACA;AACA;AACA;AACe,MAAMA,SAAN,CACf;AACC;;AACA;AACD;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EACX;AACC;;AACA;AACF;AACA;AACA;AACE,SAAKC,gBAAL,GAAwB,iCAAmBD,UAAnB,EAA+B,kBAA/B,EAAmDF,SAAS,CAACI,aAAV,CAAwB,kBAAxB,CAAnD,CAAxB;AAEA;AACF;AACA;AACA;;AACE,SAAKC,QAAL,GAAgB,iCAAmBH,UAAnB,EAA+B,UAA/B,EAA2CF,SAAS,CAACI,aAAV,CAAwB,UAAxB,CAA3C,CAAhB,CAZD,CAaC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKI,UAAL,CAAgBJ,UAAU,CAACK,MAA3B,EAjBF,CAkBC;AACA,GA3BF,CA4BC;;AACA;AACD;AACA;AACA;;;AACqB,SAAbH,aAAa,CAACI,UAAD,EACpB;AACC,YAAOA,UAAP;AAEC,WAAK,kBAAL;AACA,WAAK,UAAL;AACC,eAAO,CAAP;;AACD;AACC,cAAM,IAAIC,KAAJ,CAAW,4CAA2CD,UAAW,EAAjE,CAAN;AANF;AAQA,GA3CF,CA4CC;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACc,SAAND,MAAM,CAACL,UAAU,GAAG,EAAd,EACb;AACC,WAAQ,IAAIQ,MAAM,CAACC,OAAX,EAAR;AACA,GA3DF,CA4DC;;AACA;AACD;AACA;AACA;;;AACCL,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACA,QAAGA,MAAM,CAACN,WAAP,CAAmBW,SAAnB,OAAmCF,MAAM,CAACC,OAAP,CAAeC,SAAf,EAAtC,EACC,MAAM,IAAIH,KAAJ,CAAU,mEAAV,CAAN,CAHF,CAIC;AAEA;;AACA,QAAII,KAAK,GAAGN,MAAM,CAACO,UAAP,CAAkBC,QAAlB,CAA2BC,KAA3B,CAAiC,CAAjC,CAAZ;AACA,UAAMC,SAAS,GAAG,IAAIC,UAAJ,CAAeL,KAAf,CAAlB;;AAEA,YAAO,IAAP;AAEC,WAAMA,KAAK,CAACM,UAAN,GAAmB,CAAzB;AACC;AACC,gBAAMC,SAAS,GAAG,IAAIC,WAAJ,CAAgB,CAAhB,CAAlB;AACA,gBAAMC,aAAa,GAAG,IAAIJ,UAAJ,CAAeE,SAAf,CAAtB;AAEAE,UAAAA,aAAa,CAACC,GAAd,CAAkBN,SAAlB,EAA6B,IAAIJ,KAAK,CAACM,UAAvC;AAEAN,UAAAA,KAAK,GAAGO,SAAS,CAACJ,KAAV,CAAgB,CAAhB,CAAR;AACA;AACD;;AACD,WAAMH,KAAK,CAACM,UAAN,GAAmB,CAAzB;AACC;AACC,gBAAMC,SAAS,GAAG,IAAIC,WAAJ,CAAgB,CAAhB,CAAlB;AACA,gBAAMC,aAAa,GAAG,IAAIJ,UAAJ,CAAeE,SAAf,CAAtB;AAEAE,UAAAA,aAAa,CAACC,GAAd,CAAkBN,SAAS,CAACD,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,CAAlB;AAEAH,UAAAA,KAAK,GAAGO,SAAS,CAACJ,KAAV,CAAgB,CAAhB,CAAR;AACA;AACD;;AACD;AAtBD,KAVD,CAkCC;AAEA;;;AACA,UAAMQ,cAAc,GAAGX,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAvB;AACA,UAAMS,aAAa,GAAG,IAAIP,UAAJ,CAAeM,cAAf,CAAtB;AACA,QAAIE,IAAI,GAAGD,aAAa,CAAC,CAAD,CAAxB;AACAA,IAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBA,aAAa,CAAC,CAAD,CAAhC;AACAA,IAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBC,IAAnB;AAEA,UAAMC,cAAc,GAAG,IAAIC,WAAJ,CAAgBJ,cAAhB,CAAvB;AAEA,SAAKnB,QAAL,GAAgBsB,cAAc,CAAC,CAAD,CAA9B;AAEA,UAAME,sBAAsB,GAAGhB,KAAK,CAACG,KAAN,CAAY,CAAZ,CAA/B;AACA,UAAMc,qBAAqB,GAAG,IAAIZ,UAAJ,CAAeW,sBAAf,CAA9B;AACAH,IAAAA,IAAI,GAAGI,qBAAqB,CAAC,CAAD,CAA5B;AACAA,IAAAA,qBAAqB,CAAC,CAAD,CAArB,GAA2BA,qBAAqB,CAAC,CAAD,CAAhD;AACAA,IAAAA,qBAAqB,CAAC,CAAD,CAArB,GAA2BJ,IAA3B;AAEA,UAAMK,sBAAsB,GAAG,IAAIH,WAAJ,CAAgBC,sBAAhB,CAA/B;AAEA,SAAK1B,gBAAL,GAAwB4B,sBAAsB,CAAC,CAAD,CAA9C,CAvDD,CAwDC;AACA,GA3HF,CA4HC;;AACA;AACD;AACA;AACA;;;AACCC,EAAAA,QAAQ,GACR;AACC;AACA,UAAMH,sBAAsB,GAAG,IAAIR,WAAJ,CAAgB,CAAhB,CAA/B;AACA,UAAMY,oBAAoB,GAAG,IAAIL,WAAJ,CAAgBC,sBAAhB,CAA7B;AAEAI,IAAAA,oBAAoB,CAAC,CAAD,CAApB,GAA0B,KAAK9B,gBAA/B;AAEA,UAAM2B,qBAAqB,GAAG,IAAIZ,UAAJ,CAAeW,sBAAf,CAA9B;AACA,QAAIH,IAAI,GAAGI,qBAAqB,CAAC,CAAD,CAAhC;AACAA,IAAAA,qBAAqB,CAAC,CAAD,CAArB,GAA2BA,qBAAqB,CAAC,CAAD,CAAhD;AACAA,IAAAA,qBAAqB,CAAC,CAAD,CAArB,GAA2BJ,IAA3B;AAEA,UAAMF,cAAc,GAAG,IAAIH,WAAJ,CAAgB,CAAhB,CAAvB;AACA,UAAMa,YAAY,GAAG,IAAIN,WAAJ,CAAgBJ,cAAhB,CAArB;AAEAU,IAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,KAAK7B,QAAvB;AAEA,UAAMoB,aAAa,GAAG,IAAIP,UAAJ,CAAeM,cAAf,CAAtB;AACAE,IAAAA,IAAI,GAAGD,aAAa,CAAC,CAAD,CAApB;AACAA,IAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBA,aAAa,CAAC,CAAD,CAAhC;AACAA,IAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBC,IAAnB,CApBD,CAqBC;AAEA;;AACA,WAAQ,IAAIhB,MAAM,CAACC,OAAX,CAAmB;AAC1BI,MAAAA,QAAQ,EAAE,4BAAcS,cAAd,EAA8BK,sBAA9B;AADgB,KAAnB,CAAR,CAxBD,CA2BC;AACA,GA9JF,CA+JC;;AACA;AACD;AACA;AACA;;;AACCM,EAAAA,MAAM,GACN;AACC,WAAO;AACNhC,MAAAA,gBAAgB,EAAE,KAAKA,gBADjB;AAENE,MAAAA,QAAQ,EAAE,KAAKA;AAFT,KAAP;AAIA,GA1KF,CA2KC;;;AA3KD,C,CA6KA","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, utilConcatBuf } from \"pvutils\";\n//**************************************************************************************\n/**\n * Class from https://docs.microsoft.com/en-us/windows/desktop/seccrypto/certification-authority-renewal\n */\nexport default class CAVersion\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for CAVersion class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc certificateIndex\n\t\t */\n\t\tthis.certificateIndex = getParametersValue(parameters, \"certificateIndex\", CAVersion.defaultValues(\"certificateIndex\"));\n\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc keyIndex\n\t\t */\n\t\tthis.keyIndex = getParametersValue(parameters, \"keyIndex\", CAVersion.defaultValues(\"keyIndex\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"certificateIndex\":\n\t\t\tcase \"keyIndex\":\n\t\t\t\treturn 0;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for CAVersion class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * CAVersion ::= INTEGER\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\treturn (new asn1js.Integer());\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Check the schema is valid\n\t\tif(schema.constructor.blockName() !== asn1js.Integer.blockName())\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CAVersion\");\n\t\t//endregion\n\n\t\t//region Check length of the input value and correct it if needed\n\t\tlet value = schema.valueBlock.valueHex.slice(0);\n\t\tconst valueView = new Uint8Array(value);\n\n\t\tswitch(true)\n\t\t{\n\t\t\tcase (value.byteLength < 4):\n\t\t\t\t{\n\t\t\t\t\tconst tempValue = new ArrayBuffer(4);\n\t\t\t\t\tconst tempValueView = new Uint8Array(tempValue);\n\n\t\t\t\t\ttempValueView.set(valueView, 4 - value.byteLength);\n\n\t\t\t\t\tvalue = tempValue.slice(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase (value.byteLength > 4):\n\t\t\t\t{\n\t\t\t\t\tconst tempValue = new ArrayBuffer(4);\n\t\t\t\t\tconst tempValueView = new Uint8Array(tempValue);\n\n\t\t\t\t\ttempValueView.set(valueView.slice(0, 4));\n\n\t\t\t\t\tvalue = tempValue.slice(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tconst keyIndexBuffer = value.slice(0, 2);\n\t\tconst keyIndexView8 = new Uint8Array(keyIndexBuffer);\n\t\tlet temp = keyIndexView8[0];\n\t\tkeyIndexView8[0] = keyIndexView8[1];\n\t\tkeyIndexView8[1] = temp;\n\n\t\tconst keyIndexView16 = new Uint16Array(keyIndexBuffer);\n\n\t\tthis.keyIndex = keyIndexView16[0];\n\n\t\tconst certificateIndexBuffer = value.slice(2);\n\t\tconst certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\n\t\ttemp = certificateIndexView8[0];\n\t\tcertificateIndexView8[0] = certificateIndexView8[1];\n\t\tcertificateIndexView8[1] = temp;\n\n\t\tconst certificateIndexView16 = new Uint16Array(certificateIndexBuffer);\n\n\t\tthis.certificateIndex = certificateIndexView16[0];\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create raw values\n\t\tconst certificateIndexBuffer = new ArrayBuffer(2);\n\t\tconst certificateIndexView = new Uint16Array(certificateIndexBuffer);\n\n\t\tcertificateIndexView[0] = this.certificateIndex;\n\n\t\tconst certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\n\t\tlet temp = certificateIndexView8[0];\n\t\tcertificateIndexView8[0] = certificateIndexView8[1];\n\t\tcertificateIndexView8[1] = temp;\n\n\t\tconst keyIndexBuffer = new ArrayBuffer(2);\n\t\tconst keyIndexView = new Uint16Array(keyIndexBuffer);\n\n\t\tkeyIndexView[0] = this.keyIndex;\n\n\t\tconst keyIndexView8 = new Uint8Array(keyIndexBuffer);\n\t\ttemp = keyIndexView8[0];\n\t\tkeyIndexView8[0] = keyIndexView8[1];\n\t\tkeyIndexView8[1] = temp;\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Integer({\n\t\t\tvalueHex: utilConcatBuf(keyIndexBuffer, certificateIndexBuffer)\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tcertificateIndex: this.certificateIndex,\n\t\t\tkeyIndex: this.keyIndex\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"],"file":"CAVersion.js"}