{"version":3,"sources":["../src/KeyTransRecipientInfo.js"],"names":["KeyTransRecipientInfo","constructor","parameters","version","defaultValues","rid","keyEncryptionAlgorithm","encryptedKey","recipientCertificate","fromSchema","schema","memberName","AlgorithmIdentifier","asn1js","OctetString","Certificate","Error","compareWithDefault","memberValue","Object","keys","length","isEqual","names","Sequence","name","blockName","value","Integer","RecipientIdentifier","asn1","compareSchema","verified","result","valueBlock","valueDec","idBlock","tagClass","valueHex","IssuerAndSerialNumber","toSchema","outputArray","push","Primitive","tagNumber","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Certificate from \"./Certificate.js\";\nimport RecipientIdentifier from \"./RecipientIdentifier.js\";\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\n//**************************************************************************************\n/**\n * Class from RFC5652\n */\nexport default class KeyTransRecipientInfo\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for KeyTransRecipientInfo class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", KeyTransRecipientInfo.defaultValues(\"version\"));\n\t\t/**\n\t\t * @type {RecipientIdentifier}\n\t\t * @desc rid\n\t\t */\n\t\tthis.rid = getParametersValue(parameters, \"rid\", KeyTransRecipientInfo.defaultValues(\"rid\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc keyEncryptionAlgorithm\n\t\t */\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KeyTransRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\n\t\t/**\n\t\t * @type {OctetString}\n\t\t * @desc encryptedKey\n\t\t */\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KeyTransRecipientInfo.defaultValues(\"encryptedKey\"));\n\t\t/**\n\t\t * @type {Certificate}\n\t\t * @desc recipientCertificate For some reasons we need to store recipient's certificate here\n\t\t */\n\t\tthis.recipientCertificate = getParametersValue(parameters, \"recipientCertificate\", KeyTransRecipientInfo.defaultValues(\"recipientCertificate\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn (-1);\n\t\t\tcase \"rid\":\n\t\t\t\treturn {};\n\t\t\tcase \"keyEncryptionAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"encryptedKey\":\n\t\t\t\treturn new asn1js.OctetString();\n\t\t\tcase \"recipientCertificate\":\n\t\t\t\treturn new Certificate();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for KeyTransRecipientInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn (memberValue === KeyTransRecipientInfo.defaultValues(\"version\"));\n\t\t\tcase \"rid\":\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\n\t\t\tcase \"keyEncryptionAlgorithm\":\n\t\t\tcase \"encryptedKey\":\n\t\t\t\treturn memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));\n\t\t\tcase \"recipientCertificate\":\n\t\t\t\treturn false; // For now we do not need to compare any values with the \"recipientCertificate\"\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for KeyTransRecipientInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * KeyTransRecipientInfo ::= SEQUENCE {\n\t *    version CMSVersion,  -- always set to 0 or 2\n\t *    rid RecipientIdentifier,\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n\t *    encryptedKey EncryptedKey }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [version]\n\t\t * @property {string} [rid]\n\t\t * @property {string} [keyEncryptionAlgorithm]\n\t\t * @property {string} [encryptedKey]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\n\t\t\t\tRecipientIdentifier.schema(names.rid || {}),\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"version\",\n\t\t\t\"rid\",\n\t\t\t\"keyEncryptionAlgorithm\",\n\t\t\t\"encryptedKey\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tKeyTransRecipientInfo.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tversion: \"version\",\n\t\t\t\t\trid: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"rid\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tkeyEncryptionAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KeyTransRecipientInfo\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\n\t\tif(asn1.result.rid.idBlock.tagClass === 3)\n\t\t\tthis.rid = new asn1js.OctetString({ valueHex: asn1.result.rid.valueBlock.valueHex }); // SubjectKeyIdentifier\n\t\telse\n\t\t\tthis.rid = new IssuerAndSerialNumber({ schema: asn1.result.rid });\n\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create array for output sequence \n\t\tconst outputArray = [];\n\t\t\n\t\tif(this.rid instanceof IssuerAndSerialNumber)\n\t\t{\n\t\t\tthis.version = 0;\n\t\t\t\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\n\t\t\toutputArray.push(this.rid.toSchema());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.version = 2;\n\t\t\t\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalueHex: this.rid.valueBlock.valueHex\n\t\t\t}));\n\t\t}\n\t\t\n\t\toutputArray.push(this.keyEncryptionAlgorithm.toSchema());\n\t\toutputArray.push(this.encryptedKey);\n\t\t//endregion \n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object \n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t}));\n\t\t//endregion \n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tversion: this.version,\n\t\t\trid: this.rid.toJSON(),\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"],"file":"KeyTransRecipientInfo.js"}