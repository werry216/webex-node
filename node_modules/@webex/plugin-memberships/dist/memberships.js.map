{"version":3,"sources":["memberships.js"],"names":["debug","require","Memberships","WebexPlugin","extend","listen","webex","SDK_EVENT","EXTERNAL","RESOURCE","MEMBERSHIPS","then","envelope","eventEnvelope","internal","mercury","connect","listenTo","INTERNAL","WEBEX_ACTIVITY","event","onWebexApiEvent","create","membership","request","method","service","resource","body","res","get","id","items","list","options","qs","Page","listWithReadStatus","deconstructedId","roomId","conversation","cluster","services","waitForCatalog","participantAckFilter","activitiesLimit","resp","roomUUID","particpants","participants","lastReadInfo","roomType","tags","myId","me","isRoomHidden","includes","ACTIVITY_TAG","HIDDEN","i","length","participant","participantInfo","entryUUID","personId","personEmail","entryEmailAddress","entryEmail","personDisplayName","displayName","personOrgId","orgId","isMonitor","roomProperties","lastSeenId","lastSeenActivityUUID","lastSeenDate","lastSeenActivityDate","isModerator","push","resolve","e","reject","remove","statusCode","undefined","update","updateLastSeen","message","activity","acknowledge","ack","object","actor","target","emailAddress","created","published","data","verb","ACTIVITY_VERB","CREATE","membershipCreatedEventDataArray","map","output","getMembershipEvent","EVENT_TYPE","CREATED","forEach","trigger","ADD","membershipCreatedEventData","LEAVE","membershipDeletedEventData","DELETED","ADD_MODERATOR","REMOVE_MODERATOR","HIDE","membershipUpdatedEventData","UPDATED","ACKNOWLEDGE","membershipSeenEventData","SEEN","sdkEvent","url","member","space","actorId","SPACE_TYPE","DIRECT","ACTIVITY_FIELD","ACTOR","TARGET","OBJECT","logger","error"],"mappings":";;;;;;;;;;;;;;;;;;AAIA;;AAaA;;AAjBA;AACA;AACA;AAkBA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,aAAjB,CAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,WAAW,GAAGC,uBAAYC,MAAZ,CAAmB;AACrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEEC,EAAAA,MA7CqC,oBA6C5B;AAAA;;AACP;AACA,WAAO,iCAAoB,KAAKC,KAAzB,EACLC,kBAAUC,QAAV,CAAmBC,QAAnB,CAA4BC,WADvB,EAEJC,IAFI,CAEC,UAACC,QAAD,EAAc;AAClB,MAAA,KAAI,CAACC,aAAL,GAAqBD,QAArB,CADkB,CAGlB;;AACA,aAAO,KAAI,CAACN,KAAL,CAAWQ,QAAX,CAAoBC,OAApB,CAA4BC,OAA5B,GAAsCL,IAAtC,CAA2C,YAAM;AACtD,QAAA,KAAI,CAACM,QAAL,CAAc,KAAI,CAACX,KAAL,CAAWQ,QAAX,CAAoBC,OAAlC,EACER,kBAAUW,QAAV,CAAmBC,cADrB,EAEE,UAACC,KAAD;AAAA,iBAAW,KAAI,CAACC,eAAL,CAAqBD,KAArB,CAAX;AAAA,SAFF;AAGD,OAJM,CAAP;AAKD,KAXI,CAAP;AAYD,GA3DoC;;AA6DrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,MA1FqC,kBA0F9BC,UA1F8B,EA0FlB;AACjB,WAAO,KAAKC,OAAL,CAAa;AAClBC,MAAAA,MAAM,EAAE,MADU;A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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,MAzTqC,kBAyT9B5D,UAzT8B,EAyTlB;AACjB,QAAMQ,EAAE,GAAGR,UAAU,CAACQ,EAAX,IAAiBR,UAA5B;AAEA,WAAO,KAAKC,OAAL,CAAa;AAClBC,MAAAA,MAAM,EAAE,QADU;AAElBC,MAAAA,OAAO,EAAE,OAFS;AAGlBC,MAAAA,QAAQ,wBAAiBI,EAAjB;AAHU,KAAb,EAKJpB,IALI,CAKC,UAACkB,GAAD,EAAS;AACb;AACA;AACA,UAAIA,GAAG,CAACuD,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,eAAOC,SAAP;AACD;;AAED,aAAOxD,GAAG,CAACD,IAAX;AACD,KAbI,CAAP;AAcD,GA1UoC;;AA4UrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE0D,EAAAA,MA1YqC,kBA0Y9B/D,UA1Y8B,EA0YlB;AACjB,QAAMQ,EAAE,GAAGR,UAAU,CAACQ,EAAX,IAAiBR,UAA5B;AAEA,WAAO,KAAKC,OAAL,CAAa;AAClBC,MAAAA,MAAM,EAAE,KADU;AAElBC,MAAAA,OAAO,EAAE,OAFS;AAGlBC,MAAAA,QAAQ,wBAAiBI,EAAjB,CAHU;AAIlBH,MAAAA,IAAI,EAAEL;AAJY,KAAb,EAMJZ,IANI,CAMC,UAACkB,GAAD;AAAA,aAASA,GAAG,CAACD,IAAb;AAAA,KAND,CAAP;AAOD,GApZoC;;AAsZrC;AACF;AACA;AACA;AAC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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  SDK_EVENT,\n  createEventEnvelope,\n  ensureMyIdIsAvailable,\n  buildHydraMembershipId,\n  buildHydraMessageId,\n  buildHydraOrgId,\n  buildHydraPersonId,\n  buildHydraRoomId,\n  getHydraClusterString,\n  getHydraRoomType,\n  deconstructHydraId\n} from '@webex/common';\nimport {WebexPlugin, Page} from '@webex/webex-core';\nimport {cloneDeep} from 'lodash';\n\nconst debug = require('debug')('memberships');\n\n/**\n * @typedef {Object} MembershipObject\n * @property {string} id - Unique identifier for the membership\n * @property {string} roomId - The room ID\n * @property {string} personId - The person ID\n * @property {email} personEmail - The email address of the person / room member\n * @property {boolean} isModerator - Indicates whether the specified person should be a room moderator\n * @property {boolean} isMonitor - Indicates whether the specified member is a room monitor\n * @property {isoDate} created - The date and time that this membership was created\n */\n\n/**\n * Memberships represent a person's relationship to a room. Use this API to list\n * members of any room that you're in or create memberships to invite someone\n * to a room. Memberships can also be updated to make someone a moderator\n * or deleted to remove them from the room.\n * @class\n * @name Memberships\n */\nconst Memberships = WebexPlugin.extend({\n  /**\n   * Register to listen for incoming membership events\n   * This is an alternate approach to registering for membership webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Memberships\n   * @returns {Promise}\n   * @example\n   * webex.memberships.listen()\n   *   .then(() => {\n   *     console.log('listening to membership events');\n   *     webex.memberships.on('created', (event) => {\n   *       console.log(`Got a membership:created event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('updated', (event) => {\n   *        console.log(`Got a membership:updated event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('seen', (event) => {\n   *       // This represents a \"read receipt\" and will include a\n   *       // lastSeenId for the message this member has just \"read\",\n   *       // There is currently no equivelent webhook for this event.\n   *       console.log(`Got a membership:seen event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('deleted', (event) =>  => {\n   *       console.log(`Got a membership:created event:\\n${event}`);\n   *     }\n   *   })\n   *   .catch((e) => console.error(`Unable to register for membership events: ${e}`));\n   * // App logic goes here...\n   * // Later when it is time to clean up\n   * webex.memberships.stopListening();\n   * webex.memberships.off('created');\n   * webex.memberships.off('updated');\n   * webex.memberships.off('seen');\n   * webex.memberships.off('deleted');\n\n   */\n  listen() {\n    // Create a common envelope that we will wrap all events in\n    return createEventEnvelope(this.webex,\n      SDK_EVENT.EXTERNAL.RESOURCE.MEMBERSHIPS)\n      .then((envelope) => {\n        this.eventEnvelope = envelope;\n\n        // Register to listen to events\n        return this.webex.internal.mercury.connect().then(() => {\n          this.listenTo(this.webex.internal.mercury,\n            SDK_EVENT.INTERNAL.WEBEX_ACTIVITY,\n            (event) => this.onWebexApiEvent(event));\n        });\n      });\n  },\n\n  /**\n   * Adds a person to a room. The person can be added by ID (`personId`) or by\n   * Email Address (`personEmail`). The person can be optionally added to the room\n   * as a moderator.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Membership Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *    });\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert(membership.id);\n   *     assert(membership.roomId);\n   *     assert(membership.personId);\n   *     assert(membership.personEmail);\n   *     assert('isModerator' in membership);\n   *     assert('isMonitor' in membership);\n   *     assert(membership.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(membership) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'memberships',\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * var membership;\n   * webex.rooms.create({title: 'Get Membership Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.memberships.get(m.id);\n   *   })\n   *   .then(function(m) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(m, membership);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      service: 'hydra',\n      resource: `memberships/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of memberships. In most cases the results will only contain\n   * rooms that the authentiated user is a member of. You can filter the results\n   * by room to list people in a room or by person to find rooms that a\n   * specific person is a member of.\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.personId\n   * @param {string} options.personEmail\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MembershipObject>>}\n   * @example\n   * var room;\n   * webex.rooms.create({title: 'List Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     for (var i = 0; i < memberships.length; i+= 1) {\n   *       assert.equal(memberships.items[i].roomId, room.id);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'memberships',\n      qs: options\n    })\n      .then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Returns a list of memberships with details about the lastSeenId for each\n   * user, allowing a client to indicate \"read status\" in a space GUI\n   *\n   * This differs from the memberships.list() function in the following ways:\n   *  -- it accepts only a room or object with a valid roomId\n   *  -- no other options, eg: max, are considered\n   *  -- results are not paginated\n   *  -- memberships in the return do not include the\n   *     \"created\", \"isRoomHidden\", fields\n   *  -- memberships in the return do include the new\n   *    \"lastSeenId\", and \"lastSeenDate\" fields\n   *     these will not exist if the member has never \"seen\" the space\n   *\n   * In general this function should be used only when the\n   * client needs to access read status info.\n   *\n   * This function may be deprecated when this info is provided in the membership\n   * objects returned in the list function.\n   *\n   *\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @returns {Promise<MembershipObjectList>}\n   */\n  listWithReadStatus(options) {\n    const deconstructedId = deconstructHydraId(options.roomId);\n    const conversation = {\n      id: deconstructedId.id,\n      cluster: deconstructedId.cluster\n    };\n\n    return ensureMyIdIsAvailable(this.webex)\n      .then(() => this.webex.internal.services.waitForCatalog('postauth')\n        .then(() => this.webex.internal.conversation.get(conversation,\n          {\n            participantAckFilter: 'all', // show lastAck info for each participant\n            activitiesLimit: 0 // don't send the whole history of activity\n          })\n          .then((resp) => {\n            try {\n              // We keep track of the last read message by each user\n              const roomUUID = resp.id;\n              const roomId = buildHydraRoomId(roomUUID, conversation.cluster);\n              const particpants = resp.participants.items;\n              const lastReadInfo = {items: []};\n              const roomType = getHydraRoomType(resp.tags);\n              const myId = this.webex.internal.me.id;\n              const isRoomHidden = resp.tags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.HIDDEN);\n\n              for (let i = 0; i < particpants.length; i += 1) {\n                const participant = particpants[i];\n                const participantInfo = {\n                  id: buildHydraMembershipId(participant.entryUUID, roomUUID,\n                    conversation.cluster),\n                  roomId,\n                  personId: buildHydraPersonId(participant.entryUUID),\n                  personEmail: participant.entryEmailAddress ||\n                    participant.entryEmail,\n                  personDisplayName: participant.displayName,\n                  personOrgId: buildHydraOrgId(participant.orgId,\n                    conversation.cluster),\n                  isMonitor: false, // deprecated, but included for completeness\n                  roomType\n                  // created is not available in the conversations payload\n                };\n\n                if ((isRoomHidden) && (participantInfo.personId === myId)) {\n                  participantInfo.isRoomHidden = isRoomHidden;\n                }\n\n                if ('roomProperties' in participant) {\n                  if ('lastSeenActivityDate' in participant.roomProperties) {\n                    participantInfo.lastSeenId =\n                      buildHydraMessageId(participant.roomProperties.lastSeenActivityUUID,\n                        conversation.cluster);\n                    participantInfo.lastSeenDate =\n                      participant.roomProperties.lastSeenActivityDate;\n                  }\n                  if ('isModerator' in participant.roomProperties) {\n                    participantInfo.isModerator = participant.roomProperties.isModerator;\n                  }\n                }\n\n                lastReadInfo.items.push(participantInfo);\n              }\n\n              return Promise.resolve(lastReadInfo);\n            }\n            catch (e) {\n              return Promise.reject(e);\n            }\n          })));\n  },\n\n  /**\n   * Deletes a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise}\n   * @example\n   * var membership, room;\n   * webex.rooms.create({title: 'Remove Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     return webex.memberships.remove(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `memberships/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n\n        return res.body;\n      });\n  },\n\n  /**\n   * Used to update a single membership's properties\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * // Change membership to make user a moderator\n   * var membership, room;\n   * webex.rooms.create({title: 'Memberships Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     membership = memberships.items[0];\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, false);\n   *     membership.isModerator = true;\n   *     return webex.memberships.update(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.get(membership.id);\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, true);\n   *     return 'success';\n   *   });\n   *   // => success\n   * @example\n   * // Hide a one on one space\n   * var assert = require('assert');\n   * var membership, myId;\n   * webex.people.get('me')\n   *   .then(function(person) {\n   *     myId = personId;\n   *     return webex.messages.create({\n   *       toPersonEmail: 'otherUser@acme.com',\n   *       text: 'This message will create a 1-1 space'\n   *     });\n   *   })\n   *   then(function(message) {\n   *     return webex.memberships.list({\n   *       roomId: message.roomId,\n   *       personId: myId\n   *     });\n   *   })\n   *   .then((memberships) => {\n   *     membership = memberships.items[0];\n   *     assert.equal(membership.isRoomHidden, false);\n   *     membership.isRoomHidden = true;\n   *     // This will generate a memberships:updated event\n   *     // that will only be seen by this user\n   *     return webex.memberships.update(membership);\n   *   })\n   *   .then(function(membership) {\n   *     assert.equal(membership.isRoomHidden, true);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: `memberships/${id}`,\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Updates the lastSeenId attribute of a membership.\n   * Call this method to send a \"read receipt\" for a given message.\n   * This will update the lastSeenId for the user's membership in\n   * space where the message is.\n   * @instance\n   * @memberof Memberships\n   * @param {string} message\n   * @returns {Promise<MembershipObject>}\n   */\n  updateLastSeen(message) {\n    const activity = {\n      id: deconstructHydraId(message.id).id\n    };\n    const deconstructedId = deconstructHydraId(message.roomId);\n    const conversation = {\n      id: deconstructedId.id,\n      cluster: deconstructedId.cluster\n    };\n\n    return this.webex.internal.services.waitForCatalog('postauth')\n      .then(() => this.webex.internal.conversation.acknowledge(conversation, activity)\n        .then((ack) => ({\n          lastSeenId: buildHydraMessageId(ack.object.id, conversation.cluster),\n          id: buildHydraMembershipId(ack.actor.entryUUID,\n            ack.target.id, conversation.cluster),\n          personId: buildHydraPersonId(ack.actor.entryUUID, conversation.cluster),\n          personEmail: ack.actor.emailAddress || ack.actor.entryEmail,\n          personDisplayName: ack.actor.displayName,\n          personOrgId: buildHydraOrgId(ack.actor.orgId, conversation.cluster),\n          roomId: buildHydraRoomId(ack.target.id, conversation.cluster),\n          roomType: getHydraRoomType(ack.target.tags),\n          isRoomHidden: false, // any activity unhides a space.\n          isMonitor: false, // deprecated, returned for back compat\n          created: ack.published\n        })));\n  },\n\n  /**\n   * This function is called when an internal membership events fires,\n   * if the user registered for these events with the public listen() method.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Memberships\n   * @param {Object} event\n   * @returns {void}\n   */\n  onWebexApiEvent(event) {\n    const {activity} = event.data;\n\n    /* eslint-disable no-case-declarations */\n    switch (activity.verb) {\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.CREATE:\n        const membershipCreatedEventDataArray =\n          activity.object.participants.items.map((participant) => {\n            const output = cloneDeep(activity);\n\n            output.target = cloneDeep(activity.object);\n            output.object = cloneDeep(participant);\n\n            return this.getMembershipEvent(output,\n              SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n          });\n\n        membershipCreatedEventDataArray.forEach((data) => {\n          if (data) {\n            debug(`membership \"created\" payload: ${JSON.stringify(data)}`);\n            this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, data);\n          }\n        });\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD:\n        const membershipCreatedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (membershipCreatedEventData) {\n          debug(`membership \"created\" payload: \\\n            ${JSON.stringify(membershipCreatedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, membershipCreatedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.LEAVE:\n        const membershipDeletedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED);\n\n        if (membershipDeletedEventData) {\n          debug(`membership \"deleted\" payload: \\\n            ${JSON.stringify(membershipDeletedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED, membershipDeletedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD_MODERATOR:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.REMOVE_MODERATOR:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE:\n        const membershipUpdatedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED);\n\n        if (membershipUpdatedEventData) {\n          debug(`membership \"updated\" payload: \\\n            ${JSON.stringify(membershipUpdatedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED, membershipUpdatedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE:\n        const membershipSeenEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN);\n\n        if (membershipSeenEventData) {\n          debug(`membership \"updated\" payload: \\\n            ${JSON.stringify(membershipSeenEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN, membershipSeenEventData);\n        }\n        break;\n\n      default:\n        break;\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the memberships resource,\n   * adhering to Hydra's Webehook data structure memberships.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Memberships\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getMembershipEvent(activity, event) {\n    try {\n      const sdkEvent = cloneDeep(this.eventEnvelope);\n      const cluster = (activity.verb !== SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) ?\n        getHydraClusterString(this.webex, activity.target.url) :\n        getHydraClusterString(this.webex, activity.url);\n      let member;\n      let space;\n\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = buildHydraPersonId(activity.actor.entryUUID, cluster);\n      if (activity.verb !== SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        sdkEvent.data.roomId = buildHydraRoomId(activity.target.id, cluster);\n        sdkEvent.data.roomType = getHydraRoomType(activity.target.tags);\n        sdkEvent.data.isRoomHidden = false; // any activity unhides a space.\n      }\n      else {\n        sdkEvent.data.roomId = buildHydraRoomId(activity.object.id, cluster);\n        sdkEvent.data.roomType = SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT;\n        // currently hidden attribute is only set on 1-1\n        sdkEvent.data.isRoomHidden = true;\n      }\n      if (activity.verb !== SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        if ((activity.object.roomProperties) && (activity.object.roomProperties.isModerator)) {\n          sdkEvent.data.isModerator = true;\n        }\n        else {\n          sdkEvent.data.isModerator = false;\n        }\n      }\n      // This is deprecated but still sent in the webhooks\n      // We won't send it for our new SDK events\n      // sdkEvent.data.isMonitor = false;\n\n      if (activity.verb === SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        // For a read receipt the person is the \"actor\" or the one who did the reading\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR;\n        // The space with the read message is the \"target\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET;\n        // And the \"object\" is the message that was last seen\n        sdkEvent.data.lastSeenId = buildHydraMessageId(activity.object.id, cluster);\n      }\n      else if (activity.verb === SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        // For a hide activity the person is also the \"actor\"\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR;\n        // But the space is now the \"object\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT;\n      }\n      else {\n        // For most memberships events the person is the 'object\"\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT;\n        // and the space is the \"target\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET;\n      }\n\n      sdkEvent.data.id = buildHydraMembershipId(activity[member].entryUUID,\n        activity[space].id, cluster);\n      sdkEvent.data.personId = buildHydraPersonId(activity[member].entryUUID, cluster);\n      sdkEvent.data.personEmail =\n        activity[member].emailAddress || activity[member].entryEmail;\n      sdkEvent.data.personDisplayName = activity[member].displayName;\n      sdkEvent.data.personOrgId = buildHydraOrgId(activity[member].orgId, cluster);\n\n      return sdkEvent;\n    }\n    catch (e) {\n      this.webex.logger.error(`Unable to generate SDK event from mercury \\\n'socket activity for memberships:${event} event: ${e.message}`);\n\n      return null;\n    }\n  }\n\n});\n\nexport default Memberships;\n"]}