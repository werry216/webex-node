{"version":3,"sources":["capped-debounce.js"],"names":["debounce","fn","wait","options","Error","maxWait","maxCalls","count","maxWaitTimer","waitTimer","wrapper","clearTimeout","setTimeout","exec"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,QAAT,CAAkBC,EAAlB,EAAsBC,IAAtB,EAA4BC,OAA5B,EAAqC;AAClD;AAEA,MAAI,CAACF,EAAL,EAAS;AACP,UAAM,IAAIG,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,MAAI,CAACF,IAAL,EAAW;AACT,UAAM,IAAIE,KAAJ,CAAU,oBAAV,CAAN;AACD;;AAEDD,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AACA,MAAI,CAACA,OAAO,CAACE,OAAb,EAAsB;AACpB,UAAM,IAAID,KAAJ,CAAU,+BAAV,CAAN;AACD;;AACD,MAAI,CAACD,OAAO,CAACG,QAAb,EAAuB;AACrB,UAAM,IAAIF,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAjBiD,iBAmBtBD,OAnBsB;AAAA,MAmB3CG,QAnB2C,YAmB3CA,QAnB2C;AAAA,MAmBjCD,OAnBiC,YAmBjCA,OAnBiC;AAoBlD,MAAIE,KAAK,GAAG,CAAZ;AACA,MAAIC,YAAJ,EAAkBC,SAAlB;AAEA,SAAO,SAASC,OAAT,GAAmB;AACxBH,IAAAA,KAAK,IAAI,CAAT;AAEAI,IAAAA,YAAY,CAACF,SAAD,CAAZ;AACAA,IAAAA,SAAS,GAAGG,UAAU,CAAC;AAAA,aAAMC,IAAI,EAAV;AAAA,KAAD,EAAeX,IAAf,CAAtB;;AAEA,QAAI,CAACM,YAAL,EAAmB;AACjBA,MAAAA,YAAY,GAAGI,UAAU,CAAC;AAAA,eAAMC,IAAI,EAAV;AAAA,OAAD,EAAeR,OAAf,CAAzB;AACD;;AAED,QAAIE,KAAK,IAAID,QAAb,EAAuB;AACrB,0BAAcO,IAAd,EAAoB,IAApB,EAA0B,EAA1B;AACD;AACF,GAbD;AAeA;AACF;AACA;AACA;;AACE,WAASA,IAAT,GAAgB;AACdF,IAAAA,YAAY,CAACF,SAAD,CAAZ;AACAA,IAAAA,SAAS,GAAG,IAAZ;AACAE,IAAAA,YAAY,CAACH,YAAD,CAAZ;AACAA,IAAAA,YAAY,GAAG,IAAf;AACAD,IAAAA,KAAK,GAAG,CAAR;AAEA,wBAAcN,EAAd,EAAkB,IAAlB,EAAwB,EAAxB;AACD;AACF","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * Behaves like debounce, but additionally executes after a number of calls are\n * attempted, rather than just time\n * @param {Function} fn\n * @param {Number} wait\n * @param {Object} options\n * @returns {Function}\n */\nexport default function debounce(fn, wait, options) {\n  /* eslint no-invalid-this: [0] */\n\n  if (!fn) {\n    throw new Error('`fn` must be a function');\n  }\n\n  if (!wait) {\n    throw new Error('`wait` is required');\n  }\n\n  options = options || {};\n  if (!options.maxWait) {\n    throw new Error('`options.maxWait` is required');\n  }\n  if (!options.maxCalls) {\n    throw new Error('`options.maxCalls` is required');\n  }\n\n  const {maxCalls, maxWait} = options;\n  let count = 0;\n  let maxWaitTimer, waitTimer;\n\n  return function wrapper() {\n    count += 1;\n\n    clearTimeout(waitTimer);\n    waitTimer = setTimeout(() => exec(), wait);\n\n    if (!maxWaitTimer) {\n      maxWaitTimer = setTimeout(() => exec(), maxWait);\n    }\n\n    if (count >= maxCalls) {\n      Reflect.apply(exec, this, []);\n    }\n  };\n\n  /**\n   * @private\n   * @returns {undefined}\n   */\n  function exec() {\n    clearTimeout(waitTimer);\n    waitTimer = null;\n    clearTimeout(maxWaitTimer);\n    maxWaitTimer = null;\n    count = 0;\n\n    Reflect.apply(fn, this, []);\n  }\n}\n"]}