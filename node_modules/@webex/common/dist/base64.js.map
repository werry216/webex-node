{"version":3,"sources":["base64.js"],"names":["fromBase64url","str","UrlSafeBase64","decode","toString","toBase64Url","buffer","Buffer","from","encode","validate"],"mappings":";;;;;;;;;;;;;;;;;AAIA;;AACA;;AAEA;;AAPA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACO,SAASA,aAAT,CAAuBC,GAAvB,EAA4B;AACjC,SAAOC,qBAAcC,MAAd,CAAqBF,GAArB,EAA0BG,QAA1B,EAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASC,WAAT,CAAqBJ,GAArB,EAA0B;AAC/B,MAAIK,MAAM,GAAGL,GAAb;;AAEA,MAAI,CAAC,uBAASK,MAAT,CAAL,EAAuB;AACrBA,IAAAA,MAAM,GAAGC,mBAAOC,IAAP,CAAYF,MAAZ,CAAT;AACD;;AAED,SAAOJ,qBAAcO,MAAd,CAAqBH,MAArB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASG,MAAT,CAAgBR,GAAhB,EAAqB;AAC1B,SAAOI,WAAW,CAACJ,GAAD,CAAlB;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASE,MAAT,CAAgBF,GAAhB,EAAqB;AAC1B,SAAOD,aAAa,CAACC,GAAD,CAApB;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASS,QAAT,CAAkBT,GAAlB,EAAuB;AAC5B,SAAOC,qBAAcQ,QAAd,CAAuBT,GAAvB,CAAP;AACD;;eAEc;AACbD,EAAAA,aAAa,EAAbA,aADa;AAEbK,EAAAA,WAAW,EAAXA,WAFa;AAGbI,EAAAA,MAAM,EAANA,MAHa;AAIbN,EAAAA,MAAM,EAANA,MAJa;AAKbO,EAAAA,QAAQ,EAARA;AALa,C","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport UrlSafeBase64 from 'urlsafe-base64';\nimport {Buffer} from 'safe-buffer';\n\nimport isBuffer from './isBuffer';\n\n/**\n * Converts a string from a base64url-encoded string\n * @param {string} str\n * @returns {string}\n */\nexport function fromBase64url(str) {\n  return UrlSafeBase64.decode(str).toString();\n}\n\n/**\n * Converts a string to a base64url-encoded string. It also accepts a buffer\n * @param {string|buffer} str\n * @returns {string}\n */\nexport function toBase64Url(str) {\n  let buffer = str;\n\n  if (!isBuffer(buffer)) {\n    buffer = Buffer.from(buffer);\n  }\n\n  return UrlSafeBase64.encode(buffer);\n}\n\n/**\n * Converts a string to a base64url-encoded string. It also accepts a buffer\n * @param {string|buffer} str\n * @returns {string}\n */\nexport function encode(str) {\n  return toBase64Url(str);\n}\n\n/**\n * Converts a string from a base64url-encoded string\n * @param {string} str\n * @returns {string}\n */\nexport function decode(str) {\n  return fromBase64url(str);\n}\n\n/**\n * Indicates if the provided string is, in fact, a base64 string\n * @param {String} str\n * @returns {Boolean}\n */\nexport function validate(str) {\n  return UrlSafeBase64.validate(str);\n}\n\nexport default {\n  fromBase64url,\n  toBase64Url,\n  encode,\n  decode,\n  validate\n};\n"]}