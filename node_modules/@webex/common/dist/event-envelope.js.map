{"version":3,"sources":["event-envelope.js"],"names":["createEventEnvelope","webex","resource","ensureMyIdIsAvailable","then","resolve","createdBy","internal","me","id","orgId","ownedBy","SDK_EVENT","EXTERNAL","OWNER","CREATOR","status","STATUS","ACTIVE","created","Date","toISOString","data","catch","e","reject","Error","message","people","get","person"],"mappings":";;;;;;;;;;;;;;;;;;;AAIA;;AAJA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,mBAAT,CAA6BC,KAA7B,EAAoCC,QAApC,EAA8C;AACnD,SAAOC,qBAAqB,CAACF,KAAD,CAArB,CACJG,IADI,CACC;AAAA,WAAM,iBAAQC,OAAR,CAAgB;AAC1BC,MAAAA,SAAS,EAAEL,KAAK,CAACM,QAAN,CAAeC,EAAf,CAAkBC,EADH;AAE1BC,MAAAA,KAAK,EAAET,KAAK,CAACM,QAAN,CAAeC,EAAf,CAAkBE,KAFC;AAG1BR,MAAAA,QAAQ,EAARA,QAH0B;AAI1B;AACA;AACA;AACA;AACAS,MAAAA,OAAO,EAAEC,kBAAUC,QAAV,CAAmBC,KAAnB,CAAyBC,OARR;AAS1BC,MAAAA,MAAM,EAAEJ,kBAAUC,QAAV,CAAmBI,MAAnB,CAA0BC,MATR;AAU1BC,MAAAA,OAAO,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAViB;AAW1BC,MAAAA,IAAI,EAAE;AAXoB,KAAhB,CAAN;AAAA,GADD,EAaDC,KAbC,CAaK,UAACC,CAAD,EAAO;AACf,qBAAQC,MAAR,CAAe,IAAIC,KAAJ,yCAA2CxB,QAA3C,8BACHsB,CAAC,CAACG,OADC,EAAf;AAED,GAhBI,CAAP;AAiBD;AAED;AACA;AACA;AACA;AACA;;;SACsBxB,qB;;;;;mGAAf,iBAAqCF,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEA,QAAQA,KAAK,CAACM,QAFd;AAAA;AAAA;AAAA;;AAAA,6CAGI,iBAAQF,OAAR,EAHJ;;AAAA;AAAA,6CAMEJ,KAAK,CAAC2B,MAAN,CAAaC,GAAb,CAAiB,IAAjB,EACJzB,IADI,CACC,UAAC0B,MAAD,EAAY;AAChB7B,cAAAA,KAAK,CAACM,QAAN,CAAeC,EAAf,GAAoBsB,MAApB;AAEA,qBAAO,iBAAQzB,OAAR,EAAP;AACD,aALI,CANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SDK_EVENT} from '@webex/common';\n\n/**\n * Creates a 'webhook' envelope to wrap Webex events in\n * @param {object} webex - sdk object\n * @param {string} resource - resource to create an envelope for\n * @returns {object} - Returns a promise of an event envelope object\n */\nexport function createEventEnvelope(webex, resource) {\n  return ensureMyIdIsAvailable(webex)\n    .then(() => Promise.resolve({\n      createdBy: webex.internal.me.id,\n      orgId: webex.internal.me.orgId,\n      resource,\n      // id -- webhook id concept does not correlate to SDK socket event\n      // name -- webhook name concept does not correlate to SDK socket event\n      // targetUrl -- targetUrl concept does not correlate to SDK socket event\n      // secret -- secret concept does not correlate to SDK socket event\n      ownedBy: SDK_EVENT.EXTERNAL.OWNER.CREATOR,\n      status: SDK_EVENT.EXTERNAL.STATUS.ACTIVE,\n      created: new Date().toISOString(),\n      data: {}\n    })).catch((e) => {\n      Promise.reject(new Error(`Unable to get person info for ${resource} \\\nevent envelope: ${e.message}`));\n    });\n}\n\n/**\n * Stores SDK users info in the sdk object if it doesn't already exist\n * @param {object} webex - sdk object\n * @returns {Promise} - Returns a promise that user info will be available\n */\nexport async function ensureMyIdIsAvailable(webex) {\n  // If we don't have it, save info about our user\n  if (('me' in webex.internal)) {\n    return Promise.resolve();\n  }\n\n  return webex.people.get('me')\n    .then((person) => {\n      webex.internal.me = person;\n\n      return Promise.resolve();\n    });\n}\n"]}