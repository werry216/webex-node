"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/wrapNativeSuper"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

/**
 * Base Exception class
 */
var Exception = /*#__PURE__*/function (_Error) {
  (0, _inherits2.default)(Exception, _Error);

  var _super = _createSuper(Exception);

  /**
   * constructor
   * @param {mixed} args
   * @returns {Exception}
   */
  function Exception() {
    var _this;

    (0, _classCallCheck2.default)(this, Exception);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    var message;

    if (_this.parse) {
      var _this2;

      message = (_this2 = _this).parse.apply(_this2, args);
    } else if (_this.constructor.parse) {
      var _this$constructor;

      message = (_this$constructor = _this.constructor).parse.apply(_this$constructor, args);
    }

    if (!message) {
      message = _this.constructor.defaultMessage;
    }

    _this.name = _this.constructor.name;
    _this.message = message;
    return _this;
  }
  /**
   * Generates the value assigned to `this.message`. You'll probably want to
   * override this in your custom Exception
   * @param {mixed} args
   * @returns {string}
   */


  (0, _createClass2.default)(Exception, null, [{
    key: "parse",
    value: function parse() {
      return arguments.length <= 0 ? undefined : arguments[0];
    }
  }]);
  return Exception;
}( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));

exports.default = Exception;
(0, _defineProperty2.default)(Exception, "defaultMessage", 'An error occurred');
//# sourceMappingURL=exception.js.map
