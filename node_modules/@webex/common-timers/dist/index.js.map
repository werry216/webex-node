{"version":3,"sources":["index.js"],"names":["safeSetTimeout","timer","setTimeout","unref","safeSetInterval","interval","setInterval"],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,cAAT,GAAiC;AACtC,MAAMC,KAAK,GAAGC,UAAU,MAAV,mBAAd;;AAEA,MAAID,KAAK,CAACE,KAAV,EAAiB;AACfF,IAAAA,KAAK,CAACE,KAAN;AACD;;AAED,SAAOF,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASG,eAAT,GAAkC;AACvC,MAAMC,QAAQ,GAAGC,WAAW,MAAX,mBAAjB;;AAEA,MAAID,QAAQ,CAACF,KAAb,EAAoB;AAClBE,IAAAA,QAAQ,CAACF,KAAT;AACD;;AAED,SAAOE,QAAP;AACD","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * Wrapper around setTimout which (in node) unrefs the returned timer to avoid\n * wedging the process open unexpectedly.\n * @param {Mixed} args\n * @protected\n * @returns {Timer|Number}\n */\nexport function safeSetTimeout(...args) {\n  const timer = setTimeout(...args);\n\n  if (timer.unref) {\n    timer.unref();\n  }\n\n  return timer;\n}\n\n/**\n * Wrapper around setTimout which (in node) unrefs the returned timer to avoid\n * wedging the process open unexpectedly.\n * @param {Mixed} args\n * @protected\n * @returns {Timer|Number}\n */\nexport function safeSetInterval(...args) {\n  const interval = setInterval(...args);\n\n  if (interval.unref) {\n    interval.unref();\n  }\n\n  return interval;\n}\n"]}