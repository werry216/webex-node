{"version":3,"sources":["search.js"],"names":["Search","WebexPlugin","extend","namespace","people","options","queryString","query","reject","Error","request","api","resource","method","body","then","res","bindSearchKey","webex","internal","encryption","kms","createUnboundKeys","count","key","createResource","userIds","device","userId","set","uri","search","promise","resolve","searchEncryptionKeyUrl","service","resActivities","includeRemoteClusterReferences","breadcrumbs","promises","forEach","cluster","editedCluster","clusterActivityUrls","items","map","activity","activityUrl","bulkActivitiesPromise","conversation","bulkActivitiesFetch","catch","err","logger","warn","push","all","clusterResults","reduce","accumulator","clusterResult","concat","oneFlight"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {get} from 'lodash';\nimport {oneFlight} from '@webex/common';\nimport {WebexPlugin} from '@webex/webex-core';\n\nconst Search = WebexPlugin.extend({\n  namespace: 'Search',\n\n  people(options) {\n    options = options || {};\n\n    if (!options.queryString && options.query) {\n      options.queryString = options.query;\n      Reflect.deleteProperty(options, 'query');\n    }\n\n    if (!options.queryString) {\n      return Promise.reject(new Error('`options.query` is required'));\n    }\n\n    return this.request({\n      api: 'argonaut',\n      resource: 'directory',\n      method: 'POST',\n      body: options\n    })\n      .then((res) => res.body);\n  },\n\n  @oneFlight\n  bindSearchKey() {\n    return this.webex.internal.encryption.kms.createUnboundKeys({count: 1})\n      .then(([key]) => this.webex.internal.encryption.kms.createResource({\n        key,\n        userIds: [this.webex.internal.device.userId]\n      })\n        .then(() => this.webex.internal.device.set('searchEncryptionKeyUrl', key.uri)));\n  },\n\n  /**\n  * Fetches search result activities\n  * @param {Object} options\n  * @param {boolean} options.includeRemoteClusterReferences when true,\n  * includes search results from remote clusters\n  * @returns {Promise<Array>} Resolves with the activities\n  */\n  search(options) {\n    /* eslint max-nested-callbacks: [0] */\n    options = options || {};\n\n    let promise = Promise.resolve();\n\n    if (!this.webex.internal.device.searchEncryptionKeyUrl) {\n      promise = this.bindSearchKey();\n    }\n\n    return promise\n      .then(() => this.webex.request({\n        service: 'argonaut',\n        resource: 'search',\n        method: 'POST',\n        body: Object.assign(options, {\n          searchEncryptionKeyUrl: this.webex.internal.device.searchEncryptionKeyUrl\n        })\n      }))\n      .then((res) => {\n        const resActivities = get(res, 'body.activities.items', []);\n\n        if (options.includeRemoteClusterReferences && res.body.breadcrumbs) {\n          const {breadcrumbs} = res.body;\n          const promises = [];\n\n          Object.keys(breadcrumbs).forEach((cluster) => {\n            // Map activity URLs to their cluster\n            const editedCluster = `${cluster}:identityLookup`;\n            const clusterActivityUrls = breadcrumbs[cluster].items.map(\n              (activity) => activity.activityUrl\n            );\n\n            // Find activities per cluster\n            const bulkActivitiesPromise = this.webex.internal.conversation.bulkActivitiesFetch(\n              clusterActivityUrls,\n              {cluster: editedCluster}\n            )\n              .catch((err) => {\n                this.logger.warn(\n                  'search: error fetching from remote clusters',\n                  err\n                );\n\n                return Promise.resolve([]);\n              });\n\n            promises.push(bulkActivitiesPromise);\n          });\n\n          return Promise.all(promises).then(\n            (clusterResults) => clusterResults.reduce(\n              (accumulator, clusterResult) => accumulator.concat(clusterResult),\n              resActivities\n            )\n          );\n        }\n\n        return resActivities;\n      });\n  }\n\n});\n\nexport default Search;\n"]}