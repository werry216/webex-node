"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

_Object$defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _search.default;
  }
});

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _has2 = _interopRequireDefault(require("lodash/has"));

var _webexCore = require("@webex/webex-core");

var _search = _interopRequireDefault(require("./search"));

var _config = _interopRequireDefault(require("./config"));

require("@webex/internal-plugin-conversation");

require("@webex/internal-plugin-encryption");

/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */
(0, _webexCore.registerInternalPlugin)('search', _search.default, {
  config: _config.default,
  payloadTransformer: {
    predicates: [{
      name: 'encryptSearchQuery',
      direction: 'outbound',
      test: function test(ctx, options) {
        if (!(0, _has2.default)(options, 'body.query')) {
          return _promise.default.resolve(false);
        }

        if (!(0, _has2.default)(options, 'body.searchEncryptionKeyUrl')) {
          return _promise.default.resolve(false);
        }

        if (options.service === 'argonaut') {
          return _promise.default.resolve(true);
        }

        if (options.url) {
          var service = ctx.webex.internal.services.getServiceFromUrl(options.url);
          return _promise.default.resolve(service && service.name === 'argonaut');
        }

        return _promise.default.resolve(false);
      },
      extract: function extract(options) {
        return _promise.default.resolve(options.body);
      }
    }, {
      name: 'transformObjectArray',
      direction: 'inbound',
      test: function test(ctx, response) {
        return _promise.default.resolve((0, _has2.default)(response, 'body.activities.items[0].objectType')).then(function (res) {
          if (!res) {
            return _promise.default.resolve(false);
          }

          if (response.options.service === 'argonaut') {
            return _promise.default.resolve(true);
          }

          if (response.options.url) {
            var service = ctx.webex.internal.services.getServiceFromUrl(response.options.url);
            return _promise.default.resolve(service && service.name === 'argonaut');
          }

          return _promise.default.resolve(false);
        });
      },
      extract: function extract(response) {
        return _promise.default.resolve(response.body.activities.items);
      }
    }],
    transforms: [{
      name: 'encryptSearchQuery',
      direction: 'outbound',
      fn: function fn(ctx, object) {
        return ctx.webex.internal.encryption.encryptText(object.searchEncryptionKeyUrl, object.query).then(function (q) {
          object.query = q;
        });
      }
    }]
  }
});
//# sourceMappingURL=index.js.map
