"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _values = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/values"));

var _find2 = _interopRequireDefault(require("lodash/find"));

var _util = _interopRequireDefault(require("./util"));

var _constants = require("./constants");

/**
 * @class CalendarCollection
 */
var CalendarCollection = {
  namespace: _constants.CALENDAR,
  items: {},

  /**
   * @param {String} id calendar ID
   * @returns {Any} Calendar Item specifc to that id
   * @private
   * @memberof CalendarCollection
   */
  get: function get(id) {
    return this.items[id];
  },

  /**
   * @param {String} key any key and the corresponding calendar Item
   * @param {String} value any values corresponding to calendar item
   * @returns {Any} returns whatever is being stuffed into the collection
   * @private
   * @memberof CalendarCollection
   */
  getBy: function getBy(key, value) {
    if (key && value) {
      return (0, _find2.default)(this.items, function (item) {
        return item[key] === value;
      });
    }

    return null;
  },

  /**
   * @param {Object} item CalendarObject passed to the collection
   * @returns {Any} returns calender id whats get set
   * @private
   * @memberof CalendarCollection
   */
  set: function set(item) {
    var itemId = item.id;

    var meeting = _util.default.calculateEndTime(item);

    this.items[itemId] = meeting;
    return itemId;
  },

  /**
   * resets all the values in the calendarcollection
   * @returns {undefined}
   * @private
   * @memberof CalendarCollection
   */
  reset: function reset() {
    this.items = {};
  },

  /**
   * @param {Id} id is the id for the calendar item to be removed
   * @returns {Any} calendar item which got removed
   * @private
   * @memberof CalendarCollection
   */
  remove: function remove(id) {
    var meeting = this.get(id);
    delete this.items[id];
    return meeting;
  },

  /**
   * sets all the item passed to the collection
   * @param {Array} items array of calendar items
   * @private
   * @returns {undefined}
   * @memberof CalendarCollection
   */
  setAll: function setAll(items) {
    var _this = this;

    items.forEach(function (item) {
      _this.set(item);
    });
  },

  /**
   * gets all the calendar stored in the collection
   * @param {Array} items array of calendar items
   * @private
   * @returns {Array} returns an array of calendar items
   * @memberof CalendarCollection
   */
  getAll: function getAll() {
    return (0, _values.default)(this.items);
  }
};
var _default = CalendarCollection;
exports.default = _default;
//# sourceMappingURL=collection.js.map
