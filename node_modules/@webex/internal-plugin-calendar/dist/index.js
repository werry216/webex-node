"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

_Object$defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _calendar.default;
  }
});

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _has2 = _interopRequireDefault(require("lodash/has"));

require("@webex/internal-plugin-device");

require("@webex/internal-plugin-encryption");

require("@webex/internal-plugin-conversation");

var _webexCore = require("@webex/webex-core");

var _calendar = _interopRequireDefault(require("./calendar"));

var _config = _interopRequireDefault(require("./config"));

/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */
(0, _webexCore.registerInternalPlugin)('calendar', _calendar.default, {
  config: _config.default,
  payloadTransformer: {
    predicates: [{
      name: 'transformMeetingNotes',
      direction: 'inbound',
      test: function test(ctx, response) {
        return _promise.default.resolve((0, _has2.default)(response, 'body.encryptedNotes'));
      },
      extract: function extract(response) {
        return _promise.default.resolve(response.body);
      }
    }, {
      name: 'transformMeetingParticipants',
      direction: 'inbound',
      test: function test(ctx, response) {
        return _promise.default.resolve((0, _has2.default)(response, 'body.encryptedParticipants'));
      },
      extract: function extract(response) {
        return _promise.default.resolve(response.body);
      }
    }, {
      name: 'transformMeetingArray',
      direction: 'inbound',
      test: function test(ctx, response) {
        return _promise.default.resolve((0, _has2.default)(response, 'body.items[0].seriesId'));
      },
      extract: function extract(response) {
        return _promise.default.resolve(response.body.items);
      }
    }, {
      name: 'transformMeeting',
      direction: 'inbound',
      test: function test(ctx, response) {
        return _promise.default.resolve((0, _has2.default)(response, 'body.seriesId'));
      },
      extract: function extract(response) {
        return _promise.default.resolve(response.body);
      }
    }, {
      name: 'transformMeeting',
      direction: 'inbound',
      test: function test(ctx, response) {
        return _promise.default.resolve((0, _has2.default)(response, 'calendarMeetingExternal'));
      },
      extract: function extract(response) {
        return _promise.default.resolve(response.calendarMeetingExternal);
      }
    }],
    transforms: [{
      name: 'transformMeetingArray',
      fn: function fn(ctx, array) {
        return _promise.default.all(array.map(function (item) {
          return ctx.transform('transformMeeting', item);
        }));
      }
    }, {
      name: 'transformMeeting',
      direction: 'inbound',
      fn: function fn(ctx, object) {
        if (!object) {
          return _promise.default.resolve();
        }

        if (!object.encryptionKeyUrl) {
          return _promise.default.resolve();
        } // Decrypt participant properties if meeting object contains participants


        var decryptedParticipants = object.encryptedParticipants ? object.encryptedParticipants.map(function (participant) {
          return _promise.default.all([ctx.transform('decryptTextProp', 'encryptedEmailAddress', object.encryptionKeyUrl, participant), ctx.transform('decryptTextProp', 'encryptedName', object.encryptionKeyUrl, participant)]);
        }) : []; // Decrypt meetingJoinInfo properties if meeting object contains meetingJoinInfo

        var decryptedMeetingJoinInfo = object.meetingJoinInfo ? _promise.default.all([ctx.transform('decryptTextProp', 'meetingJoinURI', object.encryptionKeyUrl, object.meetingJoinInfo), ctx.transform('decryptTextProp', 'meetingJoinURL', object.encryptionKeyUrl, object.meetingJoinInfo)]) : [];
        var decryptedOrganizer = object.encryptedOrganizer ? _promise.default.all([ctx.transform('decryptTextProp', 'encryptedEmailAddress', object.encryptionKeyUrl, object.encryptedOrganizer), ctx.transform('decryptTextProp', 'encryptedName', object.encryptionKeyUrl, object.encryptedOrganizer)]) : [];
        return _promise.default.all([ctx.transform('decryptTextProp', 'encryptedSubject', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'encryptedLocation', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'encryptedNotes', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'webexURI', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'webexURL', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'spaceMeetURL', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'spaceURI', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'spaceURL', object.encryptionKeyUrl, object)].concat(decryptedOrganizer, decryptedParticipants, decryptedMeetingJoinInfo));
      }
    }, {
      name: 'transformMeetingNotes',
      direction: 'inbound',
      fn: function fn(ctx, object) {
        if (!object) {
          return _promise.default.resolve();
        }

        if (!object.encryptionKeyUrl) {
          return _promise.default.resolve();
        }

        return _promise.default.all([ctx.transform('decryptTextProp', 'encryptedNotes', object.encryptionKeyUrl, object)]);
      }
    }, {
      name: 'transformMeetingParticipants',
      direction: 'inbound',
      fn: function fn(ctx, object) {
        if (!object) {
          return _promise.default.resolve();
        }

        if (!object.encryptionKeyUrl || !object.encryptedParticipants) {
          return _promise.default.resolve();
        } // Decrypt participant properties


        var decryptedParticipants = object.encryptedParticipants.map(function (participant) {
          return _promise.default.all([ctx.transform('decryptTextProp', 'encryptedEmailAddress', object.encryptionKeyUrl, participant), ctx.transform('decryptTextProp', 'encryptedName', object.encryptionKeyUrl, participant)]);
        });
        return _promise.default.all(decryptedParticipants);
      }
    }]
  }
});
//# sourceMappingURL=index.js.map
