{"version":3,"sources":["index.js"],"names":["Calendar","config","payloadTransformer","predicates","name","direction","test","ctx","response","resolve","extract","body","items","calendarMeetingExternal","transforms","fn","array","all","map","item","transform","object","encryptionKeyUrl","decryptedParticipants","encryptedParticipants","participant","decryptedMeetingJoinInfo","meetingJoinInfo","decryptedOrganizer","encryptedOrganizer","concat"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport '@webex/internal-plugin-device';\nimport '@webex/internal-plugin-encryption';\nimport '@webex/internal-plugin-conversation';\n\nimport {registerInternalPlugin} from '@webex/webex-core';\nimport {has} from 'lodash';\n\nimport Calendar from './calendar';\nimport config from './config';\n\nregisterInternalPlugin('calendar', Calendar, {\n  config,\n  payloadTransformer: {\n    predicates: [\n      {\n        name: 'transformMeetingNotes',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.encryptedNotes'));\n        },\n        extract(response) {\n          return Promise.resolve(response.body);\n        }\n      },\n      {\n        name: 'transformMeetingParticipants',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.encryptedParticipants'));\n        },\n        extract(response) {\n          return Promise.resolve(response.body);\n        }\n      },\n      {\n        name: 'transformMeetingArray',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.items[0].seriesId'));\n        },\n        extract(response) {\n          return Promise.resolve(response.body.items);\n        }\n      },\n      {\n        name: 'transformMeeting',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.seriesId'));\n        },\n        extract(response) {\n          return Promise.resolve(response.body);\n        }\n      },\n      {\n        name: 'transformMeeting',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'calendarMeetingExternal'));\n        },\n        extract(response) {\n          return Promise.resolve(response.calendarMeetingExternal);\n        }\n      }\n    ],\n    transforms: [\n      {\n        name: 'transformMeetingArray',\n        fn(ctx, array) {\n          return Promise.all(array.map((item) => ctx.transform('transformMeeting', item)));\n        }\n      },\n      {\n        name: 'transformMeeting',\n        direction: 'inbound',\n        fn(ctx, object) {\n          if (!object) {\n            return Promise.resolve();\n          }\n\n          if (!object.encryptionKeyUrl) {\n            return Promise.resolve();\n          }\n\n          // Decrypt participant properties if meeting object contains participants\n          const decryptedParticipants = object.encryptedParticipants ? object.encryptedParticipants.map((participant) => Promise.all([\n            ctx.transform('decryptTextProp', 'encryptedEmailAddress', object.encryptionKeyUrl, participant),\n            ctx.transform('decryptTextProp', 'encryptedName', object.encryptionKeyUrl, participant)\n          ])) : [];\n\n          // Decrypt meetingJoinInfo properties if meeting object contains meetingJoinInfo\n          const decryptedMeetingJoinInfo = object.meetingJoinInfo ? Promise.all([\n            ctx.transform('decryptTextProp', 'meetingJoinURI', object.encryptionKeyUrl, object.meetingJoinInfo),\n            ctx.transform('decryptTextProp', 'meetingJoinURL', object.encryptionKeyUrl, object.meetingJoinInfo)\n          ]) : [];\n\n          const decryptedOrganizer = object.encryptedOrganizer ? Promise.all([\n            ctx.transform('decryptTextProp', 'encryptedEmailAddress', object.encryptionKeyUrl, object.encryptedOrganizer),\n            ctx.transform('decryptTextProp', 'encryptedName', object.encryptionKeyUrl, object.encryptedOrganizer)\n          ]) : [];\n\n          return Promise.all([\n            ctx.transform('decryptTextProp', 'encryptedSubject', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'encryptedLocation', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'encryptedNotes', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'webexURI', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'webexURL', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'spaceMeetURL', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'spaceURI', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'spaceURL', object.encryptionKeyUrl, object)\n          ].concat(decryptedOrganizer, decryptedParticipants, decryptedMeetingJoinInfo));\n        }\n      },\n      {\n        name: 'transformMeetingNotes',\n        direction: 'inbound',\n        fn(ctx, object) {\n          if (!object) {\n            return Promise.resolve();\n          }\n\n          if (!object.encryptionKeyUrl) {\n            return Promise.resolve();\n          }\n\n          return Promise.all([\n            ctx.transform('decryptTextProp', 'encryptedNotes', object.encryptionKeyUrl, object)\n          ]);\n        }\n      },\n      {\n        name: 'transformMeetingParticipants',\n        direction: 'inbound',\n        fn(ctx, object) {\n          if (!object) {\n            return Promise.resolve();\n          }\n\n          if (!object.encryptionKeyUrl || !object.encryptedParticipants) {\n            return Promise.resolve();\n          }\n\n          // Decrypt participant properties\n          const decryptedParticipants = object.encryptedParticipants.map((participant) => Promise.all([\n            ctx.transform('decryptTextProp', 'encryptedEmailAddress', object.encryptionKeyUrl, participant),\n            ctx.transform('decryptTextProp', 'encryptedName', object.encryptionKeyUrl, participant)\n          ]));\n\n          return Promise.all(decryptedParticipants);\n        }\n      }\n    ]\n  }\n});\n\nexport {default} from './calendar';\n"]}