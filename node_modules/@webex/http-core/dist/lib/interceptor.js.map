{"version":3,"sources":["interceptor.js"],"names":["Interceptor","attrs","forEach","key","value","enumerable","options","logger","console","process","env","ENABLE_VERBOSE_NETWORK_LOGGING","info","constructor","name","resolve","reason","reject","response","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AACA;AACA;IACqBA,W;AACnB;AACF;AACA;AACA;AACA;AACE,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,QAAIA,KAAJ,EAAW;AACT,yBAAYA,KAAZ,EAAmBC,OAAnB,CAA2B,UAACC,GAAD,EAAS;AAClC,YAAMC,KAAK,GAAGH,KAAK,CAACE,GAAD,CAAnB;AAEA,qCAAuB,KAAvB,EAA6BA,GAA7B,EAAkC;AAChCE,UAAAA,UAAU,EAAE,IADoB;AAEhCD,UAAAA,KAAK,EAALA;AAFgC,SAAlC;AAID,OAPD;AAQD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;WACE,sBAAyB;AAAA,UAAdE,OAAc,uEAAJ,EAAI;AACvB,UAAMC,MAAM,GAAG,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEA,UAAI,CAACC,OAAO,CAACC,GAAR,CAAYC,8BAAb,IAA+C,CAACJ,MAApD,EAA4D;AAC1D;AACD,OALsB,CAOvB;;;AACAA,MAAAA,MAAM,CAACK,IAAP,CAAY,2EAAZ;AAEAL,MAAAA,MAAM,CAACK,IAAP,WACK,KAAKC,WAAL,CAAiBC,IADtB,gBACgC,wBAAeR,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CADhC;AAGD;AAED;AACF;AACA;AACA;;;;;AAKE;AACF;AACA;AACA;AACA;AACE,uBAAUA,OAAV,EAAmB;AACjB,aAAO,iBAAQS,OAAR,CAAgBT,OAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,wBAAeA,OAAf,EAAwBU,MAAxB,EAAgC;AAC9B,aAAO,iBAAQC,MAAR,CAAeD,MAAf,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,oBAAWV,OAAX,EAAoBY,QAApB,EAA8B;AAC5B,aAAO,iBAAQH,OAAR,CAAgBG,QAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,yBAAgBZ,OAAhB,EAAyBU,MAAzB,EAAiC;AAC/B,aAAO,iBAAQC,MAAR,CAAeD,MAAf,CAAP;AACD;;;WAzCD,kBAAgB;AACd,YAAM,IAAIG,KAAJ,CAAU,wCAAV,CAAN;AACD","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {get} from 'lodash';\n\n/**\n * @class\n */\nexport default class Interceptor {\n  /**\n   * @constructor\n   * @param {Object} attrs\n   * @returns {UrlInterceptor}\n   */\n  constructor(attrs) {\n    if (attrs) {\n      Object.keys(attrs).forEach((key) => {\n        const value = attrs[key];\n\n        Reflect.defineProperty(this, key, {\n          enumerable: true,\n          value\n        });\n      });\n    }\n  }\n\n  /**\n   * Logs the options of a request. This should be utilized\n   * during the intercepting process, but can be used at any\n   * time otherwise.\n   * @param {object} options\n   * @returns {void}\n   */\n  logOptions(options = {}) {\n    const logger = get(this, 'webex.logger', console);\n\n    if (!process.env.ENABLE_VERBOSE_NETWORK_LOGGING || !logger) {\n      return;\n    }\n\n    // prepend a header for the interceptor\n    logger.info('/***** Interceptor ****************************************************\\\\');\n\n    logger.info(\n      `${this.constructor.name} - ${JSON.stringify(options, null, 2)}`\n    );\n  }\n\n  /**\n   * @abstract\n   * @returns {Interceptor}\n   */\n  static create() {\n    throw new Error('`Interceptor.create()` must be defined');\n  }\n\n  /**\n   * Transform request options before sending them\n   * @param {Object} options\n   * @returns {Promise<Object>}\n   */\n  onRequest(options) {\n    return Promise.resolve(options);\n  }\n\n  /**\n   * Handle request failures\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {RejectedPromise<Error>}\n   */\n  onRequestError(options, reason) {\n    return Promise.reject(reason);\n  }\n\n  /**\n   * Transform response before returning it\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Promise<HttpResponse>}\n   */\n  onResponse(options, response) {\n    return Promise.resolve(response);\n  }\n\n  /**\n   * Handle response errors\n   * @param {Object} options\n   * @param {WebexHttpError} reason\n   * @returns {Promise<WebexHttpError>}\n   */\n  onResponseError(options, reason) {\n    return Promise.reject(reason);\n  }\n}\n"]}