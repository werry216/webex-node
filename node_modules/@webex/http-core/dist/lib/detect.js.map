{"version":3,"sources":["detect.js"],"names":["detect","buffer","Blob","ArrayBuffer","Uint8Array","Error","type","fileType","mime"],"mappings":";;;;;;;;;;;;;;;;AAIA;;AAJA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;SAC8BA,M;;;;;oFAAf,iBAAsBC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGX,EAAEA,MAAM,YAAYC,IAApB,KACA,EAAED,MAAM,YAAYE,WAApB,CADA,IAEA,EAAEF,MAAM,YAAYG,UAApB,CALW;AAAA;AAAA;AAAA;;AAAA,kBAOL,IAAIC,KAAJ,CAAU,qEAAV,CAPK;;AAAA;AAAA,kBAUTJ,MAAM,YAAYC,IAVT;AAAA;AAAA;AAAA;;AAAA,6CAWJD,MAAM,CAACK,IAXH;;AAAA;AAAA;AAAA,mBAeU,0BAAWL,MAAX,CAfV;;AAAA;AAePM,YAAAA,QAfO;;AAAA,gBAiBRA,QAjBQ;AAAA;AAAA;AAAA;;AAAA,6CAkBJ,0BAlBI;;AAAA;AAAA,6CAqBNA,QAAQ,CAACC,IArBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {fromBuffer} from 'file-type';\n\n/**\n * Determine mimeType for the specified buffer;\n * @param {Buffer|Uint8Array|ArrayBuffer} buffer\n * @returns {Promise<string>}\n */\nexport default async function detect(buffer) {\n  /* global Blob */\n  if (\n    !(buffer instanceof Blob) &&\n    !(buffer instanceof ArrayBuffer) &&\n    !(buffer instanceof Uint8Array)\n  ) {\n    throw new Error('`detect` requires a buffer of type Blob, ArrayBuffer, or Uint8Array');\n  }\n\n  if (buffer instanceof Blob) {\n    return buffer.type;\n  }\n\n  // `fromBuffer()` can take a buffer that is either a ArrayBuffer or Uinit8Array\n  const fileType = await fromBuffer(buffer);\n\n  if (!fileType) {\n    return 'application/octet-stream';\n  }\n\n  return fileType.mime;\n}\n"]}