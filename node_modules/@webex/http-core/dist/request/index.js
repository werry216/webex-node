"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = request;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _events = require("events");

var _request2 = _interopRequireDefault(require("./request"));

/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

/**
 * @param {Object} options
 * @returns {Promise}
 */
function request(options) {
  if (options.url) {
    options.uri = options.url;
    options.url = null;
  }

  options.headers = options.headers || {};
  options.download = new _events.EventEmitter();
  options.upload = new _events.EventEmitter();
  return intercept(options.interceptors, 'Request').then(function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _request2.default.apply(void 0, [options].concat(args));
  }).then(function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return intercept.apply(void 0, [options.interceptors.slice().reverse(), 'Response'].concat(args));
  });
  /**
   * @param {Array} interceptors
   * @param {string} key
   * @param {Object} res
   * @private
   * @returns {Promise}
   */

  function intercept(interceptors, key, res) {
    var successKey = "on".concat(key);
    var errorKey = "on".concat(key, "Error");
    return interceptors.reduce(function (promise, interceptor) {
      return promise.then(function (result) {
        interceptor.logOptions(options);

        if (interceptor[successKey]) {
          return interceptor[successKey](options, result);
        }

        return _promise.default.resolve(result);
      }, function (reason) {
        interceptor.logOptions(options);

        if (interceptor[errorKey]) {
          return interceptor[errorKey](options, reason);
        }

        return _promise.default.reject(reason);
      });
    }, _promise.default.resolve(res));
  }
}
//# sourceMappingURL=index.js.map
