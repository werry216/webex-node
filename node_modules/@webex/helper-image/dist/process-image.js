"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = processImage;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _gm = _interopRequireDefault(require("gm"));

/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

/**
 * Measures an image file and produces a thumbnail for it
 * @param {Object} options
 * @param {Blob|ArrayBuffer} options.file
 * @param {Number} options.thumbnailMaxWidth
 * @param {Number} options.thumbnailMaxHeight
 * @param {Boolean} options.enableThumbnails
 * @param {Object} options.logger
 * @returns {Promise<Array>} Buffer, Dimensions, thumbnailDimensions
 */
function processImage(_ref) {
  var file = _ref.file,
      type = _ref.type,
      thumbnailMaxWidth = _ref.thumbnailMaxWidth,
      thumbnailMaxHeight = _ref.thumbnailMaxHeight,
      enableThumbnails = _ref.enableThumbnails,
      logger = _ref.logger;
  var fileType = type || file.type;

  if (!fileType || !fileType.startsWith('image')) {
    return _promise.default.resolve();
  }

  var fileDimensions = new _promise.default(function (resolve, reject) {
    (0, _gm.default)(file).size(function (err, size) {
      if (err) {
        reject(err);
        return;
      }

      resolve((0, _pick2.default)(size, 'width', 'height'));
    });
  });
  var thumbnail, thumbnailDimensions;

  if (enableThumbnails) {
    thumbnail = new _promise.default(function (resolve, reject) {
      (0, _gm.default)(file).resize(thumbnailMaxWidth, thumbnailMaxHeight).autoOrient().toBuffer('PNG', function (err, buffer) {
        if (err) {
          reject(err);
          return;
        }

        resolve(buffer);
      });
    });
    thumbnailDimensions = thumbnail.then(function (buffer) {
      return new _promise.default(function (resolve, reject) {
        (0, _gm.default)(buffer).size(function (err, size) {
          if (err) {
            reject(err);
            return;
          }

          resolve((0, _pick2.default)(size, 'width', 'height'));
        });
      });
    });
  }

  return _promise.default.all([thumbnail, fileDimensions, thumbnailDimensions]).catch(function (err) {
    var errorString = err.toString();

    if (errorString.includes('EPIPE')) {
      logger.warn(err, 'Is GraphicsMagick installed?');
      return _promise.default.resolve();
    }

    if (errorString.includes('No decode delegate for this image format')) {
      logger.debug(err, 'File does not appear to be an image');
      return _promise.default.resolve();
    }

    if (errorString.includes('Stream yields empty buffer')) {
      logger.debug(err, 'File does not appear to be an image');
      return _promise.default.resolve();
    }

    return _promise.default.reject(err);
  });
}
//# sourceMappingURL=process-image.js.map
