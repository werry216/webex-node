"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = detectFileType;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _httpCore = require("@webex/http-core");

var _mime = require("mime");

/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

/**
 * Determines the file type of the specified file
 * @param {FileLike} file
 * @param {Object} logger
 * @returns {Promise<string>}
 */
function detectFileType(file, logger) {
  if (file.type) {
    logger.info("file already has type ".concat(file.type, ". using existing file.type."));
    return _promise.default.resolve(file.type);
  }

  if (file.mimeType) {
    logger.info("file already has mimeType ".concat(file.type, ". using existing file.mimeType."));
    return _promise.default.resolve(file.mimeType);
  } // This kinda belongs in http core, but since we have no guarantee that
  // buffers are expected to have names there, it'll stay here for now.


  return (0, _httpCore.detect)(file).then(function (type) {
    if (type === 'application/x-msi' || type === 'application/octet-stream') {
      logger.info("detected filetype to be ".concat(type, ". Falling back to mime.lookup"));
      return (0, _mime.getType)(file.name);
    }

    logger.info("detected filetype to be ".concat(type, ". returning it"));
    return type;
  });
}
//# sourceMappingURL=detect-filetype.js.map
