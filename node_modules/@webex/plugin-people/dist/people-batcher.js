"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _webexCore = require("@webex/webex-core");

/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

/**
 * @class
 * @ignore
 */
var PersonUUIDRequestBatcher = _webexCore.Batcher.extend({
  namespace: 'People',

  /**
   * @instance
   * @memberof PersonUUIDRequestBatcher
   * @param {HttpResponseObject} res
   * @returns {Promise}
   */
  handleHttpSuccess: function handleHttpSuccess(res) {
    var _this = this;

    var promises = res.body.items.map(function (personResponse) {
      return _this.handleItemSuccess(personResponse.id, personResponse);
    });

    if (res.body.notFoundIds) {
      promises.concat(res.body.notFoundIds.map(function (id) {
        return _this.handleItemFailure(id);
      }));
    }

    return _promise.default.all(promises);
  },
  handleItemFailure: function handleItemFailure(id) {
    return this.getDeferredForResponse(id).then(function (defer) {
      defer.reject(id);
    });
  },

  /**
   * @instance
   * @memberof PersonUUIDRequestBatcher
   * @param {string} email
   * @param {Object} response
   * @returns {Promise}
   */
  handleItemSuccess: function handleItemSuccess(email, response) {
    return this.getDeferredForResponse(email).then(function (defer) {
      defer.resolve(response);
    });
  },

  /**
   * @instance
   * @memberof PersonUUIDRequestBatcher
   * @param {string} uuidOrHydraId
   * @returns {Promise<string>}
   */
  fingerprintRequest: function fingerprintRequest(uuidOrHydraId) {
    var hydraId = this.webex.people.inferPersonIdFromUuid(uuidOrHydraId);
    return _promise.default.resolve(hydraId);
  },

  /**
   * @instance
   * @memberof PersonUUIDRequestBatcher
   * @param {string} hydraId
   * @returns {Promise<string>}
   */
  fingerprintResponse: function fingerprintResponse(hydraId) {
    return _promise.default.resolve(hydraId);
  },
  prepareRequest: function prepareRequest(ids) {
    return _promise.default.resolve(ids.join());
  },

  /**
   * @instance
   * @memberof PersonUUIDRequestBatcher
   * @param {Object} ids
   * @returns {Promise<HttpResponseObject>}
   */
  submitHttpRequest: function submitHttpRequest(ids) {
    return this.webex.request({
      service: 'hydra',
      resource: "people/?id=".concat(ids, "&showAllTypes=").concat(this.config.showAllTypes)
    });
  }
});

var _default = PersonUUIDRequestBatcher;
exports.default = _default;
//# sourceMappingURL=people-batcher.js.map
