{"version":3,"sources":["device.js"],"names":["Device","WebexPlugin","extend","namespace","getAudioState","space","webex","request","method","uri","url","then","res","body","putAudioState","audioState","deviceUrl","reject","Error","mute","unmute","increaseVolume","decreaseVolume","setVolume","level"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin} from '@webex/webex-core';\n\n/**\n * @class\n * @extends {Lyra}\n * @memberof Lyra\n */\nconst Device = WebexPlugin.extend({\n  namespace: 'Lyra',\n\n  /**\n   * Gets the audio state of the device\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise<LyraAudioState>} {volume, microphones, url}\n   */\n  getAudioState(space) {\n    return this.webex.request({\n      method: 'GET',\n      uri: `${space.url}/audio`\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Updates audio state for lyra device, should be called every 10 minutes or\n   * when mic or volume state is changed\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {Types~LyraAudioState} audioState\n   * @param {object} audioState.volume optional\n   * @param {boolean} audioState.volume.level\n   * @param {object} audioState.microphones optional\n   * @param {boolean} audioState.microphones.muted\n   * @param {string} audioState.deviceUrl\n   * @returns {Promise}\n   */\n  putAudioState(space, audioState = {}) {\n    if (!audioState.deviceUrl) {\n      return Promise.reject(new Error('audioState.deviceUrl is required'));\n    }\n\n    return this.webex.request({\n      method: 'PUT',\n      uri: `${space.url}/audio`,\n      body: audioState\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Mutes lyra device\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  mute(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: `${space.url}/audio/microphones/actions/mute/invoke`\n    });\n  },\n\n  /**\n   * Unmutes lyra device\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  unmute(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: `${space.url}/audio/microphones/actions/un-mute/invoke`\n    });\n  },\n\n  /**\n   * Increases lyra device's volume\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  increaseVolume(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: `${space.url}/audio/volume/actions/increase/invoke`\n    });\n  },\n\n  /**\n   * Decreases lyra device's volume\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  decreaseVolume(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: `${space.url}/audio/volume/actions/decrease/invoke`\n    });\n  },\n\n  /**\n   * Sets lyra device's volume but should use increase and decrease api instead\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {integer} level to be set\n   * @returns {Promise}\n   */\n  setVolume(space, level = 0) {\n    return this.webex.request({\n      method: 'POST',\n      uri: `${space.url}/audio/volume/actions/set/invoke`,\n      body: {\n        level\n      }\n    });\n  }\n\n});\n\nexport default Device;\n"]}