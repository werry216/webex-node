{"version":3,"sources":["messages.js"],"names":["verbToType","SDK_EVENT","INTERNAL","ACTIVITY_VERB","SHARE","EXTERNAL","EVENT_TYPE","CREATED","POST","DELETE","DELETED","getRoomType","roomTags","includes","ACTIVITY_TAG","ONE_ON_ONE","SPACE_TYPE","DIRECT","GROUP","Messages","WebexPlugin","extend","initialize","args","prototype","listen","webex","RESOURCE","MESSAGES","then","envelope","eventEnvelope","internal","mercury","connect","listenTo","WEBEX_ACTIVITY","event","onWebexApiEvent","create","message","key","file","logger","warn","files","reduce","type","options","method","service","resource","request","res","body","get","id","items","list","qs","Page","remove","statusCode","undefined","fire","trigger","activity","data","verb","getMessageEvent","actor","actorId","entryUUID","emailAddress","objectId","object","target","roomId","roomUrl","url","tags","cluster","combinedEvent","personId","resolve","personEmail","roomType"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,GAzIkC,eAyI9Bf,OAzI8B,EAyIrB;AACX,QAAMgB,EAAE,GAAGhB,OAAO,CAACgB,EAAR,IAAchB,OAAzB;AAEA,WAAO,KAAKY,OAAL,CAAa;AAClBF,MAAAA,OAAO,EAAE,OADS;AAElBC,MAAAA,QAAQ,qBAAcK,EAAd;AAFU,KAAb,EAIJ3B,IAJI,CAIC,UAACwB,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,CAASG,KAAT,IAAkBJ,GAAG,CAACC,IAA/B;AAAA,KAJD,CAAP;AAKD,GAjJiC;;AAmJlC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEI,EAAAA,IA1LkC,gBA0L7BV,OA1L6B,EA0LpB;AAAA;;AACZ,WAAO,KAAKI,OAAL,CAAa;AAClBF,MAAAA,OAAO,EAAE,OADS;AAElBC,MAAAA,QAAQ,EAAE,UAFQ;AAGlBQ,MAAAA,EAAE,EAAEX;AAHc,KAAb,EAKJnB,IALI,CAKC,UAACwB,GAAD;AAAA,aAAS,IAAIO,eAAJ,CAASP,GAAT,EAAc,MAAI,CAAC3B,KAAnB,CAAT;AAAA,KALD,CAAP;AAMD,GAjMiC;;AAmMlC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEmC,EAAAA,MA3OkC,kBA2O3BrB,OA3O2B,EA2OlB;AACd,QAAMgB,EAAE,GAAGhB,OAAO,CAACgB,EAAR,IAAchB,OAAzB;AAEA,WAA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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  SDK_EVENT,\n  buildHydraMessageId,\n  buildHydraPersonId,\n  buildHydraRoomId,\n  createEventEnvelope,\n  getHydraClusterString\n} from '@webex/common';\nimport {\n  Page,\n  WebexPlugin\n} from '@webex/webex-core';\nimport {cloneDeep, isArray} from 'lodash';\n\nconst verbToType = {\n  [SDK_EVENT.INTERNAL.ACTIVITY_VERB.SHARE]:\n    SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED,\n  [SDK_EVENT.INTERNAL.ACTIVITY_VERB.POST]:\n    SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED,\n  [SDK_EVENT.INTERNAL.ACTIVITY_VERB.DELETE]:\n    SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED\n};\n\nconst getRoomType = (roomTags) =>\n  (roomTags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.ONE_ON_ONE) ?\n    SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT :\n    SDK_EVENT.EXTERNAL.SPACE_TYPE.GROUP);\n\n/**\n * @typedef {Object} MessageObject\n * @property {string} id - (server generated) Unique identifier for the message\n * @property {string} personId - The ID for the author of the messasge\n * @property {email} personEmail - The email for the author of the messasge\n * @property {string} roomId - The ID for the room of the message\n * @property {string} text - The message posted to the room in plain text\n * @property {string} markdown - The message posted to the room in markdown\n * @property {Array<string>} files - The source URL(s) for the message attachment(s).\n * See the {@link https://developer.webex.com/docs/api/basics#message-attachments|Message Attachments}\n * Guide for a list of supported media types.\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\n/**\n * Messages are how people communicate in rooms. Each message timestamped and\n * represented in Webex as a distinct block of content. Messages can contain\n * plain text and a single file attachment. See the\n * {@link https://developer.webex.com/docs/api/basics#message-attachments|Message Attachments} Guide\n * for a list of supported media types.\n * @class\n */\nconst Messages = WebexPlugin.extend({\n  /**\n   * Initializer used to generate Messages\n   * as a plugin wrapped around the provided arguments.\n   * @private\n   * @see WebexPlugin.initialize\n   * @param  {...any} args\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(WebexPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Register to listen for incoming messages events\n   * This is an alternate approach to registering for messages webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * The messages.listen() event objects can also include additional fields not\n   * available in the webhook's JSON payload: `text`, `markdown`, and `files`.\n   * These fields are available when their details are included in the web socket's\n   * `activity` object. Retrieving other fields, such as the `html` field,\n   * will require a manual request to get the corresponding message object.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Messages\n   * @returns {Promise}\n   * @example\n   * webex.messages.listen()\n   *   .then(() => {\n   *     console.log('listening to message events');\n   *     webex.messages.on('created', (event) => console.log(`Got a message:created event:\\n${event}`);\n   *     webex.messages.on('deleted', (event) => console.log(`Got a message:deleted event:\\n${event}`);\n   *   })\n   *   .catch((e) => console.error(`Unable to register for message events: ${e}`));\n   * // Some app logic...\n   * // WHen it is time to cleanup\n   * webex.messages.stopListening();\n   * webex.messages.off('created');\n   * webex.messages.off('deleted');\n   */\n  listen() {\n    // Create a common envelope that we will wrap all events in\n    return createEventEnvelope(this.webex,\n      SDK_EVENT.EXTERNAL.RESOURCE.MESSAGES)\n      .then((envelope) => {\n        this.eventEnvelope = envelope;\n\n        // Register to listen to events\n        return this.webex.internal.mercury.connect().then(() => {\n          this.listenTo(this.webex.internal.mercury,\n            SDK_EVENT.INTERNAL.WEBEX_ACTIVITY,\n            (event) => this.onWebexApiEvent(event));\n        });\n      });\n  },\n\n  /**\n   * Post a new message and/or media content into a room.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     var assert = require('assert');\n   *     assert(message.id);\n   *     assert(message.personId);\n   *     assert(message.personEmail);\n   *     assert(message.roomId);\n   *     assert(message.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(message) {\n    let key = 'body';\n\n    if (message.file) {\n      this.logger.warn('Supplying a single `file` property is deprecated; please supply a `files` array');\n      message.files = [message.file];\n      Reflect.deleteProperty(message, 'file');\n    }\n\n    if (isArray(message.files) && message.files.reduce((type, file) => type || typeof file !== 'string', false)) {\n      key = 'formData';\n    }\n\n    const options = {\n      method: 'POST',\n      service: 'hydra',\n      resource: 'messages',\n      [key]: message\n    };\n\n    return this.request(options)\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single message.\n   * @instance\n   * @memberof Messages\n   * @param {RoomObject|string} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * var message;\n   * webex.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message = m;\n   *     return webex.messages.get(message.id);\n   *   })\n   *   .then(function(message2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(message2, message);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(message) {\n    const id = message.id || message;\n\n    return this.request({\n      service: 'hydra',\n      resource: `messages/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of messages. In most cases the results will only contain\n   * messages posted in rooms that the authentiated user is a member of.\n   * @instance\n   * @memberof Messages\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MessageObject>>}\n   * @example\n   * var message1, message2, room;\n   * webex.rooms.create({title: 'List Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return webex.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message2 = m;\n   *     return webex.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.length, 2);\n   *     assert.equal(messages.items[0].id, message2.id);\n   *     assert.equal(messages.items[1].id, message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'messages',\n      qs: options\n    })\n      .then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Deletes a single message. Deleting a message will notify all members of the\n   * room that the authenticated user deleted the message. Generally, users can\n   * only delete their own messages except for the case of Moderated Rooms and\n   * Org Administrators.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject|uuid} message\n   * @returns {Promise}}\n   * @example\n   * var message1, room;\n   * webex.rooms.create({title: 'Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return webex.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.messages.remove(message1);\n   *   })\n   *   .then(function() {\n   *     return webex.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.items.length, 1);\n   *     assert(messages.items[0].id !== message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(message) {\n    const id = message.id || message;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `messages/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n\n        return res.body;\n      });\n  },\n\n  /**\n   * Curry the 'trigger' method\n   * @private\n   * @memberof Messages\n   * @param {string} type the type of event to fire\n   * @returns {function} takes event and triggers it\n   */\n  fire(type) {\n    return (event) => this.trigger(type, event);\n  },\n\n  /**\n   * This function is called when an internal membership events fires,\n   * if the user registered for these events with the listen() function.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Messages\n   * @param {Object} event\n   * @param {Object} event.data contains the data of the event\n   * @param {Object} event.data.activity the activity that triggered the event\n   * @returns {void}\n   */\n  onWebexApiEvent({data: {activity}}) {\n    const type = verbToType[activity.verb];\n\n    if (!type) {\n      return;\n    }\n\n    this.getMessageEvent(activity, type)\n      .then(this.fire(type));\n  },\n\n  /**\n   * Constructs the data object for an event on the messages resource,\n   * adhering to Hydra's Webehook data structure messages.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Messages\n   * @param {Object} activity from mercury\n   * @param {String} type the type of event\n   * @returns {Object} constructed event\n   */\n  getMessageEvent(activity, type) {\n    const {\n      id,\n      actor: {entryUUID: actorId, emailAddress},\n      object: {id: objectId},\n      target: {id: roomId, url: roomUrl, tags: roomTags}\n    } = activity;\n\n    const cluster = getHydraClusterString(this.webex, roomUrl);\n    const combinedEvent = cloneDeep(this.eventEnvelope);\n\n    combinedEvent.event = type;\n    if (type === SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED) {\n      // Cannot fetch since the message is deleted\n      // Convert the Mercury event to a Hydra event\n      const personId = buildHydraPersonId(actorId, cluster);\n\n      return Promise.resolve({\n        ...combinedEvent,\n        actorId: personId,\n        data: {\n          id: buildHydraMessageId(objectId, cluster),\n          personEmail: emailAddress || actorId,\n          personId,\n          roomId: buildHydraRoomId(roomId, cluster),\n          roomType: getRoomType(roomTags)\n        }\n      });\n    }\n\n    return this.get(buildHydraMessageId(id, cluster))\n      .then((data) => ({\n        ...combinedEvent,\n        actorId: data.personId,\n        data\n      }));\n  }\n});\n\nexport default Messages;\n"]}