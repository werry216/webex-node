{"version":3,"sources":["batcher.js"],"names":["sym","MetricsBatcher","Batcher","extend","namespace","prepareItem","item","env","process","NODE_ENV","appType","config","time","version","webex","resolve","prepareRequest","queue","map","postTime","submitHttpRequest","payload","request","method","service","resource","body","metrics","handleHttpSuccess","res","all","options","acceptItem","handleHttpError","reason","WebexHttpError","NetworkOrCORSError","logger","warn","delay","nextDelay","batcherRetryPlateau","rerequest","prototype","getDeferredForRequest","then","defer","req","enqueue","bounce","catch","reject","fingerprintRequest","fingerprintResponse"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Batcher, WebexHttpError} from '@webex/webex-core';\nimport {safeSetTimeout} from '@webex/common-timers';\n\nconst sym = Symbol('metric id');\n\nconst MetricsBatcher = Batcher.extend({\n  namespace: 'Metrics',\n\n  prepareItem(item) {\n    // Keep non-prod data out of metrics\n    const env = process.env.NODE_ENV === 'production' ? null : 'TEST';\n\n    item.appType = item.appType || this.config.appType;\n    item.env = item.env || env;\n    item.time = item.time || Date.now();\n    item.version = item.version || this.webex.version;\n\n    return Promise.resolve(item);\n  },\n\n  prepareRequest(queue) {\n    return Promise.resolve(queue.map((item) => {\n      item.postTime = item.postTime || Date.now();\n\n      return item;\n    }));\n  },\n\n  submitHttpRequest(payload) {\n    return this.webex.request({\n      method: 'POST',\n      service: 'metrics',\n      resource: 'metrics',\n      body: {\n        metrics: payload\n      }\n    });\n  },\n\n  handleHttpSuccess(res) {\n    return Promise.all(res.options.body.metrics.map((item) => this.acceptItem(item)));\n  },\n\n  handleHttpError(reason) {\n    if (reason instanceof WebexHttpError.NetworkOrCORSError) {\n      this.logger.warn('metrics-batcher: received network error submitting metrics, reenqueuing payload');\n\n      return Promise.all(reason.options.body.metrics.map((item) => new Promise((resolve) => {\n        const delay = item[sym].nextDelay;\n\n        if (delay < this.config.batcherRetryPlateau) {\n          item[sym].nextDelay *= 2;\n        }\n        safeSetTimeout(() => {\n          resolve(this.rerequest(item));\n        }, delay);\n      })));\n    }\n\n    return Reflect.apply(Batcher.prototype.handleHttpError, this, [reason]);\n  },\n\n  rerequest(item) {\n    return Promise.all([\n      this.getDeferredForRequest(item),\n      this.prepareItem(item)\n    ])\n      .then(([defer, req]) => {\n        this.enqueue(req)\n          .then(() => this.bounce())\n          .catch((reason) => defer.reject(reason));\n      });\n  },\n\n  fingerprintRequest(item) {\n    item[sym] = item[sym] || {\n      nextDelay: 1000\n    };\n\n    return Promise.resolve(item[sym]);\n  },\n\n  fingerprintResponse(item) {\n    return Promise.resolve(item[sym]);\n  }\n});\n\nexport default MetricsBatcher;\n"]}