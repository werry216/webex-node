"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _assign = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/assign"));

var _now = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/date/now"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor"));

var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/applyDecoratedDescriptor"));

var _webexCore = require("@webex/webex-core");

var _common = require("@webex/common");

var _batcher = _interopRequireDefault(require("./batcher"));

var _clientMetricsBatcher = _interopRequireDefault(require("./client-metrics-batcher"));

var _callDiagnosticEventsBatcher = _interopRequireDefault(require("./call-diagnostic-events-batcher"));

var _dec, _obj;

var Metrics = _webexCore.WebexPlugin.extend((_dec = (0, _common.deprecated)('Metrics#sendUnstructured() is deprecated; please use Metrics#submit()'), (_obj = {
  children: {
    batcher: _batcher.default,
    clientMetricsBatcher: _clientMetricsBatcher.default,
    callDiagnosticEventsBatcher: _callDiagnosticEventsBatcher.default
  },
  namespace: 'Metrics',
  sendUnstructured: function sendUnstructured(key, value) {
    return this.submit(key, value);
  },
  submit: function submit(key, value) {
    return this.batcher.request((0, _assign.default)({
      key: key
    }, value));
  },

  /**
   * This corresponds to #sendSemiStructured() in the deprecated metrics handler
   * @param {string} eventName
   * @param {Object} props
   * @param {string} preLoginId
   * @returns {Object} HttpResponse object
   */
  submitClientMetrics: function submitClientMetrics(eventName, props, preLoginId) {
    var payload = {
      metricName: eventName
    };

    if (props.tags) {
      payload.tags = props.tags;
    }

    if (props.fields) {
      payload.fields = props.fields;
    }

    if (props.type) {
      payload.type = props.type;
    }

    if (props.context) {
      payload.context = props.context;
    }

    if (props.eventPayload) {
      payload.eventPayload = props.eventPayload;
    }

    payload.timestamp = (0, _now.default)();

    if (preLoginId) {
      var _payload = {
        metrics: [payload]
      }; // Do not batch these because pre-login events occur during onboarding, so we will be partially blind
      // to users' progress through the reg flow if we wait to persist pre-login metrics for people who drop off because
      // their metrics will not post from a queue flush in time

      return this.postPreLoginMetric(_payload, preLoginId);
    }

    return this.clientMetricsBatcher.request(payload);
  },

  /**
   * Issue request to alias a user's pre-login ID with their CI UUID
   * @param {string} preLoginId
   * @returns {Object} HttpResponse object
   */
  aliasUser: function aliasUser(preLoginId) {
    return this.request({
      method: 'POST',
      api: 'metrics',
      resource: 'clientmetrics',
      headers: {
        'x-prelogin-userid': preLoginId
      },
      body: {},
      qs: {
        alias: true
      }
    });
  },
  postPreLoginMetric: function postPreLoginMetric(payload, preLoginId) {
    var _this = this;

    return this.webex.credentials.getClientToken().then(function (token) {
      return _this.request({
        method: 'POST',
        api: 'metrics',
        resource: 'clientmetrics-prelogin',
        headers: {
          authorization: token.toString(),
          'x-prelogin-userid': preLoginId
        },
        body: payload
      });
    });
  },
  submitCallDiagnosticEvents: function submitCallDiagnosticEvents(payload) {
    var event = {
      type: 'diagnostic-event',
      eventPayload: payload
    };
    return this.callDiagnosticEventsBatcher.request(event);
  },
  version: "1.125.6"
}, ((0, _applyDecoratedDescriptor2.default)(_obj, "sendUnstructured", [_dec], (0, _getOwnPropertyDescriptor.default)(_obj, "sendUnstructured"), _obj)), _obj)));

var _default = Metrics;
exports.default = _default;
//# sourceMappingURL=metrics.js.map
