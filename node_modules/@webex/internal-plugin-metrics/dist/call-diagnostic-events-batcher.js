"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _assign = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/assign"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _batcher = _interopRequireDefault(require("./batcher"));

/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */
var CallDiagnosticEventsBatcher = _batcher.default.extend({
  namespace: 'Metrics',
  prepareItem: function prepareItem(item) {
    // networkType should be a enum value: `wifi`, `ethernet`, `cellular`, or `unknown`.
    // Browsers cannot provide such information right now. However, it is a required field.
    var origin = {
      buildType: process.env.NODE_ENV === 'production' ? 'prod' : 'test',
      networkType: 'unknown'
    };
    item.eventPayload.origin = (0, _assign.default)(origin, item.eventPayload.origin);
    return _promise.default.resolve(item);
  },
  prepareRequest: function prepareRequest(queue) {
    // Add sent timestamp
    queue.forEach(function (item) {
      item.eventPayload.originTime = item.eventPayload.originTime || {};
      item.eventPayload.originTime.sent = new Date().toISOString();
    });
    return _promise.default.resolve(queue);
  },
  submitHttpRequest: function submitHttpRequest(payload) {
    return this.webex.request({
      method: 'POST',
      service: 'metrics',
      resource: 'clientmetrics',
      body: {
        metrics: payload
      }
    });
  }
});

var _default = CallDiagnosticEventsBatcher;
exports.default = _default;
//# sourceMappingURL=call-diagnostic-events-batcher.js.map
