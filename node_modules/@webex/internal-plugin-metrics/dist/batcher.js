"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/slicedToArray"));

var _symbol = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/symbol"));

var _now = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/date/now"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _apply = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/reflect/apply"));

var _webexCore = require("@webex/webex-core");

var _commonTimers = require("@webex/common-timers");

/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */
var sym = (0, _symbol.default)('metric id');

var MetricsBatcher = _webexCore.Batcher.extend({
  namespace: 'Metrics',
  prepareItem: function prepareItem(item) {
    // Keep non-prod data out of metrics
    var env = process.env.NODE_ENV === 'production' ? null : 'TEST';
    item.appType = item.appType || this.config.appType;
    item.env = item.env || env;
    item.time = item.time || (0, _now.default)();
    item.version = item.version || this.webex.version;
    return _promise.default.resolve(item);
  },
  prepareRequest: function prepareRequest(queue) {
    return _promise.default.resolve(queue.map(function (item) {
      item.postTime = item.postTime || (0, _now.default)();
      return item;
    }));
  },
  submitHttpRequest: function submitHttpRequest(payload) {
    return this.webex.request({
      method: 'POST',
      service: 'metrics',
      resource: 'metrics',
      body: {
        metrics: payload
      }
    });
  },
  handleHttpSuccess: function handleHttpSuccess(res) {
    var _this = this;

    return _promise.default.all(res.options.body.metrics.map(function (item) {
      return _this.acceptItem(item);
    }));
  },
  handleHttpError: function handleHttpError(reason) {
    var _this2 = this;

    if (reason instanceof _webexCore.WebexHttpError.NetworkOrCORSError) {
      this.logger.warn('metrics-batcher: received network error submitting metrics, reenqueuing payload');
      return _promise.default.all(reason.options.body.metrics.map(function (item) {
        return new _promise.default(function (resolve) {
          var delay = item[sym].nextDelay;

          if (delay < _this2.config.batcherRetryPlateau) {
            item[sym].nextDelay *= 2;
          }

          (0, _commonTimers.safeSetTimeout)(function () {
            resolve(_this2.rerequest(item));
          }, delay);
        });
      }));
    }

    return (0, _apply.default)(_webexCore.Batcher.prototype.handleHttpError, this, [reason]);
  },
  rerequest: function rerequest(item) {
    var _this3 = this;

    return _promise.default.all([this.getDeferredForRequest(item), this.prepareItem(item)]).then(function (_ref) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
          defer = _ref2[0],
          req = _ref2[1];

      _this3.enqueue(req).then(function () {
        return _this3.bounce();
      }).catch(function (reason) {
        return defer.reject(reason);
      });
    });
  },
  fingerprintRequest: function fingerprintRequest(item) {
    item[sym] = item[sym] || {
      nextDelay: 1000
    };
    return _promise.default.resolve(item[sym]);
  },
  fingerprintResponse: function fingerprintResponse(item) {
    return _promise.default.resolve(item[sym]);
  }
});

var _default = MetricsBatcher;
exports.default = _default;
//# sourceMappingURL=batcher.js.map
