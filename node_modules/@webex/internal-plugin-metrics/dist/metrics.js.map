{"version":3,"sources":["metrics.js"],"names":["Metrics","WebexPlugin","extend","children","batcher","Batcher","clientMetricsBatcher","ClientMetricsBatcher","callDiagnosticEventsBatcher","CallDiagnosticEventsBatcher","namespace","sendUnstructured","key","value","submit","request","submitClientMetrics","eventName","props","preLoginId","payload","metricName","tags","fields","type","context","eventPayload","timestamp","_payload","metrics","postPreLoginMetric","aliasUser","method","api","resource","headers","body","qs","alias","webex","credentials","getClientToken","then","token","authorization","toString","submitCallDiagnosticEvents","event"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin} from '@webex/webex-core';\nimport {deprecated} from '@webex/common';\n\nimport Batcher from './batcher';\nimport ClientMetricsBatcher from './client-metrics-batcher';\nimport CallDiagnosticEventsBatcher from './call-diagnostic-events-batcher';\n\nconst Metrics = WebexPlugin.extend({\n  children: {\n    batcher: Batcher,\n    clientMetricsBatcher: ClientMetricsBatcher,\n    callDiagnosticEventsBatcher: CallDiagnosticEventsBatcher\n  },\n\n  namespace: 'Metrics',\n\n  @deprecated('Metrics#sendUnstructured() is deprecated; please use Metrics#submit()')\n  sendUnstructured(key, value) {\n    return this.submit(key, value);\n  },\n\n  submit(key, value) {\n    return this.batcher.request(Object.assign({key}, value));\n  },\n\n  /**\n   * This corresponds to #sendSemiStructured() in the deprecated metrics handler\n   * @param {string} eventName\n   * @param {Object} props\n   * @param {string} preLoginId\n   * @returns {Object} HttpResponse object\n   */\n  submitClientMetrics(eventName, props, preLoginId) {\n    const payload = {metricName: eventName};\n\n    if (props.tags) {\n      payload.tags = props.tags;\n    }\n    if (props.fields) {\n      payload.fields = props.fields;\n    }\n    if (props.type) {\n      payload.type = props.type;\n    }\n    if (props.context) {\n      payload.context = props.context;\n    }\n\n    if (props.eventPayload) {\n      payload.eventPayload = props.eventPayload;\n    }\n\n    payload.timestamp = Date.now();\n\n    if (preLoginId) {\n      const _payload = {\n        metrics: [payload]\n      };\n\n      // Do not batch these because pre-login events occur during onboarding, so we will be partially blind\n      // to users' progress through the reg flow if we wait to persist pre-login metrics for people who drop off because\n      // their metrics will not post from a queue flush in time\n      return this.postPreLoginMetric(_payload, preLoginId);\n    }\n\n    return this.clientMetricsBatcher.request(payload);\n  },\n\n  /**\n   * Issue request to alias a user's pre-login ID with their CI UUID\n   * @param {string} preLoginId\n   * @returns {Object} HttpResponse object\n   */\n  aliasUser(preLoginId) {\n    return this.request({\n      method: 'POST',\n      api: 'metrics',\n      resource: 'clientmetrics',\n      headers: {\n        'x-prelogin-userid': preLoginId\n      },\n      body: {},\n      qs: {\n        alias: true\n      }\n    });\n  },\n\n  postPreLoginMetric(payload, preLoginId) {\n    return this.webex.credentials.getClientToken().then((token) =>\n      this.request({\n        method: 'POST',\n        api: 'metrics',\n        resource: 'clientmetrics-prelogin',\n        headers: {\n          authorization: token.toString(),\n          'x-prelogin-userid': preLoginId\n        },\n        body: payload\n      }));\n  },\n\n  submitCallDiagnosticEvents(payload) {\n    const event = {\n      type: 'diagnostic-event',\n      eventPayload: payload\n    };\n\n    return this.callDiagnosticEventsBatcher.request(event);\n  }\n});\n\nexport default Metrics;\n"]}