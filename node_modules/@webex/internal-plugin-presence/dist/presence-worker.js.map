{"version":3,"sources":["presence-worker.js"],"names":["PresenceWorker","checkFetchers","FETCH_DELAY","presences","watchers","fetchers","flights","campers","subscribers","webex","internal","Error","mercury","connected","resolve","connect","then","on","APHELEIA_SUBSCRIPTION_UPDATE","subscriptionUpdate","bind","setInterval","groundskeeper","GROUNDSKEEPER_INTERVAL","event","data","subject","Date","getTime","presence","emitEvent","PRESENCE_UPDATE","type","ENVELOPE_TYPE","SUBSCRIPTION","payload","id","now","UPDATE_PRESENCE_DELAY","debouncedFetch","boarding","list","response","statusList","forEach","PRESENCE","camper","time","SUBSCRIPTION_DELAY","push","renewIds","subscription","expiration","PREMATURE_EXPIRATION_SUBSCRIPTION_TIME","trash","tenMinutesAgo","EXPIRED_PRESENCE_TIME","lastUpdated","length","DELETE","checkCampers","renewSubscriptions","checkSubscriptions","ids","subscribe","body","responses","responseCode","ttl","subscriptionTtl","status","DEFAULT_SUBSCRIPTION_TTL","cleanPresences"],"mappings":"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","sourcesContent":["\nimport {debounce} from 'lodash';\n\nimport {\n  FETCH_DELAY,\n  GROUNDSKEEPER_INTERVAL,\n  SUBSCRIPTION_DELAY,\n  UPDATE_PRESENCE_DELAY,\n  EXPIRED_PRESENCE_TIME,\n  PREMATURE_EXPIRATION_SUBSCRIPTION_TIME,\n  DEFAULT_SUBSCRIPTION_TTL,\n  APHELEIA_SUBSCRIPTION_UPDATE,\n  PRESENCE_UPDATE,\n  ENVELOPE_TYPE\n} from './constants';\n\n/**\n * Presence Worker\n * Manages fetches and subscriptions for presence\n * @class\n */\nexport default class PresenceWorker {\n  /**\n   * Constructs a presence worker to execute and\n   * maintain tasks related to presence upkeep.\n   * @returns {undefined}\n   */\n  constructor() {\n    this.presences = {}; // current presence objects; updated time\n    this.watchers = {}; // counter of visible presence-required objects\n    this.fetchers = {}; // waiting to get presence object\n    this.flights = {}; // in flight to get presence object\n    this.campers = {}; // waiting to subscribe; updated time\n    this.subscribers = {}; // current subscriptions; expiration time\n  }\n\n  /**\n   * Connect to the mercury for presence and starts worker.\n   * @param {object} webex\n   * @returns {undefined}\n   */\n  initialize(webex) {\n    if (!webex || !webex.internal) {\n      throw new Error('Must initialize Presence Worker with webex!');\n    }\n\n    this.webex = webex;\n\n    const mercury = this.webex.internal.mercury.connected ?\n      Promise.resolve() : this.webex.internal.mercury.connect();\n\n    mercury.then(() => {\n      this.webex.internal.mercury.on(APHELEIA_SUBSCRIPTION_UPDATE,\n        this.subscriptionUpdate.bind(this));\n    });\n\n    setInterval(this.groundskeeper.bind(this), GROUNDSKEEPER_INTERVAL);\n  }\n\n  /**\n   * Trigger a subscription update event.\n   * @param {string} event\n   * @returns {undefined}\n   */\n  subscriptionUpdate(event) {\n    this.presences[event.data.subject] = new Date().getTime();\n\n    this.webex.internal.presence.emitEvent(PRESENCE_UPDATE, {\n      type: ENVELOPE_TYPE.SUBSCRIPTION,\n      payload: event.data\n    });\n  }\n\n  /**\n   * Retrieves and subscribes to a user's presence.\n   * @param {string} id\n   * @returns {undefined}\n   */\n  enqueue(id) {\n    const now = new Date().getTime();\n\n    if (this.watchers[id]) {\n      this.watchers[id] += 1;\n    }\n    else {\n      this.watchers[id] = 1;\n    }\n\n    if (this.subscribers[id]) {\n      return;\n    }\n\n    if (!this.campers[id]) {\n      this.campers[id] = now;\n    }\n\n    // Retrieve presence if:\n    // not in flight or\n    // don't already have the presence or\n    // presence has gone stale\n    if (!this.flights[id] &&\n        (!this.presences[id] ||\n        this.presences[id] < now - UPDATE_PRESENCE_DELAY)) {\n      this.fetchers[id] = id;\n      this.debouncedFetch();\n    }\n  }\n\n  /**\n   * Retract from subscribing to a user's presence.\n   * @param {string} id\n   * @returns {undefined}\n   */\n  dequeue(id) {\n    if (this.watchers[id]) {\n      this.watchers[id] -= 1;\n\n      if (this.watchers[id] <= 0) {\n        delete this.watchers[id];\n        delete this.fetchers[id];\n        delete this.campers[id];\n      }\n    }\n  }\n\n  /**\n   * Retrieve users' presences.\n   * @returns {undefined}\n   */\n  checkFetchers() {\n    const boarding = this.fetchers;\n\n    Object.assign(this.flights, boarding);\n    this.fetchers = {};\n\n\n    this.webex.internal.presence.list(Object.keys(boarding))\n      .then((response) => {\n        const now = new Date().getTime();\n\n        response.statusList.forEach((presence) => {\n          const id = presence.subject;\n\n          delete this.flights[id];\n          this.presences[id] = now;\n        });\n\n        this.webex.internal.presence.emitEvent(PRESENCE_UPDATE, {\n          type: ENVELOPE_TYPE.PRESENCE,\n          payload: response\n        });\n      });\n  }\n\n  debouncedFetch = debounce(this.checkFetchers, FETCH_DELAY)\n\n  /**\n   * Determine if we should subscribe to users' presences.\n   * @returns {Array}: User ids to subscribe.\n   */\n  checkCampers() {\n    const now = new Date().getTime();\n    const subscribers = [];\n\n    Object.entries(this.campers).forEach((camper) => {\n      const id = camper[0];\n      const time = camper[1];\n\n      // Subscribe if they've been camping for a minute\n      if (time < now - SUBSCRIPTION_DELAY) {\n        delete this.campers[id];\n        this.subscribers[id] = null;\n        subscribers.push(id);\n      }\n    });\n\n    return subscribers;\n  }\n\n  /**\n   * Determine if we should re-subscribe or remove users' subscriptions.\n   * @returns {Array}: User ids to re-subscribe.\n   */\n  checkSubscriptions() {\n    const now = new Date().getTime();\n\n    const renewIds = [];\n\n    Object.entries(this.subscribers).forEach((subscription) => {\n      const id = subscription[0];\n      const expiration = subscription[1];\n\n      if (expiration) {\n        // Renew subscription if they're about to expire\n        if (this.watchers[id] &&\n            now > expiration - PREMATURE_EXPIRATION_SUBSCRIPTION_TIME) {\n          renewIds.push(id);\n        }\n        else if (now > expiration) {\n          delete this.subscribers[id];\n        }\n      }\n    });\n\n    return renewIds;\n  }\n\n  /**\n   * Remove expired presence objects.\n   * @returns {undefined}\n   */\n  cleanPresences() {\n    const trash = [];\n    const tenMinutesAgo = new Date().getTime() - EXPIRED_PRESENCE_TIME;\n\n    Object.entries(this.presences).forEach((presence) => {\n      const id = presence[0];\n      const lastUpdated = presence[1];\n\n      // Delete the object if it is stale\n      if (lastUpdated < tenMinutesAgo) {\n        delete this.presences[id];\n        trash.push(id);\n      }\n    });\n\n    // Tells client to delete it too\n    if (trash.length) {\n      this.webex.internal.presence.emitEvent(PRESENCE_UPDATE, {\n        type: ENVELOPE_TYPE.DELETE,\n        payload: trash\n      });\n    }\n  }\n\n  /**\n   * Execute chores on an interval.\n   * Checks if we should make new subscribe,\n   * checks if we should re-subscribe,\n   * removes expired subscriptions,\n   * removes expired presence objects.\n   * @returns {undefined}\n   */\n  groundskeeper() {\n    const campers = this.checkCampers();\n    const renewSubscriptions = this.checkSubscriptions();\n\n    const ids = [\n      ...campers,\n      ...renewSubscriptions\n    ];\n\n    if (ids.length) {\n      this.webex.internal.presence.subscribe(ids)\n        .then((body) => {\n          const now = new Date().getTime();\n\n          body.responses.forEach((response) => {\n            if (response.responseCode === 200) {\n              const ttl = response.subscriptionTtl * 1000;\n\n              this.subscribers[response.subject] = now + ttl;\n              this.presences[response.status.subject] = now;\n            }\n            else {\n              // If it errored for any reason, set the ttl so we clean it out eventually\n              this.subscribers[response.subject] = now + DEFAULT_SUBSCRIPTION_TTL;\n            }\n          });\n        });\n    }\n\n    this.cleanPresences();\n  }\n}\n\n"]}