"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _webexCore = require("@webex/webex-core");

/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

/**
 * @class
 * @ignore
 */
var PresenceBatcher = _webexCore.Batcher.extend({
  namespace: 'Presence',

  /**
   * @instance
   * @memberof PresenceBatcher
   * @param {HttpResponseObject} res
   * @returns {Promise}
   */
  handleHttpSuccess: function handleHttpSuccess(res) {
    var _this = this;

    return _promise.default.all(res.body.statusList.map(function (presenceResponse) {
      return _this.handleItemSuccess(presenceResponse.subject, presenceResponse);
    }));
  },

  /**
   * @instance
   * @memberof PresenceBatcher
   * @param {string} item
   * @param {Object} response
   * @returns {Promise}
   */
  handleItemFailure: function handleItemFailure(item, response) {
    return this.getDeferredForResponse(item).then(function (defer) {
      defer.reject(response);
    });
  },

  /**
   * @instance
   * @memberof PresenceBatcher
   * @param {string} item
   * @param {Object} response
   * @returns {Promise}
   */
  handleItemSuccess: function handleItemSuccess(item, response) {
    return this.getDeferredForResponse(item).then(function (defer) {
      defer.resolve(response);
    });
  },

  /**
   * @instance
   * @memberof PresenceBatcher
   * @param {string} id
   * @returns {Promise<string>}
   */
  fingerprintRequest: function fingerprintRequest(id) {
    return _promise.default.resolve(id);
  },

  /**
   * @instance
   * @memberof PresenceBatcher
   * @param {string} id
   * @returns {Promise<string>}
   */
  fingerprintResponse: function fingerprintResponse(id) {
    return _promise.default.resolve(id);
  },

  /**
   * @instance
   * @memberof PresenceBatcher
   * @param {Array} ids
   * @returns {Promise<Array>}
   */
  prepareRequest: function prepareRequest(ids) {
    return _promise.default.resolve(ids);
  },

  /**
   * @instance
   * @memberof PresenceBatcher
   * @param {Object} subjects
   * @returns {Promise<HttpResponseObject>}
   */
  submitHttpRequest: function submitHttpRequest(subjects) {
    return this.webex.request({
      method: 'POST',
      api: 'apheleia',
      resource: 'compositions',
      body: {
        subjects: subjects
      }
    });
  }
});

var _default = PresenceBatcher;
exports.default = _default;
//# sourceMappingURL=presence-batcher.js.map
