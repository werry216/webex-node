{"version":3,"sources":["presence.js"],"names":["defaultSubscriptionTtl","USER","USER_PRESENCE_ENABLED","Presence","WebexPlugin","extend","namespace","children","batcher","PresenceBatcher","session","worker","default","PresenceWorker","type","initialize","webex","once","config","initializeWorker","emitEvent","event","payload","trigger","enable","internal","feature","setFeature","then","response","value","disable","isEnabled","getFeature","get","personId","reject","Error","request","method","service","resource","body","list","personIds","all","map","id","presences","statusList","subscribe","subscriptionTtl","subjects","batches","batchLimit","i","length","push","slice","ids","api","includeStatus","responses","idBatches","concat","unsubscribe","setStatus","status","ttl","subject","device","userId","eventType","enqueue","dequeue"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport '@webex/internal-plugin-device';\n\nimport {WebexPlugin} from '@webex/webex-core';\n\nimport PresenceBatcher from './presence-batcher';\nimport PresenceWorker from './presence-worker';\n\nconst defaultSubscriptionTtl = 600;\nconst USER = 'user';\nconst USER_PRESENCE_ENABLED = 'user-presence-enabled';\n\n/**\n * @class\n * @extends WebexPlugin\n */\nconst Presence = WebexPlugin.extend({\n  namespace: 'Presence',\n\n  children: {\n    batcher: PresenceBatcher\n  },\n\n  session: {\n    worker: {\n      default() {\n        return new PresenceWorker();\n      },\n      type: 'any'\n    }\n  },\n\n  /**\n   * Initialize the presence worker for client\n   * @returns {undefined}\n   */\n  initialize() {\n    this.webex.once('ready', () => {\n      if (this.config.initializeWorker) {\n        this.worker.initialize(this.webex);\n      }\n    });\n  },\n\n  /**\n   * Trigger an event.\n   * @param {string} event\n   * @param {string} payload\n   * @returns {undefined}\n   */\n  emitEvent(event, payload) {\n    if (payload.type && payload.payload) {\n      this.trigger(event, payload);\n    }\n  },\n\n  /**\n   * Enables presence feature\n   * @returns {Promise<boolean>} resolves with true, if successful\n   */\n  enable() {\n    return this.webex.internal.feature.setFeature(USER, USER_PRESENCE_ENABLED, true)\n      .then((response) => response.value);\n  },\n\n  /**\n   * Disables presence feature\n   * @returns {Promise<boolean>} resolves with false, if successful\n   */\n  disable() {\n    return this.webex.internal.feature.setFeature(USER, USER_PRESENCE_ENABLED, false)\n      .then((response) => response.value);\n  },\n\n  /**\n   * Returns true if presence is enabled, false otherwise\n   * @returns {Promise<boolean>} resolves with true if presence is enabled\n   */\n  isEnabled() {\n    return this.webex.internal.feature.getFeature(USER, USER_PRESENCE_ENABLED);\n  },\n\n  /**\n   * The status object\n   * @typedef {Object} PresenceStatusObject\n   * @property {string} url: Public resource identifier for presence\n   * @property {string} subject: User ID for the user the returned composed presence represents\n   * @property {string} status: Current composed presence state\n   * @property {string} statusTime: DateTime in RFC3339 format that the current status began\n   * @property {string} lastActive: DateTime in RFC3339 format that the service last saw activity from the user.\n   * @property {string} expires: DEPRECATED - DateTime in RFC3339 format that represents when the current\n   * status will expire. Will not exist if expiresTTL is -1.\n   * @property {Number} expiresTTL: TTL in seconds until the status will expire. If TTL is -1 the current\n   * status has no known expiration.\n   * @property {string} expiresTime: DateTime in RFC3339 format that the current status will expire. Missing\n   * field means no known expiration.\n   * @property {Object} vectorCounters: Used for packet ordering and tracking.\n   * @property {Boolean} suppressNotifications: Indicates if notification suppresion is recommended for this status.\n   * @property {string} lastSeenDeviceUrl: Resource Identifier of the last device to post presence activity for\n   * this user.\n   */\n\n  /**\n   * Gets the current presence status of a given person id\n   * @param {string} personId\n   * @returns {Promise<PresenceStatusObject>} resolves with status object of person\n   */\n  get(personId) {\n    if (!personId) {\n      return Promise.reject(new Error('A person id is required'));\n    }\n\n    return this.webex.request({\n      method: 'GET',\n      service: 'apheleia',\n      resource: `compositions?userId=${personId}`\n    })\n      .then((response) => response.body);\n  },\n\n  /**\n  * @typedef {Object} PresenceStatusesObject\n  * @property {Array.<PresenceStatusObject>} statusList\n   */\n  /**\n   * Gets the current presence statuses of an array of people ids\n   * @param {Array} personIds\n   * @returns {Promise<PresenceStatusesObject>} resolves with an object with key of `statusList` array\n   */\n  list(personIds) {\n    if (!personIds || !Array.isArray(personIds)) {\n      return Promise.reject(new Error('An array of person ids is required'));\n    }\n\n    return Promise.all(personIds.map((id) =>\n      this.batcher.request(id)))\n      .then((presences) => ({statusList: presences}));\n  },\n\n  /**\n   * Subscribes to a person's presence status updates\n   * Updates are sent via mercury events `apheleia.subscription_update`\n   * @param {string | Array} personIds\n   * @param {number} subscriptionTtl - Requested length of subscriptions in seconds.\n   * @returns {Promise}\n   */\n  subscribe(personIds, subscriptionTtl = defaultSubscriptionTtl) {\n    let subjects;\n    const batches = [];\n    const batchLimit = 50;\n\n    if (!personIds) {\n      return Promise.reject(new Error('A person id is required'));\n    }\n    if (Array.isArray(personIds)) {\n      subjects = personIds;\n    }\n    else {\n      subjects = [personIds];\n    }\n    // Limit batches to 50 ids per request\n    for (let i = 0; i < subjects.length; i += batchLimit) {\n      batches.push(subjects.slice(i, i + batchLimit));\n    }\n\n    return Promise.all(batches.map((ids) =>\n      this.webex.request({\n        method: 'POST',\n        api: 'apheleia',\n        resource: 'subscriptions',\n        body: {\n          subjects: ids,\n          subscriptionTtl,\n          includeStatus: true\n        }\n      })\n        .then((response) => response.body.responses)))\n      .then((idBatches) => ({responses: [].concat(...idBatches)}));\n  },\n\n  /**\n   * Unsubscribes from a person or group of people's presence subscription\n   * @param {string | Array} personIds\n   * @returns {Promise}\n   */\n  unsubscribe(personIds) {\n    let subjects;\n\n    if (!personIds) {\n      return Promise.reject(new Error('A person id is required'));\n    }\n    if (Array.isArray(personIds)) {\n      subjects = personIds;\n    }\n    else {\n      subjects = [personIds];\n    }\n\n    return this.webex.request({\n      method: 'POST',\n      api: 'apheleia',\n      resource: 'subscriptions',\n      body: {\n        subjects,\n        subscriptionTtl: 0,\n        includeStatus: true\n      }\n    });\n  },\n\n  /**\n   * Sets the status of the current user\n   * @param {string} status - active | inactive | ooo | dnd\n   * @param {number} ttl - Time To Live for the event in seconds.\n   * @returns {Promise}\n   */\n  setStatus(status, ttl) {\n    if (!status) {\n      return Promise.reject(new Error('A status is required'));\n    }\n\n    return this.webex.request({\n      method: 'POST',\n      api: 'apheleia',\n      resource: 'events',\n      body: {\n        subject: this.webex.internal.device.userId,\n        eventType: status,\n        ttl\n      }\n    })\n      .then((response) => response.body);\n  },\n\n  /**\n   * Retrieves and subscribes to a user's presence.\n   * @param {string} id\n   * @returns {undefined}\n   */\n  enqueue(id) {\n    return this.worker.enqueue(id);\n  },\n\n  /**\n   * Retract from subscribing to a user's presence.\n   * @param {string} id\n   * @returns {undefined}\n   */\n  dequeue(id) {\n    return this.worker.dequeue(id);\n  }\n});\n\nexport default Presence;\n"]}