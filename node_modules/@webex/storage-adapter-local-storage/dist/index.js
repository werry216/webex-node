"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _weakMap = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/weak-map"));

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/json/stringify"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _deleteProperty = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/reflect/delete-property"));

var _webexCore = require("@webex/webex-core");

/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

/* eslint-env browser */
var namespaces = new _weakMap.default();
var loggers = new _weakMap.default();
/**
 * localStorage adapter for webex-core storage layer
 */

var StorageAdapterLocalStorage = /*#__PURE__*/function () {
  /**
   * @constructs {StorageAdapterLocalStorage}
   * @param {string} basekey localStorage key underwhich all namespaces will be
   * stored
   */
  function StorageAdapterLocalStorage(basekey) {
    (0, _classCallCheck2.default)(this, StorageAdapterLocalStorage);

    /**
     * localStorage binding
     */
    this.Bound = /*#__PURE__*/function () {
      /**
       * @constructs {Bound}
       * @param {string} namespace
       * @param {Object} options
       */
      function _class(namespace, options) {
        (0, _classCallCheck2.default)(this, _class);
        namespaces.set(this, namespace);
        loggers.set(this, options.logger);
      }
      /**
       * @private
       * @returns {rawData}
       */


      (0, _createClass2.default)(_class, [{
        key: "_getRawData",
        value: function _getRawData() {
          var rawData = localStorage.getItem(basekey);
          return rawData ? JSON.parse(rawData) : {};
        }
        /**
         * @private
         * @returns {mixed}
         */

      }, {
        key: "_load",
        value: function _load() {
          var allData = this._getRawData();

          return allData[namespaces.get(this)] || {};
        }
        /**
         * @param {Object} data
         * @private
         * @returns {undefined}
         */

      }, {
        key: "_save",
        value: function _save(data) {
          var allData = this._getRawData();

          allData[namespaces.get(this)] = data;
          localStorage.setItem(basekey, (0, _stringify.default)(allData));
        }
        /**
         * Clears the localStorage
         * @param {string} key
         * @returns {Promise}
         */

      }, {
        key: "clear",
        value: function clear() {
          loggers.get(this).info('local-storage-store-adapter: clearing localStorage');
          return _promise.default.resolve(localStorage.removeItem(basekey));
        }
        /**
         * Removes the specified key
         * @param {string} key
         * @returns {Promise}
         */

      }, {
        key: "del",
        value: function del(key) {
          var _this = this;

          return new _promise.default(function (resolve) {
            loggers.get(_this).info("local-storage-store-adapter: deleting `".concat(key, "`"));

            var data = _this._load();

            (0, _deleteProperty.default)(data, key);

            _this._save(data);

            resolve();
          });
        }
        /**
         * Retrieves the data at the specified key
         * @param {string} key
         * @returns {Promise<mixed>}
         */

      }, {
        key: "get",
        value: function get(key) {
          var _this2 = this;

          return new _promise.default(function (resolve, reject) {
            loggers.get(_this2).debug("local-storage-store-adapter: reading `".concat(key, "`"));

            var data = _this2._load();

            var value = data[key];

            if (typeof value !== 'undefined') {
              return resolve(value);
            }

            return reject(new _webexCore.NotFoundError("No value found for ".concat(key)));
          });
        }
        /**
         * Stores the specified value at the specified key
         * @param {string} key
         * @param {mixed} value
         * @returns {Promise}
         */

      }, {
        key: "put",
        value: function put(key, value) {
          var _this3 = this;

          return new _promise.default(function (resolve) {
            loggers.get(_this3).debug("local-storage-store-adapter: writing `".concat(key, "`"));

            var data = _this3._load();

            data[key] = value;

            _this3._save(data);

            resolve();
          });
        }
      }]);
      return _class;
    }();
  }
  /**
   * Returns an adapter bound to the specified namespace
   * @param {string} namespace
   * @param {Object} options
   * @returns {Promise<Bound>}
   */


  (0, _createClass2.default)(StorageAdapterLocalStorage, [{
    key: "bind",
    value: function bind(namespace, options) {
      options = options || {};

      if (!namespace) {
        return _promise.default.reject(new Error('`namespace` is required'));
      }

      if (!options.logger) {
        return _promise.default.reject(new Error('`options.logger` is required'));
      }

      options.logger.debug('local-storage-store-adapter: returning binding');
      return _promise.default.resolve(new this.Bound(namespace, options));
    }
  }]);
  return StorageAdapterLocalStorage;
}();

exports.default = StorageAdapterLocalStorage;
//# sourceMappingURL=index.js.map
