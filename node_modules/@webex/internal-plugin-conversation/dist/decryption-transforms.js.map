{"version":3,"sources":["decryption-transforms.js"],"names":["decryptTextProp","name","ctx","key","object","transform","transforms","decryptObject","undefined","resolve","objectType","encryptionKeyUrl","all","files","items","map","item","decryptSubmit","inputs","decryptionFailureMessage","webex","internal","conversation","config","then","JSON","parse","catch","reason","logger","warn","decryptReaction2summary","reactions","reaction","decryptReaction2selfsummary","decryptReaction2","decryptThread","threadObject","promises","childActivities","child","decryptConversation","activities","push","usableKey","error","url","avatarEncryptionKeyUrl","avatar","previous","previousValue","decryptActivity","activity","keyUrl","children","decryptMicroappinstance","microappInstance","decryptComment","comment","cards","index","decryptContent","content","contentCategory","decryptContentFiles","links","forEach","decryptContentLinks","decryptEvent","event","location","split","length","decryptFile","file","transcodedCollection","image","decryptLink","link","decryptTranscodedContent","transcodedContent","decryptImageURI","imageURI","encryption","decryptText","plaintext","keepEncryptedProperties","encryptedPropName","decryptPropCardItem","array","String","decryptPropScr","decryptScr","scr","decryptPropSslr","sslr","decryptPropDisplayName","decryptPropContent","decryptPropModel","decryptPropLocation"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {camelCase, capitalize, curry} from 'lodash';\n\nimport toArray from './to-array';\n\nconst decryptTextProp = curry((name, ctx, key, object) => ctx.transform('decryptTextProp', name, key, object));\n\n// eslint-disable-next-line import/prefer-default-export\nexport const transforms = toArray('inbound', {\n\n  /**\n   * This function is used recursively to decrypt various properties on convesations, activities, etc\n   * @param   {Object} ctx    An object containg a webex instance and a transform\n   * @param   {String} key    KMS encryption key url\n   * @param   {Object} object Generic object that you want to decrypt some property on based on the type\n   * @returns {Promise}       Returns a transform promise\n   */\n  decryptObject(ctx, key, object) {\n    if (!object) {\n      object = key; // eslint-disable-line no-param-reassign\n      key = undefined; // eslint-disable-line no-param-reassign\n    }\n\n    if (!object) {\n      return Promise.resolve();\n    }\n\n    if (!object.objectType) {\n      return Promise.resolve();\n    }\n\n    if (!key && object.encryptionKeyUrl) {\n      key = object.encryptionKeyUrl; // eslint-disable-line no-param-reassign\n    }\n\n    // Transcoded content was not showing up on the activities since the\n    // decryptFile was not being called. Calling decryptFile for\n    // transcodedContent fixes the issue.\n    if (object.objectType === 'transcodedContent') {\n      return Promise.all(object.files.items.map((item) => ctx.transform('decryptFile', key, item)));\n    }\n\n    return ctx.transform(`decrypt${capitalize(object.objectType)}`, key, object);\n  },\n\n  /**\n   * Decrypt an individual submit object from a cardAction activity\n   *   (object.objectType === 'sumbit')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex submit object\n   * these objects are returned when a user clicks on a Action.Submit button in a card\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptSubmit(ctx, key, object) {\n    if (!object.inputs) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.transform('decryptPropCardItem', 0, key, [object.inputs])\n      .then((inputs) => {\n        object.inputs = JSON.parse(inputs[0]); // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt attachmentAction.inputs: ${reason}`);\n        object.inputs = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n\n  /**\n   * Decrypt an individual reaction2Summary activity (object.objectType === 'reaction2Summary')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex reaction2Summary object\n   * these objects are returned by various conversation APIs and over mercury\n   * represents an aggregated summary of all reactions to a specific activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2summary(ctx, key, object) {\n    if (!object.reactions) {\n      return Promise.resolve();\n    }\n\n    return Promise.all(object.reactions.map((reaction) => ctx.transform('decryptPropDisplayName', key, reaction)));\n  },\n\n  /**\n   * Decrypt an individual reaction2SelfSummary activity (object.objectType === 'reaction2SelfSummary')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex reaction2SelfSummary object\n   * these objects are returned by various conversation APIs and NOT over mercury\n   * they are ONLY received by the self user\n   * they represent ONLY the self user's reactions and are used for enforcing\n   * limit of times they can react to a specific activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2selfsummary(ctx, key, object) {\n    if (!object.reactions) {\n      return Promise.resolve();\n    }\n\n    return Promise.all(object.reactions.map((reaction) => ctx.transform('decryptPropDisplayName', key, reaction)));\n  },\n\n  /**\n   * Decrypt an individual reaction2 activity (object.objectType === 'reaction2')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex reaction2 object\n   * these objects are returned by various conversation APIs and over mercury\n   * ONLY self users receive these objects\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2(ctx, key, object) {\n    return ctx.transform('decryptPropDisplayName', key, object);\n  },\n\n  /**\n * Decrypt an individual threadObject\n * @param   {Object} ctx      An object containg a webex instance and a transform\n * @param   {Object} threadObject An instance of a Webex threadObject (the objects returned by the /conversation/api/v1/threads api)\n * @returns {Promise}         Returns a ctx.transform promise\n */\n  decryptThread(ctx, threadObject) {\n    let promises = [];\n\n    if (threadObject.childActivities && Array.isArray(threadObject.childActivities)) {\n      promises = threadObject.childActivities.map((child) => ctx.transform('decryptObject', null, child));\n    }\n\n    return Promise.all(promises);\n  },\n\n\n  /**\n   * Decrypts a given conversation and it's activites by building an array of promises that call\n   * decryptObject, which may then call other decrypt functions\n   *\n   * @param   {Object} ctx          An object containg a webex instance and a transform\n   * @param   {String} key          KMS encryption key url (or actual key?)\n   * @param   {Object} conversation A Webex conversation object\n   * @returns {Promise}             Returns the result of Promise.all\n   */\n  decryptConversation(ctx, key, conversation) {\n    const promises = [];\n\n    if (conversation.activities.items) {\n      promises.push(Promise.all(conversation.activities.items.map((item) => ctx.transform('decryptObject', null, item))));\n    }\n\n    const usableKey = conversation.encryptionKeyUrl || key;\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    if (usableKey) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation)\n        .catch((error) => {\n          ctx.webex.logger.warn('plugin-conversation: failed to decrypt display name of ', conversation.url, error);\n          Promise.resolve(decryptionFailureMessage);\n        }));\n      promises.push(ctx.transform('decryptPropContent', usableKey, conversation));\n    }\n    if (conversation.avatarEncryptionKeyUrl) {\n      promises.push(ctx.transform('decryptObject', conversation.avatarEncryptionKeyUrl, conversation.avatar));\n    }\n    // TODO (holsted 04/06/19): This was deprecated in favor of .previousValue below. I wanted to remove this entirely\n    // but I wasn't sure if some open source use cases may be reading from cached conversations or not so leaving it for now.\n    if (conversation.previous) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation.previous));\n    }\n    if (conversation.previousValue) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation.previousValue));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypt an individual activity\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS encryption key url (or actual key?)\n   * @param   {Object} activity An instance of a Webex activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptActivity(ctx, key, activity) {\n    if (!activity.encryptionKeyUrl && !(activity.object && activity.object.encryptionKeyUrl)) {\n      return Promise.resolve(activity);\n    }\n\n    const keyUrl = activity.encryptionKeyUrl || activity.object.encryptionKeyUrl || key;\n\n    let promises = [];\n\n    // iterate and recursively decrypt over children objects\n\n    if (activity.children && Array.isArray(activity.children)) {\n      promises = activity.children.map((child) => ctx.transform('decryptObject', keyUrl, child.activity));\n    }\n\n    promises.push(ctx.transform('decryptObject', keyUrl, activity.object));\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a microappInstance (recording) model\n   * @param   {Object} ctx                     An object containing a webex instance and transform prop\n   * @param   {String} key                     KMS key\n   * @param   {Object} microappInstance        A microappInstance which includes several properties of a recording\n   * @param   {String} microappInstance.model  An encrypted string which decrypts to an object\n   * @returns {Promise}                        Returns a contex transform\n   */\n  decryptMicroappinstance(ctx, key, microappInstance) {\n    return ctx.transform('decryptPropModel', key, microappInstance);\n  },\n\n  /**\n* Decrypts a comment...\n* @param {Object} ctx An object containing a webex instance and transform prop\n* @param {String} key KMS key\n* @param {Object} comment A comment object with a displayName and content (encrypted)\n* @returns {Promise} Returns the results of Promise.all on two transforms\n*/\n  decryptComment(ctx, key, comment) {\n    const promises = [\n      ctx.transform('decryptPropDisplayName', key, comment),\n      ctx.transform('decryptPropContent', key, comment)\n    ];\n\n    if (comment.cards && Array.isArray(comment.cards)) {\n      comment.cards.map((item, index) => promises.push(ctx.transform('decryptPropCardItem', index, key, comment.cards)));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a content field\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContent(ctx, key, content) {\n    if (content.contentCategory === 'links') {\n      return ctx.transform('decryptContentLinks', key, content);\n    }\n\n    return ctx.transform('decryptContentFiles', key, content);\n  },\n\n  /**\n   * Decrypts a content field which contains files and possibly links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.files  An array of files to decrypt by calling decryptObject\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentFiles(ctx, key, content) {\n    if (!content.files || !content.files.items || !Array.isArray(content.files.items)) {\n      return Promise.resolve();\n    }\n\n    const promises = content.files.items.map((item) => ctx.transform('decryptObject', key, item));\n\n    promises.push(ctx.transform('decryptComment', key, content));\n\n    if (content.links && content.links.items && Array.isArray(content.links.items)) {\n      content.links.items.forEach((item) => promises.push(ctx.transform('decryptObject', key, item)));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a content field which contains links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentLinks(ctx, key, content) {\n    if (!content.links || !content.links.items || !Array.isArray(content.links.items)) {\n      return Promise.resolve();\n    }\n\n    const promises = content.links.items.map((item) => ctx.transform('decryptObject', key, item));\n\n    promises.push(ctx.transform('decryptComment', key, content));\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts what may be a meeting event?\n   * @param   {Object} ctx   An object containing a webex instance and transform prop\n   * @param   {String} key   KMS key\n   * @param   {Object} event An object with a display name and location to be decrypted\n   * @returns {Promise}      Returns the result of Promise.all\n   */\n  decryptEvent(ctx, key, event) {\n    const promises = [\n      ctx.transform('decryptPropDisplayName', key, event)\n    ];\n\n    if (event.location && event.location.split('.').length === 5) {\n      promises.push(ctx.transform('decryptPropLocation', key, event));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} file A file object with file props an optional transcodedCollection to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptFile(ctx, key, file) {\n    // using object encryption keyUrl for images instead of activity encryptionKeyUrl\n    if (file.encryptionKeyUrl && file.encryptionKeyUrl !== key) {\n      key = file.encryptionKeyUrl;\n    }\n\n    return Promise.all([\n      file.transcodedCollection && Promise.all(file.transcodedCollection.items.map((item) => ctx.transform('decryptObject', key, item))),\n      ctx.transform('decryptPropScr', key, file),\n      ctx.transform('decryptPropDisplayName', key, file),\n      ctx.transform('decryptPropContent', key, file),\n      file.image && ctx.transform('decryptPropScr', key, file.image)\n    ]);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} link A link object with a URL to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptLink(ctx, key, link) {\n    return Promise.all([\n      ctx.transform('decryptPropSslr', key, link),\n      ctx.transform('decryptPropDisplayName', key, link)\n    ]);\n  },\n\n  /**\n   * Decrypts transcoded file content. Calls decryptFile\n   * @param   {Object} ctx               An object containing a webex instance and transform prop\n   * @param   {String} key               KMS key\n   * @param   {Object} transcodedContent Transcoded content with a files prop\n   * @returns {Promise}                  Returns the result of Promise.all\n   */\n  decryptTranscodedContent(ctx, key, transcodedContent) {\n    return Promise.all(transcodedContent.files.items.map((item) => ctx.transform('decryptFile', key, item)));\n  },\n\n  /**\n   * Decrypts an image uri\n   * @param   {Object} ctx       An object containing a webex instance and transform prop\n   * @param   {String} key       KMS key\n   * @param   {String} imageURI  URI of the image to decrypt\n   * @returns {Promise}          Returns a promise.\n   */\n  decryptImageURI(ctx, key, imageURI) {\n    return ctx.transform('decryptPropLocation', key, imageURI);\n  },\n\n  /**\n   * The heart of most decryption logic ends here. Decrypting text.\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} name   Property of an object to be decrypted\n   * @param   {String} key    KMS key\n   * @param   {Object} object A generic object with text props to be decrypted\n   * @returns {Promise}       Returns a lonely Promise\n   */\n  decryptTextProp(ctx, name, key, object) {\n    if (!object[name]) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.webex.internal.encryption.decryptText(key, object[name])\n      .then((plaintext) => {\n        if (ctx.webex.config.conversation.keepEncryptedProperties) {\n          const encryptedPropName = camelCase(`encrypted_${name}`);\n\n          object[encryptedPropName] = object[name]; // eslint-disable-line no-param-reassign\n        }\n\n        object[name] = plaintext; // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt ${name} `, reason);\n        object[name] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n\n  /**\n* Decrypting an element in an Array.\n* @param {Object} ctx An object containing a webex instance and transform prop\n* @param {Integer} index Property of an object to be decrypted\n* @param {String} key KMS key\n* @param {Array} array An array of Strings to be decrypted\n* @returns {Promise} Returns a lonely Promise\n*/\n  decryptPropCardItem(ctx, index, key, array) {\n    if (!Number.isInteger(index) || !array || !Array.isArray(array) || index < 0 || index >= array.length || !(array[index] instanceof String || typeof array[index] === 'string')) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.webex.internal.encryption.decryptText(key, array[index])\n      .then((plaintext) => {\n        array[index] = plaintext; // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt card at ${index} `, reason);\n        array[index] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n  /**\n   * Decrypts the src of an object (for images?)\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a scr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropScr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.scr)\n      .then((scr) => {\n        object.scr = scr; // eslint-disable-line no-param-reassign\n      });\n  },\n\n  /**\n   * Decrypts the sslr object\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a sslr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropSslr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.sslr)\n      .then((sslr) => {\n        object.sslr = sslr; // eslint-disable-line no-param-reassign\n      });\n  },\n\n  decryptPropDisplayName: decryptTextProp('displayName'),\n\n  decryptPropContent: decryptTextProp('content'),\n\n  decryptPropModel: decryptTextProp('model'),\n\n  decryptPropLocation: decryptTextProp('location')\n});\n"]}