"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var _has2 = _interopRequireDefault(require("lodash/has"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _util = _interopRequireDefault(require("util"));

var _httpCore = require("@webex/http-core");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * @class
 */
var RequestLoggerInterceptor = /*#__PURE__*/function (_Interceptor) {
  (0, _inherits2.default)(RequestLoggerInterceptor, _Interceptor);

  var _super = _createSuper(RequestLoggerInterceptor);

  function RequestLoggerInterceptor() {
    (0, _classCallCheck2.default)(this, RequestLoggerInterceptor);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(RequestLoggerInterceptor, [{
    key: "onRequest",
    value:
    /**
     * @see Interceptor#onRequest
     * @param {Object} options
     * @returns {Object}
     */
    function onRequest(options) {
      var logger = (0, _get2.default)(this, 'webex.logger', console);
      logger.info('/**********************************************************************\\ ');
      logger.info('Request:', options.method || 'GET', options.uri);
      logger.info('WEBEX_TRACKINGID: ', (0, _get2.default)(options, 'headers.trackingid'));
      /* istanbul ignore next */

      if ((0, _has2.default)(options, 'headers.x-trans-id')) {
        logger.info('X-Trans-ID: ', (0, _get2.default)(options, 'headers.x-trans-id'));
      }

      var now = new Date();

      if (process.env.ENABLE_VERBOSE_NETWORK_LOGGING) {
        logger.info('timestamp (start): ', now.getTime(), now.toISOString());

        try {
          // Determine if body is a buffer without relying on Buffer to avoid
          // node/browser conflicts.
          if (options.body && options.body.length && !(0, _isArray2.default)(options.body) && !(0, _isString2.default)(options.body)) {
            logger.info('Request Options:', _util.default.inspect((0, _omit2.default)(options, 'body'), {
              depth: null
            }));
          } else {
            logger.info('Request Options:', _util.default.inspect(options, {
              depth: null
            }));
          }
        } catch (e) {
          logger.warn('Could not stringify request options:', e);
        }
      }

      return _promise.default.resolve(options);
    }
    /**
     * @see Interceptor#onRequest
     * @param {Object} options
     * @param {Error} reason
     * @returns {Object}
     */

  }, {
    key: "onRequestError",
    value: function onRequestError(options, reason) {
      // We need to do the normal onRequest logging, but then log how the request
      // failed since the response logger won't be called.
      this.onRequest(options);
      var logger = (0, _get2.default)(this, 'webex.logger', console);
      logger.error('Request Failed: ', reason.stack);
      logger.info('\\**********************************************************************/');
      return _promise.default.reject(reason);
    }
  }], [{
    key: "create",
    value:
    /**
     * @returns {RequestLoggerInterceptor}
     */
    function create() {
      return new RequestLoggerInterceptor({
        webex: this
      });
    }
  }]);
  return RequestLoggerInterceptor;
}(_httpCore.Interceptor);

exports.default = RequestLoggerInterceptor;
//# sourceMappingURL=request-logger.js.map
