{"version":3,"sources":["webex-tracking-id.js"],"names":["sequenceNumbers","WebexTrackingIdInterceptor","sq","get","set","options","headers","trackingid","requiresTrackingId","webex","sessionId","sequence","replayCount","tid","split","join","Interceptor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;;;AAEA,IAAMA,eAAe,GAAG,sBAAxB;AAEA;AACA;AACA;;IACqBC,0B;;;;;;;;;;;;;AACnB;AACF;AACA;AACA;AACE,mBAAe;AACb,UAAIC,EAAE,GAAGF,eAAe,CAACG,GAAhB,CAAoB,IAApB,KAA6B,CAAtC;AAEAD,MAAAA,EAAE,IAAI,CAAN;AACAF,MAAAA,eAAe,CAACI,GAAhB,CAAoB,IAApB,EAA0BF,EAA1B;AAEA,aAAOA,EAAP;AACD;AAED;AACF;AACA;;;;;AAKE;AACF;AACA;AACA;AACA;AACE,uBAAUG,OAAV,EAAmB;AACjBA,MAAAA,OAAO,CAACC,OAAR,GAAkBD,OAAO,CAACC,OAAR,IAAmB,EAArC,CADiB,CAEjB;;AACA,UAAI,gBAAgBD,OAAO,CAACC,OAA5B,EAAqC;AACnC;AACA;AACA,YAAI,CAACD,OAAO,CAACC,OAAR,CAAgBC,UAArB,EAAiC;AAC/B,uCAAuBF,OAAO,CAACC,OAA/B,EAAwC,YAAxC;AACD;;AAED,eAAOD,OAAP;AACD;;AAED,UAAI,KAAKG,kBAAL,CAAwBH,OAAxB,CAAJ,EAAsC;AACpCA,QAAAA,OAAO,CAACC,OAAR,CAAgBC,UAAhB,aAAgC,KAAKE,KAAL,CAAWC,SAA3C,cAAwD,KAAKC,QAA7D;AACD;;AAED,UAAIN,OAAO,CAACC,OAAR,CAAgBC,UAAhB,IAA8BF,OAAO,CAACO,WAA1C,EAAuD;AACrD,YAAMC,GAAG,GAAGR,OAAO,CAACC,OAAR,CAAgBC,UAAhB,CAA2BO,KAA3B,CAAiC,GAAjC,CAAZ;AAEAD,QAAAA,GAAG,CAAC,CAAD,CAAH,GAASR,OAAO,CAACO,WAAjB;AACAP,QAAAA,OAAO,CAACC,OAAR,CAAgBC,UAAhB,GAA6BM,GAAG,CAACE,IAAJ,CAAS,GAAT,CAA7B;AACD;;AAED,aAAOV,OAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,4BAAmBA,OAAnB,EAA4B;AAC1B,aAAO,CAACA,OAAO,CAACC,OAAR,CAAgBC,UAAxB;AACD;;;WA3CD,kBAAgB;AACd,aAAO,IAAIN,0BAAJ,CAA+B;AAACQ,QAAAA,KAAK,EAAE;AAAR,OAA/B,CAAP;AACD;;;EAnBqDO,qB","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Interceptor} from '@webex/http-core';\n\nconst sequenceNumbers = new WeakMap();\n\n/**\n * @class\n */\nexport default class WebexTrackingIdInterceptor extends Interceptor {\n  /**\n   * Sequence number; increments on access\n   * @type {Number}\n   */\n  get sequence() {\n    let sq = sequenceNumbers.get(this) || 0;\n\n    sq += 1;\n    sequenceNumbers.set(this, sq);\n\n    return sq;\n  }\n\n  /**\n   * @returns {WebexTrackingIdInterceptor}\n   */\n  static create() {\n    return new WebexTrackingIdInterceptor({webex: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    options.headers = options.headers || {};\n    // If trackingid is already set, don't overwrite it\n    if ('trackingid' in options.headers) {\n      // If trackingid is set to null, false, or undefined, delete it to\n      // prevent a CORS preflight.\n      if (!options.headers.trackingid) {\n        Reflect.deleteProperty(options.headers, 'trackingid');\n      }\n\n      return options;\n    }\n\n    if (this.requiresTrackingId(options)) {\n      options.headers.trackingid = `${this.webex.sessionId}_${this.sequence}`;\n    }\n\n    if (options.headers.trackingid && options.replayCount) {\n      const tid = options.headers.trackingid.split('+');\n\n      tid[1] = options.replayCount;\n      options.headers.trackingid = tid.join('+');\n    }\n\n    return options;\n  }\n\n  /**\n   * Determines whether or not include a tracking id\n   * @param {Object} options\n   * @returns {boolean}\n   */\n  requiresTrackingId(options) {\n    return !options.headers.trackingid;\n  }\n}\n"]}