{"version":3,"sources":["request-event.js"],"names":["RequestEventInterceptor","options","logger","console","webex","trigger","error","warn","resolve","reason","reject","response","Interceptor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;AAEA;AACA;AACA;IACqBA,uB;;;;;;;;;;;;;AAQnB;AACF;AACA;AACA;AACA;AACE,uBAAUC,OAAV,EAAmB;AACjB,UAAMC,MAAM,GAAG,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEA,UAAI;AACF,aAAKC,KAAL,CAAWC,OAAX,CAAmB,eAAnB,EAAoCJ,OAApC;AACD,OAFD,CAGA,OAAOK,KAAP,EAAc;AACZJ,QAAAA,MAAM,CAACK,IAAP,CAAY,yCAAZ,EAAuDD,KAAvD;AACD;;AAED,aAAO,iBAAQE,OAAR,CAAgBP,OAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,wBAAeA,OAAf,EAAwBQ,MAAxB,EAAgC;AAC9B;AACA;AACA,UAAMP,MAAM,GAAG,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEA,UAAI;AACF,aAAKC,KAAL,CAAWC,OAAX,CAAmB,aAAnB,EAAkCJ,OAAlC,EAA2CQ,MAA3C;AACA,aAAKL,KAAL,CAAWC,OAAX,CAAmB,iBAAnB,EAAsCJ,OAAtC,EAA+CQ,MAA/C;AACD,OAHD,CAIA,OAAOH,KAAP,EAAc;AACZJ,QAAAA,MAAM,CAACK,IAAP,CAAY,uCAAZ,EAAqDD,KAArD;AACD;;AAED,aAAO,iBAAQI,MAAR,CAAeD,MAAf,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,oBAAWR,OAAX,EAAoBU,QAApB,EAA8B;AAC5B,UAAMT,MAAM,GAAG,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEA,UAAI;AACF,aAAKC,KAAL,CAAWC,OAAX,CAAmB,iBAAnB,EAAsCM,QAAQ,CAACV,OAA/C,EAAwDU,QAAxD;AACD,OAFD,CAGA,OAAOL,KAAP,EAAc;AACZJ,QAAAA,MAAM,CAACK,IAAP,CAAY,2CAAZ,EAAyDD,KAAzD;AACD;;AAED,aAAO,iBAAQE,OAAR,CAAgBG,QAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,yBAAgBV,OAAhB,EAAyBQ,MAAzB,EAAiC;AAC/B,UAAMP,MAAM,GAAG,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEA,UAAI;AACF,aAAKC,KAAL,CAAWC,OAAX,CAAmB,aAAnB,EAAkCJ,OAAlC,EAA2CQ,MAA3C;AACA,aAAKL,KAAL,CAAWC,OAAX,CAAmB,iBAAnB,EAAsCJ,OAAtC,EAA+CQ,MAA/C;AACD,OAHD,CAIA,OAAOH,KAAP,EAAc;AACZJ,QAAAA,MAAM,CAACK,IAAP,CAAY,2CAAZ,EAAyDD,KAAzD;AACD;;AAED,aAAO,iBAAQI,MAAR,CAAeD,MAAf,CAAP;AACD;;;;AApFD;AACF;AACA;AACE,sBAAgB;AACd,aAAO,IAAIT,uBAAJ,CAA4B;AAACI,QAAAA,KAAK,EAAE;AAAR,OAA5B,CAAP;AACD;;;EANkDQ,qB","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {get} from 'lodash';\nimport {Interceptor} from '@webex/http-core';\n\n/**\n * @class\n */\nexport default class RequestEventInterceptor extends Interceptor {\n  /**\n   * @returns {RequestEventInterceptor}\n   */\n  static create() {\n    return new RequestEventInterceptor({webex: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    const logger = get(this, 'webex.logger', console);\n\n    try {\n      this.webex.trigger('request:start', options);\n    }\n    catch (error) {\n      logger.warn('event handler for request:start failed ', error);\n    }\n\n    return Promise.resolve(options);\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {Object}\n   */\n  onRequestError(options, reason) {\n    // We need to do the normal onRequest logging, but then log how the request\n    // failed since the response logger won't be called.\n    const logger = get(this, 'webex.logger', console);\n\n    try {\n      this.webex.trigger('request:end', options, reason);\n      this.webex.trigger('request:failure', options, reason);\n    }\n    catch (error) {\n      logger.warn('event handler for request:end failed ', error);\n    }\n\n    return Promise.reject(reason);\n  }\n\n  /**\n   * @see Interceptor#onResponse\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Object}\n   */\n  onResponse(options, response) {\n    const logger = get(this, 'webex.logger', console);\n\n    try {\n      this.webex.trigger('request:success', response.options, response);\n    }\n    catch (error) {\n      logger.warn('event handler for request:success failed ', error);\n    }\n\n    return Promise.resolve(response);\n  }\n\n  /**\n   * @see Interceptor#onResponseError\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {Object}\n   */\n  onResponseError(options, reason) {\n    const logger = get(this, 'webex.logger', console);\n\n    try {\n      this.webex.trigger('request:end', options, reason);\n      this.webex.trigger('request:failure', options, reason);\n    }\n    catch (error) {\n      logger.warn('event handler for request:failure failed ', error);\n    }\n\n    return Promise.reject(reason);\n  }\n}\n"]}