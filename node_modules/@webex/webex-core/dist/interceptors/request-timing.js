"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _now = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/date/now"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _httpCore = require("@webex/http-core");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * @class
 */
var RequestTimingInterceptor = /*#__PURE__*/function (_Interceptor) {
  (0, _inherits2.default)(RequestTimingInterceptor, _Interceptor);

  var _super = _createSuper(RequestTimingInterceptor);

  function RequestTimingInterceptor() {
    (0, _classCallCheck2.default)(this, RequestTimingInterceptor);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(RequestTimingInterceptor, [{
    key: "onRequest",
    value:
    /**
     * @see Interceptor#onRequest
     * @param {Object} options
     * @returns {Object}
     */
    function onRequest(options) {
      options.$timings = options.$timings || {};
      options.$timings.requestStart = (0, _now.default)();
      return options;
    }
    /**
     * @see Interceptor#onRequestError
     * @param {Object} options
     * @returns {Object}
     */

  }, {
    key: "onRequestError",
    value: function onRequestError(options) {
      options.$timings.requestEnd = options.$timings.requestFail = (0, _now.default)();
      return _promise.default.reject(options);
    }
    /**
     * @see Interceptor#onResponse
     * @param {Object} options
     * @param {HttpResponse} response
     * @returns {Object}
     */

  }, {
    key: "onResponse",
    value: function onResponse(options, response) {
      options.$timings.requestEnd = (0, _now.default)();
      return _promise.default.resolve(response);
    }
    /**
     * @see Interceptor#onResponseError
     * @param {Object} options
     * @param {Error} reason
     * @returns {Object}
     */

  }, {
    key: "onResponseError",
    value: function onResponseError(options, reason) {
      options.$timings.requestEnd = options.$timings.requestFail = (0, _now.default)();
      return _promise.default.reject(reason);
    }
  }], [{
    key: "create",
    value:
    /**
     * @param {Object} options
     * @returns {RequestTimingInterceptor}
     */
    function create(options) {
      return new RequestTimingInterceptor(this, options);
    }
  }]);
  return RequestTimingInterceptor;
}(_httpCore.Interceptor);

exports.default = RequestTimingInterceptor;
//# sourceMappingURL=request-timing.js.map
