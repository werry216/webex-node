"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _deleteProperty = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/reflect/delete-property"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _clone2 = _interopRequireDefault(require("lodash/clone"));

var _httpCore = require("@webex/http-core");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var requestHeaderName = 'cisco-no-http-redirect';
var responseHeaderName = 'cisco-location';
var LOCUS_REDIRECT_ERROR = 2000002;
/**
 * @class
 */

var RedirectInterceptor = /*#__PURE__*/function (_Interceptor) {
  (0, _inherits2.default)(RedirectInterceptor, _Interceptor);

  var _super = _createSuper(RedirectInterceptor);

  function RedirectInterceptor() {
    (0, _classCallCheck2.default)(this, RedirectInterceptor);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(RedirectInterceptor, [{
    key: "onRequest",
    value:
    /**
     * @see Interceptor#onRequest
     * @param {Object} options
     * @returns {Object}
     */
    function onRequest(options) {
      if (options && options.uri && typeof options.uri === 'string') {
        if (options.uri.includes('https://idbroker') || options.uri.includes(this.webex.config.credentials.samlUrl) || options.uri.includes(this.webex.config.credentials.tokenUrl) || options.uri.includes(this.webex.config.credentials.authorizeUrl)) {
          return options;
        }
      } // If cisco-no-http-redirect is already set, don't overwrite it


      if (requestHeaderName in options.headers) {
        // If cisco-no-http-redirect is set to null, false, or undefined, delete
        // it to prevent a CORS preflight.
        if (!options.headers[requestHeaderName]) {
          (0, _deleteProperty.default)(options.headers, requestHeaderName);
        }

        return options;
      }

      options.headers[requestHeaderName] = true;
      options.$redirectCount = options.$redirectCount || 0;
      return options;
    }
    /**
     * @see Interceptor#onResponse
     * @param {Object} options
     * @param {HttpResponse} response
     * @returns {Object}
     */

  }, {
    key: "onResponse",
    value: function onResponse(options, response) {
      /* eslint-disable no-else-return */
      if (response.headers && response.headers[responseHeaderName]) {
        options = (0, _clone2.default)(options);
        options.uri = response.headers[responseHeaderName];
        options.$redirectCount += 1;

        if (options.$redirectCount > this.webex.config.maxAppLevelRedirects) {
          return _promise.default.reject(new Error('Maximum redirects exceeded'));
        }

        return this.webex.request(options);
      } else if (response.headers && response.body && response.body.errorCode === LOCUS_REDIRECT_ERROR && response.body.location) {
        options = (0, _clone2.default)(options);

        if (response.options && response.options.qs) {
          // for POST requests
          var newUrl = response.body.location.split('?');
          options.uri = newUrl[0]; // params are already present in the qs
        } else {
          // for GET requests
          options.uri = response.body.location;
        }

        options.$redirectCount += 1;

        if (options.$redirectCount > this.webex.config.maxLocusRedirects) {
          return _promise.default.reject(new Error('Maximum redirects exceeded'));
        }

        return this.webex.request(options);
      }
      /* eslint-enable no-else-return */


      return response;
    }
  }], [{
    key: "create",
    value:
    /**
     * @returns {RedirectInterceptor}
     */
    function create() {
      return new RedirectInterceptor({
        webex: this
      });
    }
  }]);
  return RedirectInterceptor;
}(_httpCore.Interceptor);

exports.default = RedirectInterceptor;
//# sourceMappingURL=redirect.js.map
