{"version":3,"sources":["webex-http-error.js"],"names":["WebexHttpError","res","message","HttpError","prototype","parse","enumerable","value","options","url","method","uri","service","toUpperCase","resource","headers","trackingid","writeable","retryAfter","makeSubTypes","TooManyRequests","BadRequest"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;;;AAEA;AACA;AACA;IACqBA,c;;;;;;;;;;;;;AACnB;AACF;AACA;AACA;AACA;AACA;AACE,mBAAMC,GAAN,EAAW;AACT,UAAIC,OAAO,GAAG,oBAAcC,oBAAUC,SAAV,CAAoBC,KAAlC,EAAyC,IAAzC,EAA+C,CAACJ,GAAD,CAA/C,CAAd;AAEA,mCAAuB,IAAvB,EAA6B,SAA7B,EAAwC;AACtCK,QAAAA,UAAU,EAAE,KAD0B;AAEtCC,QAAAA,KAAK,EAAEN,GAAG,CAACO;AAF2B,OAAxC;;AAKA,UAAI,KAAKA,OAAL,CAAaC,GAAjB,EAAsB;AACpBP,QAAAA,OAAO,gBAAS,KAAKM,OAAL,CAAaE,MAAtB,cAAgC,KAAKF,OAAL,CAAaC,GAA7C,CAAP;AACD,OAFD,MAGK,IAAI,KAAKD,OAAL,CAAaG,GAAjB,EAAsB;AACzBT,QAAAA,OAAO,gBAAS,KAAKM,OAAL,CAAaE,MAAtB,cAAgC,KAAKF,OAAL,CAAaG,GAA7C,CAAP;AACD,OAFI,MAGA;AACHT,QAAAA,OAAO,gBAAS,KAAKM,OAAL,CAAaE,MAAtB,cAAgC,KAAKF,OAAL,CAAaI,OAAb,CAAqBC,WAArB,EAAhC,cAAsE,KAAKL,OAAL,CAAaM,QAAnF,CAAP;AACD;;AACDZ,MAAAA,OAAO,mCAA4B,KAAKM,OAAL,CAAaO,OAAb,CAAqBC,UAAjD,CAAP;;AACA,UAAI,KAAKR,OAAL,CAAaO,OAAb,IAAwB,KAAKP,OAAL,CAAaO,OAAb,CAAqB,YAArB,CAA5B,EAAgE;AAC9Db,QAAAA,OAAO,4BAAqB,KAAKM,OAAL,CAAaO,OAAb,CAAqB,YAArB,CAArB,CAAP;AACD;;AACD,UAAI,KAAKA,OAAL,CAAa,aAAb,CAAJ,EAAiC;AAC/B,qCAAuB,IAAvB,EAA6B,YAA7B,EAA2C;AACzCT,UAAAA,UAAU,EAAE,IAD6B;AAEzCC,UAAAA,KAAK,EAAE,KAAKQ,OAAL,CAAa,aAAb,CAFkC;AAGzCE,UAAAA,SAAS,EAAE;AAH8B,SAA3C;AAMAf,QAAAA,OAAO,6BAAsB,KAAKgB,UAA3B,CAAP;AACD;;AACDhB,MAAAA,OAAO,IAAI,IAAX;AAEA,aAAOA,OAAP;AACD;;;EAxCyCC,mB;;;;AA2C5CA,oBAAUgB,YAAV,CAAuBnB,cAAvB;AAGA;AACA;AACA;;;IACMoB,e;;;;;;;;;;;EAAwBjB,oBAAUkB,U;;AAExClB,oBAAU,GAAV,IAAiBiB,eAAjB;AACAjB,oBAAUiB,eAAV,GAA4BA,eAA5B","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {HttpError} from '@webex/http-core';\n\n/**\n * Webex-specific http error class\n */\nexport default class WebexHttpError extends HttpError {\n  /**\n   * Very similar to {@link HttpError#parse()}, but additionally adds some\n   * useful headers to the message string\n   * @param {HttpResponse} res\n   * @returns {string}\n   */\n  parse(res) {\n    let message = Reflect.apply(HttpError.prototype.parse, this, [res]);\n\n    Reflect.defineProperty(this, 'options', {\n      enumerable: false,\n      value: res.options\n    });\n\n    if (this.options.url) {\n      message += `\\n${this.options.method} ${this.options.url}`;\n    }\n    else if (this.options.uri) {\n      message += `\\n${this.options.method} ${this.options.uri}`;\n    }\n    else {\n      message += `\\n${this.options.method} ${this.options.service.toUpperCase()}/${this.options.resource}`;\n    }\n    message += `\\nWEBEX_TRACKING_ID: ${this.options.headers.trackingid}`;\n    if (this.options.headers && this.options.headers['x-trans-id']) {\n      message += `\\nX-Trans-Id: ${this.options.headers['x-trans-id']}`;\n    }\n    if (this.headers['retry-after']) {\n      Reflect.defineProperty(this, 'retryAfter', {\n        enumerable: true,\n        value: this.headers['retry-after'],\n        writeable: false\n      });\n\n      message += `\\nRETRY-AFTER: ${this.retryAfter}`;\n    }\n    message += '\\n';\n\n    return message;\n  }\n}\n\nHttpError.makeSubTypes(WebexHttpError);\n\n\n/**\n * TooManyRequests\n */\nclass TooManyRequests extends HttpError.BadRequest {}\n\nHttpError[429] = TooManyRequests;\nHttpError.TooManyRequests = TooManyRequests;\n"]}