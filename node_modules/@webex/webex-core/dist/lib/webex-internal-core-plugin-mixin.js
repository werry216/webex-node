"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = mixinWebexInternalCorePlugins;

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _defineProperty = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/reflect/define-property"));

var _union2 = _interopRequireDefault(require("lodash/union"));

var _merge2 = _interopRequireDefault(require("lodash/merge"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var _has2 = _interopRequireDefault(require("lodash/has"));

var _get2 = _interopRequireDefault(require("lodash/get"));

/**
 * Mixes a plugin system into an AmpState object (specifically, into WebexCore)
 * @param {AmpState} State
 * @param {Object} config
 * @param {Object} interceptors
 * @returns {AmpState}
 */
function mixinWebexInternalCorePlugins(State, config, interceptors) {
  // eslint-disable-next-line complexity
  State.registerPlugin = function registerPlugin(name, constructor) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (State.prototype._children[name] && !options.replace) {
      return;
    }

    State.prototype._children[name] = constructor;

    if (options.proxies) {
      throw new Error('Proxies are not currently supported for private plugins');
    }

    if (options.interceptors) {
      (0, _keys.default)(options.interceptors).forEach(function (key) {
        interceptors[key] = options.interceptors[key];
      });
    }

    if (options.config) {
      (0, _merge2.default)(config, options.config);
    }

    if ((0, _has2.default)(options, 'payloadTransformer.predicates')) {
      config.payloadTransformer.predicates = config.payloadTransformer.predicates.concat((0, _get2.default)(options, 'payloadTransformer.predicates'));
    }

    if ((0, _has2.default)(options, 'payloadTransformer.transforms')) {
      config.payloadTransformer.transforms = config.payloadTransformer.transforms.concat((0, _get2.default)(options, 'payloadTransformer.transforms'));
    }

    if (options.onBeforeLogout) {
      config.onBeforeLogout = config.onBeforeLogout || [];
      var onBeforeLogout = (0, _isArray2.default)(options.onBeforeLogout) ? options.onBeforeLogout : [options.onBeforeLogout];
      onBeforeLogout.forEach(function (fn) {
        return config.onBeforeLogout.push({
          plugin: name,
          fn: fn
        });
      });
    } // Only mess with the plugin's derived properties if it's an amp-state plugin


    if (constructor.prototype._definition && constructor.prototype._definition.ready) {
      var _State$prototype$_der = State.prototype._derived.ready,
          fn = _State$prototype$_der.fn,
          depList = _State$prototype$_der.depList;
      var def = {
        deps: depList.concat("".concat(name, ".ready")),
        fn: fn
      };
      createDerivedProperty(State.prototype, 'ready', def);
    }
  };

  return State;
}
/**
 * Extracted from ampersand-state
 * @param {Object} modelProto
 * @param {string} name
 * @param {Object} definition
 * @private
 * @returns {undefined}
 */


function createDerivedProperty(modelProto, name, definition) {
  var def = modelProto._derived[name] = {
    fn: (0, _isFunction2.default)(definition) ? definition : definition.fn,
    cache: definition.cache !== false,
    depList: definition.deps || []
  }; // add to our shared dependency list

  def.depList.forEach(function (dep) {
    modelProto._deps[dep] = (0, _union2.default)(modelProto._deps[dep] || [], [name]);
  }); // defined a top-level getter for derived names

  (0, _defineProperty.default)(modelProto, name, {
    get: function get() {
      return this._getDerivedProperty(name);
    },
    set: function set() {
      throw new TypeError("`".concat(name, "` is a derived property, it can't be set directly."));
    }
  });
}
//# sourceMappingURL=webex-internal-core-plugin-mixin.js.map
