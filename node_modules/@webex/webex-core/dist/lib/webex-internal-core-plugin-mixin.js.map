{"version":3,"sources":["webex-internal-core-plugin-mixin.js"],"names":["mixinWebexInternalCorePlugins","State","config","interceptors","registerPlugin","name","constructor","options","prototype","_children","replace","proxies","Error","forEach","key","payloadTransformer","predicates","concat","transforms","onBeforeLogout","fn","push","plugin","_definition","ready","_derived","depList","def","deps","createDerivedProperty","modelProto","definition","cache","dep","_deps","get","_getDerivedProperty","set","TypeError"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {get, has, isArray, isFunction, merge, union} from 'lodash';\n\n/**\n * Mixes a plugin system into an AmpState object (specifically, into WebexCore)\n * @param {AmpState} State\n * @param {Object} config\n * @param {Object} interceptors\n * @returns {AmpState}\n */\nexport default function mixinWebexInternalCorePlugins(State, config, interceptors) {\n  // eslint-disable-next-line complexity\n  State.registerPlugin = function registerPlugin(name, constructor, options = {}) {\n    if (State.prototype._children[name] && !options.replace) {\n      return;\n    }\n\n    State.prototype._children[name] = constructor;\n\n    if (options.proxies) {\n      throw new Error('Proxies are not currently supported for private plugins');\n    }\n\n    if (options.interceptors) {\n      Object.keys(options.interceptors).forEach((key) => {\n        interceptors[key] = options.interceptors[key];\n      });\n    }\n\n    if (options.config) {\n      merge(config, options.config);\n    }\n\n    if (has(options, 'payloadTransformer.predicates')) {\n      config.payloadTransformer.predicates = config.payloadTransformer.predicates.concat(\n        get(options, 'payloadTransformer.predicates')\n      );\n    }\n\n    if (has(options, 'payloadTransformer.transforms')) {\n      config.payloadTransformer.transforms = config.payloadTransformer.transforms.concat(\n        get(options, 'payloadTransformer.transforms')\n      );\n    }\n\n    if (options.onBeforeLogout) {\n      config.onBeforeLogout = config.onBeforeLogout || [];\n      const onBeforeLogout = isArray(options.onBeforeLogout) ? options.onBeforeLogout : [options.onBeforeLogout];\n\n      onBeforeLogout.forEach((fn) =>\n        config.onBeforeLogout.push({\n          plugin: name,\n          fn\n        }));\n    }\n\n    // Only mess with the plugin's derived properties if it's an amp-state plugin\n    if (constructor.prototype._definition && constructor.prototype._definition.ready) {\n      const {fn, depList} = State.prototype._derived.ready;\n      const def = {\n        deps: depList.concat(`${name}.ready`),\n        fn\n      };\n\n      createDerivedProperty(State.prototype, 'ready', def);\n    }\n  };\n\n  return State;\n}\n\n/**\n * Extracted from ampersand-state\n * @param {Object} modelProto\n * @param {string} name\n * @param {Object} definition\n * @private\n * @returns {undefined}\n */\nfunction createDerivedProperty(modelProto, name, definition) {\n  const def = (modelProto._derived[name] = {\n    fn: isFunction(definition) ? definition : definition.fn,\n    cache: definition.cache !== false,\n    depList: definition.deps || []\n  });\n\n  // add to our shared dependency list\n  def.depList.forEach((dep) => {\n    modelProto._deps[dep] = union(modelProto._deps[dep] || [], [name]);\n  });\n\n  // defined a top-level getter for derived names\n  Reflect.defineProperty(modelProto, name, {\n    get() {\n      return this._getDerivedProperty(name);\n    },\n    set() {\n      throw new TypeError(`\\`${name}\\` is a derived property, it can't be set directly.`);\n    }\n  });\n}\n"]}