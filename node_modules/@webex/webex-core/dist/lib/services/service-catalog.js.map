{"version":3,"sources":["service-catalog.js"],"names":["ServiceCatalog","AmpState","extend","namespace","props","serviceGroups","discovery","override","preauth","postauth","signin","status","ready","collecting","isReady","allowedDomains","_getUrl","name","serviceGroup","serviceUrls","find","serviceUrl","_listServiceUrls","_loadServiceUrls","services","existingService","forEach","service","push","_unloadServiceUrls","splice","indexOf","clean","length","findClusterId","url","incomingUrlObj","Url","parse","serviceUrlObj","key","defaultUrl","hosts","host","hostname","id","homeCluster","undefined","findServiceFromClusterId","clusterId","priorityHost","identifiedServiceUrl","get","findServiceUrlFromUrl","findAllowedDomain","urlObj","allowedDomain","includes","getAllowedDomains","list","output","markFailedUrl","noPriorityHosts","failHost","setAllowedDomains","updateServiceUrls","serviceHostmap","currentServiceUrls","unusedUrls","filter","every","item","serviceObj","ServiceUrl","trigger","waitForCatalog","timeout","resolve","reject","timeoutTimer","setTimeout","Error","once","clearTimeout"],"mappings":"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","sourcesContent":["import Url from 'url';\n\nimport AmpState from 'ampersand-state';\n\nimport ServiceUrl from './service-url';\n\n/* eslint-disable no-underscore-dangle */\n/**\n * @class\n */\nconst ServiceCatalog = AmpState.extend({\n  namespace: 'ServiceCatalog',\n\n  props: {\n    serviceGroups: ['object', true, (() => ({\n      discovery: [],\n      override: [],\n      preauth: [],\n      postauth: [],\n      signin: []\n    }))],\n    status: ['object', true, (() => ({\n      discovery: {\n        ready: false,\n        collecting: false\n      },\n      override: {\n        ready: false,\n        collecting: false\n      },\n      preauth: {\n        ready: false,\n        collecting: false\n      },\n      postauth: {\n        ready: false,\n        collecting: false\n      },\n      signin: {\n        ready: false,\n        collecting: false\n      }\n    }))],\n    isReady: ['boolean', false, false],\n    allowedDomains: ['array', false, (() => [])]\n  },\n\n  /**\n   * @private\n   * Search the service url array to locate a `ServiceUrl`\n   * class object based on its name.\n   * @param {string} name\n   * @param {string} [serviceGroup]\n   * @returns {ServiceUrl}\n   */\n  _getUrl(name, serviceGroup) {\n    const serviceUrls = (typeof serviceGroup === 'string') ?\n      this.serviceGroups[serviceGroup] || [] :\n      [\n        ...this.serviceGroups.override,\n        ...this.serviceGroups.postauth,\n        ...this.serviceGroups.signin,\n        ...this.serviceGroups.preauth,\n        ...this.serviceGroups.discovery\n      ];\n\n    return serviceUrls.find((serviceUrl) => serviceUrl.name === name);\n  },\n\n  /**\n   * @private\n   * Generate an array of `ServiceUrl`s that is organized from highest auth\n   * level to lowest auth level.\n   * @returns {Array<ServiceUrl>} - array of `ServiceUrl`s\n   */\n  _listServiceUrls() {\n    return [\n      ...this.serviceGroups.override,\n      ...this.serviceGroups.postauth,\n      ...this.serviceGroups.signin,\n      ...this.serviceGroups.preauth,\n      ...this.serviceGroups.discovery\n    ];\n  },\n\n  /**\n   * @private\n   * Safely load one or more `ServiceUrl`s into this `Services` instance.\n   * @param {string} serviceGroup\n   * @param  {Array<ServiceUrl>} services\n   * @returns {Services}\n   */\n  _loadServiceUrls(serviceGroup, services) {\n    // declare namespaces outside of loop\n    let existingService;\n\n    services.forEach((service) => {\n      existingService = this._getUrl(service.name, serviceGroup);\n\n      if (!existingService) {\n        this.serviceGroups[serviceGroup].push(service);\n      }\n    });\n\n    return this;\n  },\n\n  /**\n   * @private\n   * Safely unload one or more `ServiceUrl`s into this `Services` instance\n   * @param {string} serviceGroup\n   * @param  {Array<ServiceUrl>} services\n   * @returns {Services}\n   */\n  _unloadServiceUrls(serviceGroup, services) {\n    // declare namespaces outside of loop\n    let existingService;\n\n    services.forEach((service) => {\n      existingService = this._getUrl(service.name, serviceGroup);\n\n      if (existingService) {\n        this.serviceGroups[serviceGroup].splice(\n          this.serviceGroups[serviceGroup].indexOf(existingService), 1\n        );\n      }\n    });\n\n    return this;\n  },\n\n  /**\n   * Clear all collected catalog data and reset catalog status.\n   *\n   * @returns {void}\n   */\n  clean() {\n    this.serviceGroups.preauth.length = 0;\n    this.serviceGroups.signin.length = 0;\n    this.serviceGroups.postauth.length = 0;\n    this.status.preauth = {ready: false};\n    this.status.signin = {ready: false};\n    this.status.postauth = {ready: false};\n  },\n\n  /**\n   * Search over all service groups to find a cluster id based\n   * on a given url.\n   * @param {string} url - Must be parsable by `Url`\n   * @returns {string} - ClusterId of a given url\n   */\n  findClusterId(url) {\n    const incomingUrlObj = Url.parse(url);\n    let serviceUrlObj;\n\n    for (const key of Object.keys(this.serviceGroups)) {\n      for (const service of this.serviceGroups[key]) {\n        serviceUrlObj = Url.parse(service.defaultUrl);\n\n        for (const host of service.hosts) {\n          if (incomingUrlObj.hostname === host.host && host.id) {\n            return host.id;\n          }\n        }\n\n        if (serviceUrlObj.hostname === incomingUrlObj.hostname &&\n          service.hosts.length > 0) {\n          // no exact match, so try to grab the first home cluster\n          for (const host of service.hosts) {\n            if (host.homeCluster) {\n              return host.id;\n            }\n          }\n\n          // no match found still, so return the first entry\n          return service.hosts[0].id;\n        }\n      }\n    }\n\n    return undefined;\n  },\n\n  /**\n   * Search over all service groups and return a service value from a provided\n   * clusterId. Currently, this method will return either a service name, or a\n   * service url depending on the `value` parameter. If the `value` parameter\n   * is set to `name`, it will return a service name to be utilized within the\n   * Services plugin methods.\n   * @param {object} params\n   * @param {string} params.clusterId - clusterId of found service\n   * @param {boolean} [params.priorityHost = true] - returns priority host url if true\n   * @param {string} [params.serviceGroup] - specify service group\n   * @returns {object} service\n   * @returns {string} service.name\n   * @returns {string} service.url\n   */\n  findServiceFromClusterId({clusterId, priorityHost = true, serviceGroup} = {}) {\n    const serviceUrls = (typeof serviceGroup === 'string') ?\n      this.serviceGroups[serviceGroup] || [] : [\n        ...this.serviceGroups.override,\n        ...this.serviceGroups.postauth,\n        ...this.serviceGroups.signin,\n        ...this.serviceGroups.preauth,\n        ...this.serviceGroups.discovery\n      ];\n\n    const identifiedServiceUrl = serviceUrls.find(\n      (serviceUrl) => serviceUrl.hosts.find(\n        (host) => host.id === clusterId\n      )\n    );\n\n    if (identifiedServiceUrl) {\n      return {\n        name: identifiedServiceUrl.name,\n        url: identifiedServiceUrl.get(priorityHost, clusterId)\n      };\n    }\n\n    return undefined;\n  },\n\n  /**\n   * Find a service based on the provided url.\n   * @param {string} url - Must be parsable by `Url`\n   * @returns {serviceUrl} - ServiceUrl assocated with provided url\n   */\n  findServiceUrlFromUrl(url) {\n    const incomingUrlObj = Url.parse(url);\n    const serviceUrls = [\n      ...this.serviceGroups.discovery,\n      ...this.serviceGroups.preauth,\n      ...this.serviceGroups.signin,\n      ...this.serviceGroups.postauth,\n      ...this.serviceGroups.override\n    ];\n\n    return serviceUrls.find(\n      (serviceUrl) => {\n        if (incomingUrlObj.hostname ===\n          Url.parse(serviceUrl.defaultUrl).hostname) {\n          return true;\n        }\n\n        if (serviceUrl.hosts.find((host) => host.host === incomingUrlObj.hostname)) {\n          return true;\n        }\n\n        return false;\n      }\n    );\n  },\n\n  /**\n   * Finds an allowed domain that matches a specific url.\n   *\n   * @param {string} url - The url to match the allowed domains against.\n   * @returns {string} - The matching allowed domain.\n   */\n  findAllowedDomain(url) {\n    const urlObj = Url.parse(url);\n\n    if (!urlObj.host) {\n      return undefined;\n    }\n\n    return this.allowedDomains.find(\n      (allowedDomain) => urlObj.host.includes(allowedDomain)\n    );\n  },\n\n  /**\n   * Get a service url from the current services list by name.\n   * @param {string} name\n   * @param {boolean} priorityHost\n   * @param {string} serviceGroup\n   * @returns {string}\n   */\n  get(name, priorityHost, serviceGroup) {\n    const serviceUrl = this._getUrl(name, serviceGroup);\n\n    return (serviceUrl) ? serviceUrl.get(priorityHost) : undefined;\n  },\n\n  /**\n   * Get the current allowed domains list.\n   *\n   * @returns {Array<string>} - the current allowed domains list.\n   */\n  getAllowedDomains() {\n    return [...this.allowedDomains];\n  },\n\n  /**\n   * Creates an object where the keys are the service names\n   * and the values are the service urls.\n   * @param {boolean} priorityHost - use the highest priority if set to `true`\n   * @param {string} [serviceGroup]\n   * @returns {Record<string, string>}\n   */\n  list(priorityHost, serviceGroup) {\n    const output = {};\n\n    const serviceUrls = (typeof serviceGroup === 'string') ?\n      this.serviceGroups[serviceGroup] || [] :\n      [\n        ...this.serviceGroups.discovery,\n        ...this.serviceGroups.preauth,\n        ...this.serviceGroups.signin,\n        ...this.serviceGroups.postauth,\n        ...this.serviceGroups.override\n      ];\n\n    if (serviceUrls) {\n      serviceUrls.forEach((serviceUrl) => {\n        output[serviceUrl.name] = serviceUrl.get(priorityHost);\n      });\n    }\n\n    return output;\n  },\n\n  /**\n   * Mark a priority host service url as failed.\n   * This will mark the host associated with the\n   * `ServiceUrl` to be removed from the its\n   * respective host array, and then return the next\n   * viable host from the `ServiceUrls` host array,\n   * or the `ServiceUrls` default url if no other priority\n   * hosts are available, or if `noPriorityHosts` is set to\n   * `true`.\n   * @param {string} url\n   * @param {boolean} noPriorityHosts\n   * @returns {string}\n   */\n  markFailedUrl(url, noPriorityHosts) {\n    const serviceUrl = this._getUrl(Object.keys(this.list()).find(\n      (key) => this._getUrl(key).failHost(url)\n    ));\n\n    if (!serviceUrl) {\n      return undefined;\n    }\n\n    return (noPriorityHosts) ? serviceUrl.get(false) : serviceUrl.get(true);\n  },\n\n  /**\n   * Set the allowed domains for the catalog.\n   *\n   * @param {Array<string>} allowedDomains - allowed domains to be assigned.\n   * @returns {void}\n   */\n  setAllowedDomains(allowedDomains) {\n    this.allowedDomains = [...allowedDomains];\n  },\n\n  /**\n   * Update the current list of `ServiceUrl`s against a provided\n   * service hostmap.\n   * @emits ServiceCatalog#preauthorized\n   * @emits ServiceCatalog#postauthorized\n   * @param {string} serviceGroup\n   * @param {object} serviceHostmap\n   * @returns {Services}\n   */\n  updateServiceUrls(serviceGroup, serviceHostmap) {\n    const currentServiceUrls = this.serviceGroups[serviceGroup];\n\n    const unusedUrls = currentServiceUrls.filter(\n      (serviceUrl) => serviceHostmap.every(\n        (item) => item.name !== serviceUrl.name\n      )\n    );\n\n    this._unloadServiceUrls(serviceGroup, unusedUrls);\n\n    serviceHostmap.forEach((serviceObj) => {\n      const service = this._getUrl(serviceObj.name, serviceGroup);\n\n      if (service) {\n        service.defaultUrl = serviceObj.defaultUrl;\n        service.hosts = serviceObj.hosts || [];\n      }\n      else {\n        this._loadServiceUrls(serviceGroup, [new ServiceUrl({\n          ...serviceObj\n        })]);\n      }\n    });\n\n    this.status[serviceGroup].ready = true;\n    this.trigger(serviceGroup);\n\n    return this;\n  },\n\n  /**\n   * Wait until the service catalog is available,\n   * or reject after a timeout of 60 seconds.\n   * @param {string} serviceGroup\n   * @param {number} [timeout] - in seconds\n   * @returns {Promise<void>}\n   */\n  waitForCatalog(serviceGroup, timeout) {\n    return new Promise((resolve, reject) => {\n      if (this.status[serviceGroup].ready) {\n        resolve();\n      }\n\n      const timeoutTimer = setTimeout(() => reject(\n        new Error(`services: timeout occured while waiting for '${serviceGroup}' catalog to populate`)\n      ), (timeout) ? timeout * 1000 : 60000);\n\n      this.once(serviceGroup, () => {\n        clearTimeout(timeoutTimer);\n        resolve();\n      });\n    });\n  }\n});\n/* eslint-enable no-underscore-dangle */\n\nexport default ServiceCatalog;\n"]}