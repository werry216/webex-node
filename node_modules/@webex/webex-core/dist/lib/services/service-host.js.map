{"version":3,"sources":["service-host.js"],"names":["ServiceHost","pto","validate","catalog","default","defaultUri","hostGroup","id","priority","uri","failed","replaced","includes","split","urlObj","Url","parse","host","port","format","undefined","name","url","throwError","msg","Error","SERVICE_CATALOGS","length"],"mappings":";;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;IACqBA,W;AACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,uBAAYC,GAAZ,EAAiB;AAAA;AACf;AACAD,IAAAA,WAAW,CAACE,QAAZ,CAAqBD,GAArB,EAFe,CAIf;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKE,OAAL,GAAeF,GAAG,CAACE,OAAnB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,OAAL,GAAeH,GAAG,CAACI,UAAnB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,SAAL,GAAiBL,GAAG,CAACK,SAArB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,EAAL,GAAUN,GAAG,CAACM,EAAd;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,QAAL,GAAgBP,GAAG,CAACO,QAApB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,GAAL,GAAWR,GAAG,CAACQ,GAAf,CAhEe,CAkEf;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,MAAL,GAAc,KAAd;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,QAAL,GAAgB,KAAhB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;SACE,eAAa;AACX;AACA,aAAQ,CAAC,KAAKD,MAAN,IAAgB,CAAC,KAAKC,QAA9B;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;SACE,eAAY;AACV,aAAO,KAAKP,OAAL,CAAaQ,QAAb,CAAsB,KAAKN,SAA3B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;SACE,eAAc;AACZ,aAAO,KAAKC,E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","sourcesContent":["import Url from 'url';\n\nimport {SERVICE_CATALOGS} from './constants';\n\n/**\n * The parameter transfer object for {@link ServiceHost#constructor}.\n *\n * @typedef {Object} ServiceHostConstructorPTO\n * @property {string} ServiceHostConstructorPTO.catalog - The host's catalog.\n * @property {string} ServiceHostConstructorPTO.defaultUri - The host's default.\n * @property {string} ServiceHostConstructorPTO.hostGroup - The host's group.\n * @property {string} ServiceHostConstructorPTO.id - The host's clusterId.\n * @property {number} ServiceHostConstructorPTO.priority - The host's priority.\n * @property {string} ServiceHostConstructorPTO.uri - The host's uri.\n */\n\n/**\n * The parameter transfer object for {@link ServiceHost#polyGenerate}.\n *\n * @typedef {Object} ServiceHostPolyGeneratePTO\n * @property {string} ServiceHostPolyGeneratePTO.catalog - The target catalog.\n * @property {string} ServiceHostPolyGeneratePTO.name - The service name.\n * @property {string} ServiceHostPolyGeneratePTO.url - The service url.\n */\n\n/**\n * @class\n * @classdesc - Manages a single service host and its associated data.\n */\nexport default class ServiceHost {\n  /**\n   * Generate a new {@link ServiceHost}.\n   *\n   * @public\n   * @constructor\n   * @memberof ServiceHost\n   * @param {ServiceHostConstructorPTO} pto\n   */\n  constructor(pto) {\n    // Validate the parameter transfer object.\n    ServiceHost.validate(pto);\n\n    // Map the parameter transfer object to the class object.\n    /**\n     * The catalog name that the {@link ServiceHost} is associated with.\n     *\n     * @instance\n     * @type {string}\n     * @public\n     * @memberof ServiceHost\n     */\n    this.catalog = pto.catalog;\n\n    /**\n     * The default URI for the {@link ServiceHost}.\n     *\n     * @instance\n     * @type {string}\n     * @public\n     * @memberof ServiceHost\n     */\n    this.default = pto.defaultUri;\n\n    /**\n     * The host group that the {@link ServiceHost} is associated with.\n     *\n     * @instance\n     * @type {string}\n     * @public\n     * @memberof ServiceHost\n     */\n    this.hostGroup = pto.hostGroup;\n\n    /**\n     * The cluster ID of the {@link ServiceHost}.\n     *\n     * @instance\n     * @type {string}\n     * @public\n     * @memberof ServiceHost\n     */\n    this.id = pto.id;\n\n    /**\n     * The priority value of the {@link ServiceHost}. The lower the number, the\n     * higher the priority.\n     *\n     * @instance\n     * @type {number}\n     * @public\n     * @memberof ServiceHost\n     */\n    this.priority = pto.priority;\n\n    /**\n     * The host uri of the {@link ServiceHost}.\n     *\n     * @instance\n     * @type {string}\n     * @public\n     * @memberof ServiceHost\n     */\n    this.uri = pto.uri;\n\n    // Generate flags.\n    /**\n     * If the {@link ServiceHost} is marked as failed.\n     *\n     * @instance\n     * @type {boolean}\n     * @protected\n     * @memberof ServiceHost\n     */\n    this.failed = false;\n\n    /**\n     * If the {@link ServiceHost} is marked as replaced.\n     *\n     * @instance\n     * @type {boolean}\n     * @protected\n     * @memberof ServiceHost\n     */\n    this.replaced = false;\n  }\n\n  /**\n   * If the {@link ServiceHost} is in an active state.\n   *\n   * @public\n   * @memberof ServiceHost\n   * @type {boolean} - `true` if the service is active and usable.\n   */\n  get active() {\n    // Validate that the `ServiceHost` was not marked as failed or replaced.\n    return (!this.failed && !this.replaced);\n  }\n\n  /**\n   * If the host is local to the user's cluster.\n   *\n   * @public\n   * @memberof ServiceHost\n   * @type {boolean} - If the host is local.\n   */\n  get local() {\n    return this.default.includes(this.hostGroup);\n  }\n\n  /**\n   * The service value.\n   *\n   * @public\n   * @memberof ServiceHost\n   * @type {string} - The service value.\n   */\n  get service() {\n    return this.id.split(':')[3];\n  }\n\n  /**\n   * The formatted url for the host.\n   *\n   * @public\n   * @memberof ServiceHost\n   * @type {string} - The service url.\n   */\n  get url() {\n    // Generate a url object from the default url.\n    const urlObj = Url.parse(this.default);\n\n    // Format the host of the generated url object.\n    urlObj.host = `${this.uri}${urlObj.port ? `:${urlObj.port}` : ''}`;\n\n    // Assign the formatted url to this.\n    return Url.format(urlObj);\n  }\n\n  /**\n   * Set one or more of the status properties of the class object.\n   *\n   * @public\n   * @memberof ServiceHost\n   * @param {Object} pto - The parameter transfer object.\n   * @property {boolean} [pto.failed] - The failed status to set.\n   * @property {boolean} [pto.replaced] - the replaced status to set.\n   * @returns {this}\n   */\n  setStatus({failed, replaced}) {\n    if (failed !== undefined) {\n      this.failed = failed;\n    }\n\n    if (replaced !== undefined) {\n      this.replaced = replaced;\n    }\n\n    return this;\n  }\n\n  /**\n   * Generate a service host using only a catalog, name, and URL.\n   *\n   * @public\n   * @static\n   * @memberof ServiceHost\n   * @param {ServiceHostPolyGeneratePTO} pto\n   * @returns {ServiceHost} - The generated service host.\n   */\n  static polyGenerate({catalog, name, url}) {\n    return new ServiceHost({\n      catalog,\n      defaultUri: url,\n      hostGroup: Url.parse(url).host,\n      id: (name) ? `poly-head:poly-group:poly-cluster:${name}` : undefined,\n      priority: 1,\n      uri: Url.parse(url).host\n    });\n  }\n\n  /**\n   * Validate that a constructor parameter transfer object is valid.\n   *\n   * @public\n   * @static\n   * @memberof ServiceHost\n   * @param {ServiceHostConstructorPTO} pto\n   * @throws - If the parameter transfer object is not valid.\n   * @returns {undefined}\n   */\n  static validate({\n    catalog,\n    defaultUri,\n    hostGroup,\n    id,\n    priority,\n    uri\n  }) {\n    // Generate error-throwing method.\n    const throwError = (msg) => {\n      throw new Error(`service-host: invalid constructor parameters, ${msg}`);\n    };\n\n    // Validate the catalog property.\n    if (!SERVICE_CATALOGS.includes(catalog)) {\n      throwError('\\'catalog\\' must be a string');\n    }\n\n    // Validate the `defaultUri` property.\n    if (typeof defaultUri !== 'string') {\n      throwError('\\'defaultUri\\' must be a string');\n    }\n\n    // Validate the `hostGroup` property.\n    if (typeof hostGroup !== 'string') {\n      throwError('\\'hostGroup\\' must be a string');\n    }\n\n    // Validate the `id` property.\n    if (typeof id !== 'string' || id.split(':').length !== 4) {\n      throwError('\\'id\\' must be a string that contains 3 \\':\\' characters');\n    }\n\n    // Validate the `priority` property.\n    if (typeof priority !== 'number') {\n      throwError('\\'priority\\' must be a number');\n    }\n\n    // Validate the `uri` property.\n    if (typeof uri !== 'string') {\n      throwError('\\'uri\\' must be a string');\n    }\n  }\n}\n"]}