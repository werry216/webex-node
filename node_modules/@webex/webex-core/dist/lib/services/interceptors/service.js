"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _httpCore = require("@webex/http-core");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var trailingSlashes = /(?:^\/)|(?:\/$)/;
/**
 * @class
 */

var ServiceInterceptor = /*#__PURE__*/function (_Interceptor) {
  (0, _inherits2.default)(ServiceInterceptor, _Interceptor);

  var _super = _createSuper(ServiceInterceptor);

  function ServiceInterceptor() {
    (0, _classCallCheck2.default)(this, ServiceInterceptor);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(ServiceInterceptor, [{
    key: "onRequest",
    value:
    /* eslint-disable no-param-reassign */

    /**
     * @see Interceptor#onRequest
     * @param {Object} options - The request PTO.
     * @returns {Object} - The mutated request PTO.
     */
    function onRequest(options) {
      var _this = this;

      // Validate that the PTO includes a uri property.
      if (options.uri) {
        return options;
      } // Normalize and validate the PTO.


      this.normalizeOptions(options);
      this.validateOptions(options); // Destructure commonly referenced namespaces.

      var services = this.webex.internal.services;
      var service = options.service,
          resource = options.resource; // Attempt to collect the service url.

      return services.waitForService({
        name: service
      }).then(function (serviceUrl) {
        // Generate the combined service url and resource.
        options.uri = _this.generateUri(serviceUrl, resource);
        return options;
      }).catch(function () {
        return _promise.default.reject(new Error("service-interceptor: '".concat(service, "' is not a known service")));
      });
    }
    /* eslint-disable class-methods-use-this */

    /**
     * Generate a usable request uri string from a service url and a resouce.
     *
     * @param {string} serviceUrl - The service url.
     * @param {string} [resource] - The resouce to be appended to the service url.
     * @returns {string} - The combined service url and resource.
     */

  }, {
    key: "generateUri",
    value: function generateUri(serviceUrl) {
      var resource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var formattedService = serviceUrl.replace(trailingSlashes, '');
      var formattedResource = resource.replace(trailingSlashes, '');
      return "".concat(formattedService, "/").concat(formattedResource);
    }
    /**
     * Normalizes request options relative to service identification.
     *
     * @param {Object} options - The request PTO.
     * @returns {Object} - The mutated request PTO.
     */

  }, {
    key: "normalizeOptions",
    value: function normalizeOptions(options) {
      // Validate if the api property is used.
      if (options.api) {
        // Assign the service property the value of the api property if necessary.
        options.service = options.service || options.api;
        delete options.api;
      }
    }
    /**
     * Validates that the appropriate options for this interceptor are present.
     *
     * @param {Object} options - The request PTO.
     * @returns {Object} - The mutated request PTO.
     */

  }, {
    key: "validateOptions",
    value: function validateOptions(options) {
      if (!options.resource) {
        throw new Error('a `resource` parameter is required');
      }

      if (!options.service) {
        throw new Error('a valid \'service\' parameter is required');
      }
    }
    /* eslint-enable class-methods-use-this no-param-reassign */

  }], [{
    key: "create",
    value:
    /**
     * @returns {ServiceInterceptor}
     */
    function create() {
      /* eslint no-invalid-this: [0] */
      return new ServiceInterceptor({
        webex: this
      });
    }
  }]);
  return ServiceInterceptor;
}(_httpCore.Interceptor);

exports.default = ServiceInterceptor;
//# sourceMappingURL=service.js.map
