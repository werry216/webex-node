{"version":3,"sources":["service-registry.js"],"names":["ServiceRegistry","hosts","find","active","local","priority","reduce","map","host","hostReference","service","url","filter","removing","includes","failing","forEach","setStatus","failed","catalog","catalogs","catalogId","mapCatalogName","id","type","SERVICE_CATALOGS_ENUM_TYPES","STRING","length","cluster","clusters","filteredHosts","currentHost","foundHost","hostGroup","push","foundHostCatalogPriority","NUMBER","currentHostCatalogPriority","splice","indexOf","services","urls","filterActive","filterCatalog","filterCluster","filterLocal","filterPriority","filterService","filterUrl","validHosts","loadableHost","ServiceHost","replacing","replaced","resetting","SERVICE_CATALOGS","undefined","hostCatalog","serviceLinks","catalogIndex","Error","output","key","defaultUri","split","uri"],"mappings":"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","sourcesContent":["import {\n  SERVICE_CATALOGS,\n  SERVICE_CATALOGS_ENUM_TYPES\n} from './constants';\nimport ServiceHost from './service-host';\n\n/**\n * The parameter transfer object for {@link ServiceRegistry#mapRemoteCatalog}.\n * This object is shaped to match the object returned from the **U2C** service.\n *\n * @typedef {Record<string, string>} RSL\n * @typedef {Record<string, Array<Record<string, number | string>>>} RHC\n *\n * @typedef {Object} MapRemoteCatalogPTO\n * @property {string} MapRemoteCatalogPTO.catalog - Service catalog name.\n * @property {RSL} MapRemoteCatalogPTO.serviceLinks - Service links.\n * @property {RHC} MapRemoteCatalogPTO.hostCatalog - Service host catalog.\n */\n\n/**\n * Service manipulation filter object for retrieving services within the\n * {@link ServiceRegistry} class.\n *\n * @typedef {Object} HostFilter\n * @property {boolean} [HostFilter.active] - Active state to filter.\n * @property {Array<string> | string} [HostFilter.catalog] - Catalogs to filter.\n * @property {Array<string> | string} [HostFilter.cluster] - Clusters to filter.\n * @property {boolean} [HostFilter.local] - Filter to the user's home cluster.\n * @property {boolean} [HostFilter.priority] - Filter for the highest priority.\n * @property {Array<string> | string} [HostFilter.service] - Services to filter.\n * @property {Array<string> | string} [HostFilter.url] - URL to filter.\n */\n\n/**\n * @class\n * @classdesc - Manages a collection of {@link ServiceHost} class objects.\n */\nexport default class ServiceRegistry {\n  /**\n   * Generate a new {@link ServiceHost}.\n   *\n   * @public\n   * @constructor\n   * @memberof ServiceHost\n   */\n  constructor() {\n    /**\n     * The collection of managed {@link ServiceHost}s.\n     *\n     * @instance\n     * @type {Array<ServiceHost>}\n     * @private\n     * @memberof ServiceRegistry\n     */\n    this.hosts = [];\n  }\n\n  /**\n   * An active, local, and priority mapped record of the current\n   * {@link ServiceCatalog#hosts}.\n   *\n   * @public\n   * @memberof ServiceCatalog\n   * @type {Record<string, string>}\n   */\n  get map() {\n    // Get a list of active, local, and priority-mapped hosts.\n    return this.find({\n      active: true,\n      local: true,\n      priority: true\n    }).reduce(\n      (map, host) => {\n        // Generate a new object to assign the existing map.\n        const hostReference = {};\n\n        // Assign the key:value pair for the service and url.\n        hostReference[host.service] = host.url;\n\n        // Assign the reference to the map and return.\n        return {...map, ...hostReference};\n      }, {}\n    );\n  }\n\n  /**\n   * Removes a collection of {@link ServiceHost} class objects from the\n   * {@link ServiceRegistry#hosts} array based on the provided\n   * {@link HostFilter}.\n   *\n   * @public\n   * @memberof ServiceRegistry\n   * @param {HostFilter} filter - The inclusive filter for hosts to remove.\n   * @returns {Array<ServiceHost>} - The removed {@link ServiceHost}s.\n   */\n  clear(filter) {\n    // Collect a list of hosts to remove based on the provided filter.\n    const removing = this.find(filter);\n\n    // Remove the hosts from the array.\n    this.hosts = this.hosts.filter(\n      (host) => !removing.includes(host)\n    );\n\n    // Return the removed hosts.\n    return removing;\n  }\n\n  /**\n   * Mark a collection of {@link ServiceHost} class objects from the\n   * {@link ServiceRegistry#hosts} array as failed based on the provided\n   * {@link HostFilter}.\n   *\n   * @public\n   * @memberof ServiceRegistry\n   * @param {HostFilter} filter - The inclusive filter for hosts to mark failed.\n   * @returns {Array<ServiceHost>} - The {@link ServiceHost}s marked failed.\n   */\n  failed(filter) {\n    // Collect a list of hosts to mark as failed based on the provided filter.\n    const failing = this.find(filter);\n\n    // Mark the hosts from the array as failed.\n    failing.forEach(\n      (host) => {\n        host.setStatus({failed: true});\n      }\n    );\n\n    // Return the marked hosts.\n    return failing;\n  }\n\n  /**\n   * Filter the {@link ServiceRegistry#hosts} array against their active states.\n   *\n   * @private\n   * @memberof ServiceRegistry\n   * @param {boolean} [active] - Filter for the host state.\n   * @returns {Array<ServiceHost>} - The filtered host array.\n   */\n  filterActive(active) {\n    // Filter the host array if the active requirement is true.\n    return (typeof active === 'boolean') ?\n      this.hosts.filter((host) => host.active === active) :\n      [...this.hosts];\n  }\n\n  /**\n   * Filter the {@link ServiceRegistry#hosts} array against their assigned\n   * catalog values.\n   *\n   * @private\n   * @memberof ServiceRegistry\n   * @param {Array<string> | string} [catalog] - Catalogs to filter.\n   * @returns {Array<ServiceHost>} - The filtered host array.\n   */\n  filterCatalog(catalog = []) {\n    // Generate a catalog names array based on the provided catalog param.\n    const catalogs = (Array.isArray(catalog) ? catalog : [catalog])\n      .map((catalogId) => ServiceRegistry.mapCatalogName({\n        id: catalogId,\n        type: SERVICE_CATALOGS_ENUM_TYPES.STRING\n      }) || catalogId);\n\n    // Filter the host array against the catalog names array.\n    return (catalogs.length > 0) ?\n      this.hosts.filter((host) => catalogs.includes(host.catalog)) :\n      [...this.hosts];\n  }\n\n  /**\n   * Filter the {@link ServiceRegistry#hosts} array against their assigned\n   * cluster values.\n   *\n   * @private\n   * @memberof ServiceRegistry\n   * @param {Array<string> | string} [cluster] - Clusters to filter for.\n   * @returns {Array<ServiceHost>} - The filtered host array.\n   */\n  filterCluster(cluster = []) {\n    // Generate an array of clusters regardless of parameter type.\n    const clusters = (Array.isArray(cluster) ? cluster : [cluster]);\n\n    // Filter the host array against the provided clusters.\n    return (clusters.length > 0) ?\n      this.hosts.filter((host) => clusters.includes(host.id)) :\n      [...this.hosts];\n  }\n\n  /**\n   * Filter the {@link ServiceRegistry#hosts} array against their location in\n   * reference to the authenticated user.\n   *\n   * @private\n   * @memberof ServiceRegistry\n   * @param {boolean} [local] - Filter for the host location.\n   * @returns {Array<ServiceHost>} - The filtered host array.\n   */\n  filterLocal(local) {\n    return (typeof local === 'boolean') ?\n      this.hosts.filter((host) => host.local === local) :\n      [...this.hosts];\n  }\n\n  /**\n   * Filter the {@link ServiceRegistry#hosts} array for the highest priority\n   * hosts for each specific service.\n   *\n   * @private\n   * @memberof ServiceRegistry\n   * @param {boolean} [priority] - Filter for the highest priority\n   * @returns {Array<ServiceHost>} - The filtered host array.\n   */\n  filterPriority(priority) {\n    return (priority) ?\n      this.hosts.reduce(\n        (filteredHosts, currentHost) => {\n          // Validate that the current host is not active.\n          if (!currentHost.active) {\n            return filteredHosts;\n          }\n\n          // Determine if the filtered hosts array contains a host from the same\n          // host group.\n          const foundHost = filteredHosts.find(\n            (host) => host.hostGroup === currentHost.hostGroup\n          );\n\n          // Validate if a host was found.\n          if (!foundHost) {\n            filteredHosts.push(currentHost);\n\n            return filteredHosts;\n          }\n\n          // Map the found host's catalog to its priority value.\n          const foundHostCatalogPriority = ServiceRegistry.mapCatalogName({\n            id: foundHost.catalog,\n            type: SERVICE_CATALOGS_ENUM_TYPES.NUMBER\n          });\n\n          // Map the current host's catalog to its priority value.\n          const currentHostCatalogPriority = ServiceRegistry.mapCatalogName({\n            id: currentHost.catalog,\n            type: SERVICE_CATALOGS_ENUM_TYPES.NUMBER\n          });\n\n          // Validate if the found host has a lower priority than the current\n          // host.\n          if (\n            foundHostCatalogPriority < currentHostCatalogPriority ||\n            foundHost.priority < currentHost.priority\n          ) {\n            filteredHosts.splice(filteredHosts.indexOf(foundHost, 1));\n            filteredHosts.push(currentHost);\n          }\n\n          return filteredHosts;\n        }, []\n      ) : [...this.hosts];\n  }\n\n  /**\n   * Filter the {@link ServiceRegistry#hosts} array for hosts with a specified\n   * set of service names.\n   *\n   * @private\n   * @memberof ServiceRegistry\n   * @param {Array<string> | string} [service] - Services to filter.\n   * @returns {Array<ServiceHost>} - The filtered host array.\n   */\n  filterService(service = []) {\n    // Generate an array of services regardless of parameter type.\n    const services = (Array.isArray(service) ? service : [service]);\n\n    // Filter the host array against the provided services.\n    return (services.length > 0) ?\n      this.hosts.filter((host) => services.includes(host.service)) :\n      [...this.hosts];\n  }\n\n  /**\n   * Filter the {@link ServiceRegistry#hosts} array for hosts with a specified\n   * set of URLs.\n   *\n   * @private\n   * @memberof ServiceRegistry\n   * @param {Array<string> | string} [url] - URL to filter.\n   * @returns {Array<ServiceHost>} - The filter host array.\n   */\n  filterUrl(url = []) {\n    // Generate an array of URLs regardless of the parameter type.\n    const urls = (Array.isArray(url) ? url : [url]);\n\n    // Filter the host array against the provided URLs.\n    return (urls.length > 0) ?\n      this.hosts.filter((host) => urls.includes(host.url)) :\n      [...this.hosts];\n  }\n\n  /**\n   * Get an array of {@link ServiceHost}s based on a provided\n   * {@link HostFilter} from the {@link ServiceRegistry#hosts} array.\n   *\n   * @public\n   * @memberof ServiceRegistry\n   * @param {HostFilter} [filter] - The inclusive filter for hosts to find.\n   * @returns {Array<ServiceHost>} - The filtered hosts.\n   */\n  find({\n    active,\n    catalog,\n    cluster,\n    local,\n    priority,\n    service,\n    url\n  } = {}) {\n    return this.hosts.filter(\n      (host) => (\n        this.filterActive(active).includes(host) &&\n        this.filterCatalog(catalog).includes(host) &&\n        this.filterCluster(cluster).includes(host) &&\n        this.filterLocal(local).includes(host) &&\n        this.filterPriority(priority).includes(host) &&\n        this.filterService(service).includes(host) &&\n        this.filterUrl(url).includes(host)\n      )\n    );\n  }\n\n  /**\n   * Load a formatted array of {@link ServiceHost} constructor parameter\n   * transfer objects as instances of {@link ServiceHost} class objects to the\n   * {@link ServiceRegistry#hosts} array.\n   *\n   * @public\n   * @memberof ServiceRegistry\n   * @param {Array<ServiceHost.ConstructorPTO>} hosts\n   * @returns {this}\n   */\n  load(hosts = []) {\n    // Validate that the provided hosts are eligible to be loaded.\n    const validHosts = hosts.filter((host) => !!(\n      ServiceRegistry.mapCatalogName({\n        id: host.catalog,\n        type: SERVICE_CATALOGS_ENUM_TYPES.STRING\n      })));\n\n    // Load the eligible hosts.\n    this.hosts.push(\n      ...validHosts.map((loadableHost) => new ServiceHost(loadableHost))\n    );\n\n    return this;\n  }\n\n  /**\n   * Mark a collection of {@link ServiceHost} class objects from the\n   * {@link ServiceRegistry#hosts} array as replaced based on the provided\n   * {@link HostFilter}.\n   *\n   * @public\n   * @memberof ServiceRegistry\n   * @param {HostFilter} filter - The inclusive filter to mark replaced.\n   * @returns {Array<ServiceHost>} - The {@link ServiceHost}s marked replaced.\n   */\n  replaced(filter) {\n    // Collect a list of hosts to mark as replaced based on the provided filter.\n    const replacing = this.find(filter);\n\n    // Mark the hosts from the array as replaced.\n    replacing.forEach(\n      (host) => {\n        host.setStatus({replaced: true});\n      }\n    );\n\n    // Return the marked hosts.\n    return replacing;\n  }\n\n  /**\n   * Reset the failed status of a collection of {@link ServiceHost} class\n   * objects from the {@link ServiceRegistry#hosts} array based on the provided\n   * {@link HostFilter}.\n   *\n   * @public\n   * @memberof ServiceRegistry\n   * @param {HostFilter} filter - The inclusive filter of hosts to reset.\n   * @returns {Array<ServiceHost>} - The {@link ServiceHost}s that reset.\n   */\n  reset(filter) {\n    // Collect a list of hosts to mark as replaced based on the provided filter.\n    const resetting = this.find(filter);\n\n    // Mark the hosts from the array as replaced.\n    resetting.forEach(\n      (host) => {\n        host.setStatus({failed: false});\n      }\n    );\n\n    // Return the marked hosts.\n    return resetting;\n  }\n\n  /**\n   * Convert a {@link SERVICE_CATALOGS} identifier or value to its associated\n   * idenfier or value.\n   *\n   * @public\n   * @static\n   * @memberof ServiceRegistry\n   * @param {Object} pto - The parameter transfer object.\n   * @property {string | number} pto.id - The identifier to convert in the enum.\n   * @property {SERVICE_CATALOGS_ENUM_TYPES} pto.type - The desired output.\n   * @returns {string|number} - The matching enum value or index.\n   */\n  static mapCatalogName({id, type}) {\n    // Validate that the id is a number.\n    if (typeof id === 'number') {\n      // Validate that the desired type is a number.\n      if (type === SERVICE_CATALOGS_ENUM_TYPES.NUMBER) {\n        return (SERVICE_CATALOGS[id] !== undefined) ? id : undefined;\n      }\n\n      // Validate that the desired type is a string.\n      if (type === SERVICE_CATALOGS_ENUM_TYPES.STRING) {\n        return SERVICE_CATALOGS[id];\n      }\n    }\n\n    // Validate that the id is a string.\n    if (typeof id === 'string') {\n      // Validate that the desired type is a string.\n      if (type === SERVICE_CATALOGS_ENUM_TYPES.STRING) {\n        return SERVICE_CATALOGS.includes(id) ? id : undefined;\n      }\n\n      // Validate that the desired type is a number.\n      if (type === SERVICE_CATALOGS_ENUM_TYPES.NUMBER) {\n        return (SERVICE_CATALOGS.includes(id)) ?\n          SERVICE_CATALOGS.indexOf(id) :\n          undefined;\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Generate a formatted array based on the object received from the **U2C**\n   * service for usage in the {@link ServiceRegistry#load} method.\n   *\n   * @public\n   * @static\n   * @memberof ServiceRegistry\n   * @param {MapRemoteCatalogPTO} pto - The parameter transfer object.\n   * @throws - If the target catalog does not exist.\n   * @returns {Array<ServiceHost#ServiceHostConstructorPTO>}\n   */\n  static mapRemoteCatalog({catalog, hostCatalog, serviceLinks}) {\n    // Collect the service catalog name if needed.\n    const catalogIndex = ServiceRegistry.mapCatalogName({\n      id: catalog,\n      type: SERVICE_CATALOGS_ENUM_TYPES.STRING\n    });\n\n    // Validate that the target catalog exists.\n    if (!SERVICE_CATALOGS.includes(catalogIndex)) {\n      throw new Error(`service-catalogs: '${catalog}' is not a valid catalog`);\n    }\n\n    // Map the remote catalog to a mountable host array.\n    return Object.keys(hostCatalog).reduce((output, key) => {\n      output.push(\n        ...hostCatalog[key].map((host) => ({\n          catalog: catalogIndex,\n          defaultUri: serviceLinks[host.id.split(':')[3]],\n          hostGroup: key,\n          id: host.id,\n          priority: host.priority,\n          uri: host.host\n        }))\n      );\n\n      return output;\n    }, []);\n  }\n}\n"]}