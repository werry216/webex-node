{"version":3,"sources":["webex-core-plugin-mixin.js"],"names":["mixinWebexCorePlugins","State","config","interceptors","registerPlugin","name","constructor","options","prototype","_children","replace","proxies","forEach","key","createDerivedProperty","deps","fn","payloadTransformer","predicates","concat","transforms","onBeforeLogout","push","plugin","_definition","ready","_derived","depList","def","modelProto","definition","cache","dep","_deps","get","_getDerivedProperty","set","TypeError"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {get, has, isArray, isFunction, merge, union} from 'lodash';\n\n/**\n * Mixes a plugin system into an AmpState object (specifically, into WebexCore)\n * @param {AmpState} State\n * @param {Object} config\n * @param {Object} interceptors\n * @returns {AmpState}\n */\nexport default function mixinWebexCorePlugins(State, config, interceptors) {\n  // eslint-disable-next-line complexity\n  State.registerPlugin = function registerPlugin(name, constructor, options = {}) {\n    if (State.prototype._children[name] && !options.replace) {\n      return;\n    }\n\n    State.prototype._children[name] = constructor;\n\n    if (options.proxies) {\n      options.proxies.forEach((key) => {\n        createDerivedProperty(State.prototype, key, {\n          deps: [`${name}.${key}`],\n          fn() {\n            return this[name][key];\n          }\n        });\n      });\n    }\n\n    if (options.interceptors) {\n      Object.keys(options.interceptors).forEach((key) => {\n        interceptors[key] = options.interceptors[key];\n      });\n    }\n\n    if (options.config) {\n      merge(config, options.config);\n    }\n\n    if (has(options, 'payloadTransformer.predicates')) {\n      config.payloadTransformer.predicates = config.payloadTransformer.predicates.concat(\n        get(options, 'payloadTransformer.predicates')\n      );\n    }\n\n    if (has(options, 'payloadTransformer.transforms')) {\n      config.payloadTransformer.transforms = config.payloadTransformer.transforms.concat(\n        get(options, 'payloadTransformer.transforms')\n      );\n    }\n\n    if (options.onBeforeLogout) {\n      config.onBeforeLogout = config.onBeforeLogout || [];\n      const onBeforeLogout = isArray(options.onBeforeLogout) ? options.onBeforeLogout : [options.onBeforeLogout];\n\n      onBeforeLogout.forEach((fn) =>\n        config.onBeforeLogout.push({\n          plugin: name,\n          fn\n        }));\n    }\n\n    // Only mess with the plugin's derived properties if it's an amp-state plugin\n    if (constructor.prototype._definition && constructor.prototype._definition.ready) {\n      const {fn, depList} = State.prototype._derived.ready;\n      const def = {\n        deps: depList.concat(`${name}.ready`),\n        fn\n      };\n\n      createDerivedProperty(State.prototype, 'ready', def);\n    }\n  };\n\n  return State;\n}\n\n/**\n * Extracted from ampersand-state\n * @param {Object} modelProto\n * @param {string} name\n * @param {Object} definition\n * @private\n * @returns {undefined}\n */\nfunction createDerivedProperty(modelProto, name, definition) {\n  const def = (modelProto._derived[name] = {\n    fn: isFunction(definition) ? definition : definition.fn,\n    cache: definition.cache !== false,\n    depList: definition.deps || []\n  });\n\n  // add to our shared dependency list\n  def.depList.forEach((dep) => {\n    modelProto._deps[dep] = union(modelProto._deps[dep] || [], [name]);\n  });\n\n  // defined a top-level getter for derived names\n  Reflect.defineProperty(modelProto, name, {\n    get() {\n      return this._getDerivedProperty(name);\n    },\n    set() {\n      throw new TypeError(`\\`${name}\\` is a derived property, it can't be set directly.`);\n    }\n  });\n}\n"]}