{"version":3,"sources":["stateless-webex-plugin.js"],"names":["webexs","StatelessWebexPlugin","attrs","options","webex","parent","Error","collection","set","namespace","getNamespace","toLowerCase","config","logger","get","request","upload","readonly","prototype","AmpEvents"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AAEA;AACA,IAAMA,MAAM,GAAG,sBAAf;AAEA;AACA;AACA;;IACqBC,oB;AA6CnB;AACF;AACA;AACA;AACA;AACA;AACA;AACE,kCAAsC;AAAA,QAA1BC,KAA0B,uEAAlB,EAAkB;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAA;AAAA;AACpC,QAAIC,KAAK,GAAGF,KAAK,CAACE,KAAN,IAAeD,OAAO,CAACE,MAAnC;;AAEA,QAAI,CAACD,KAAL,EAAY;AACV,YAAM,IAAIE,KAAJ,CAAU,oGAAV,CAAN;AACD;;AAED,WAAOF,KAAK,CAACC,MAAN,IAAgBD,KAAK,CAACG,UAA7B,EAAyC;AACvCH,MAAAA,KAAK,GAAGA,KAAK,CAACC,MAAN,IAAgBD,KAAK,CAACG,UAA9B;AACD;;AACDP,IAAAA,MAAM,CAACQ,GAAP,CAAW,IAAX,EAAiBJ,KAAjB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;;;AArEE;AACF;AACA;AACA;AACA;AACE,mBAAa;AACX,UAAIK,SAAS,GAAG,KAAKC,YAAL,GAAoB,KAAKA,YAAL,EAApB,GAA0C,KAAKD,SAA/D;;AAEA,UAAIA,SAAJ,EAAe;AACbA,QAAAA,SAAS,GAAGA,SAAS,CAACE,WAAV,EAAZ;AAEA,eAAO,KAAKP,KAAL,CAAWQ,MAAX,CAAkBH,SAAlB,CAAP;AACD;;AAED,aAAO,KAAKL,KAAL,CAAWQ,MAAlB;AACD;AAED;AACF;AACA;AACA;;;;SACE,eAAa;AACX,aAAO,KAAKR,KAAL,CAAWS,MAAlB;AACD;AAED;AACF;AACA;AACA;;;;SACE,eAAY;AACV,aAAOb,MAAM,CAACc,GAAP,CAAW,IAAX,CAAP;AACD;;;WAuCD,mBAAiB;AAAA;;AACf,aAAO,oBAAKV,KAAL,EAAWW,OAAX,8BAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,kBAAgB;AAAA;;AACd,aAAO,qBAAKX,KAAL,EAAWY,MAAX,+BAAP;AACD;;;gGAjDAC,wB;;;;;WASO,I;;;;AA2CV,qBAAchB,oBAAoB,CAACiB,SAAnC,EAA8CC,wBAA9C","sourcesContent":["import {readonly} from 'core-decorators';\nimport AmpEvents from 'ampersand-events';\n\n// hold onto weak references to parent' Webexs to help avoid retain cycles\nconst webexs = new WeakMap();\n\n/**\n * Base plugin class. Doesn't depend on Ampersand State\n */\nexport default class StatelessWebexPlugin {\n  /**\n   * The config for this plugin's namespace. If no namespace has been set\n   * returns all of webex's config.\n   * @type {Object}\n   */\n  get config() {\n    let namespace = this.getNamespace ? this.getNamespace() : this.namespace;\n\n    if (namespace) {\n      namespace = namespace.toLowerCase();\n\n      return this.webex.config[namespace];\n    }\n\n    return this.webex.config;\n  }\n\n  /**\n   * A reference to the webex logger.\n   * @type {Logger}\n   */\n  get logger() {\n    return this.webex.logger;\n  }\n\n  /**\n   * A reference to the main sdk instance\n   * @type {WebexCore}\n   */\n  get webex() {\n    return webexs.get(this);\n  }\n\n  @readonly\n  /**\n   * Mostly here for compatibility with legacy WebexPlugins.\n   * StatelessWebexPlugins will never have a state other than ready, however, if\n   * we implement stateful WebexPlugins as es6 classes, they may have the option\n   * to have ready be false\n   * @private\n   * @type {boolean}\n   */\n  ready = true;\n\n  /**\n   * Constructor. One of attrs.webex or options.parent is required\n   * @param {Object} attrs\n   * @param {WebexCore} [attrs.webex]\n   * @param {Object} options\n   * @param {WebexCore} [options.parent]\n   */\n  constructor(attrs = {}, options = {}) {\n    let webex = attrs.webex || options.parent;\n\n    if (!webex) {\n      throw new Error('One of `attrs.webex` or `options.parent` must be supplied when initializing a StatelessWebexPlugin');\n    }\n\n    while (webex.parent || webex.collection) {\n      webex = webex.parent || webex.collection;\n    }\n    webexs.set(this, webex);\n  }\n\n  /**\n   * Proxies to {@link WebexPlugin#webex}'s `request()` method.\n   * @see WebexCore#request\n   * @param {Array<mixed>} args\n   * @returns {Promise}\n   */\n  request(...args) {\n    return this.webex.request(...args);\n  }\n\n  /**\n   * Proxies to {@link WebexPlugin#webex}'s `upload()` method.\n   * @see WebexCore#upload\n   * @param {Array<mixed>} args\n   * @returns {Promise}\n   */\n  upload(...args) {\n    return this.webex.upload(...args);\n  }\n}\n\nObject.assign(StatelessWebexPlugin.prototype, AmpEvents);\n"]}