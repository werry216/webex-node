{"version":3,"sources":["batcher.js"],"names":["Batcher","WebexPlugin","extend","session","deferreds","type","default","queue","derived","bounce","fn","executeQueue","config","batcherWait","maxCalls","batcherMaxCalls","maxWait","batcherMaxWait","request","item","defer","Defer","fingerprintRequest","then","idx","has","resolve","get","promise","set","prepareItem","req","delete","catch","reason","reject","enqueue","push","splice","prepareRequest","payload","submitHttpRequest","res","handleHttpSuccess","WebexHttpError","handleHttpError","all","map","getDeferredForRequest","logger","error","process","env","NODE_ENV","stack","Error","body","items","acceptItem","options","didItemFail","didFail","handleItemFailure","handleItemSuccess","getDeferredForResponse","fingerprintResponse"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {has} from 'lodash';\nimport {\n  cappedDebounce,\n  Defer,\n  tap\n} from '@webex/common';\n\nimport WebexPlugin from './webex-plugin';\nimport WebexHttpError from './webex-http-error';\n\n/**\n * Base class for coalescing requests to batched APIs\n * @class Batcher\n */\nconst Batcher = WebexPlugin.extend({\n  session: {\n    deferreds: {\n      type: 'object',\n      default() {\n        return new Map();\n      }\n    },\n    queue: {\n      type: 'array',\n      default() {\n        return [];\n      }\n    }\n  },\n\n  derived: {\n    bounce: {\n      fn() {\n        return cappedDebounce((...args) => this.executeQueue(...args), this.config.batcherWait, {\n          maxCalls: this.config.batcherMaxCalls,\n          maxWait: this.config.batcherMaxWait\n        });\n      }\n    }\n  },\n\n  /**\n   * Requests an item from a batched API\n   * @param {Object} item\n   * @returns {Promise<mixed>}\n   */\n  request(item) {\n    // So far, I can't find a way to avoid three layers of nesting here.\n    /* eslint max-nested-callbacks: [0] */\n    const defer = new Defer();\n\n    this.fingerprintRequest(item)\n      .then((idx) => {\n        if (this.deferreds.has(idx)) {\n          defer.resolve(this.deferreds.get(idx).promise);\n\n          return;\n        }\n        this.deferreds.set(idx, defer);\n        this.prepareItem(item)\n          .then((req) => {\n            defer.promise = defer.promise\n              .then(tap(() => this.deferreds.delete(idx)))\n              .catch((reason) => {\n                this.deferreds.delete(idx);\n\n                return Promise.reject(reason);\n              });\n\n            this.enqueue(req)\n              .then(() => this.bounce())\n              .catch((reason) => defer.reject(reason));\n          })\n          .catch((reason) => defer.reject(reason));\n      })\n      .catch((reason) => defer.reject(reason));\n\n    return defer.promise;\n  },\n\n  /**\n   * Adds an item to the queue.\n   * Intended to be overridden\n   * @param {mixed} req\n   * @returns {Promise<undefined>}\n   */\n  enqueue(req) {\n    this.queue.push(req);\n\n    return Promise.resolve();\n  },\n\n  /**\n   * Transform the item before adding it to the queue\n   * Intended to be overridden\n   * @param {mixed} item\n   * @returns {Promise<mixed>}\n   */\n  prepareItem(item) {\n    return Promise.resolve(item);\n  },\n\n  /**\n   * Detaches the current queue, does any appropriate transforms, and submits it\n   * to the API.\n   * @returns {Promise<undefined>}\n   */\n  executeQueue() {\n    const queue = this.queue.splice(0, this.config.batcherMaxCalls);\n\n    return new Promise((resolve) => {\n      resolve(this.prepareRequest(queue)\n        .then((payload) => this.submitHttpRequest(payload)\n          .then((res) => this.handleHttpSuccess(res)))\n        .catch((reason) => {\n          if (reason instanceof WebexHttpError) {\n            return this.handleHttpError(reason);\n          }\n\n          return Promise.all(queue.map((item) => this.getDeferredForRequest(item)\n            .then((defer) => {\n              defer.reject(reason);\n            })));\n        }));\n    })\n      .catch((reason) => {\n        this.logger.error(process.env.NODE_ENV === 'production' ? reason : reason.stack);\n\n        return Promise.reject(reason);\n      });\n  },\n\n  /**\n   * Performs any final transforms on the queue before submitting it to the API\n   * Intended to be overridden\n   * @param {Object|Array} queue\n   * @returns {Promise<Object>}\n   */\n  prepareRequest(queue) {\n    return Promise.resolve(queue);\n  },\n\n  /**\n   * Submits the prepared request body to the API.\n   * This method *must* be overridden\n   * @param {Object} payload\n   * @returns {Promise<HttpResponseObject>}\n   */\n  // eslint-disable-next-line no-unused-vars\n  submitHttpRequest(payload) {\n    throw new Error('request() must be implemented');\n  },\n\n  /**\n   * Actions taken when the http request returns a success\n   * Intended to be overridden\n   * @param {Promise<HttpResponseObject>} res\n   * @returns {Promise<undefined>}\n   */\n  handleHttpSuccess(res) {\n    return Promise.all((res.body && res.body.items || res.body).map((item) => this.acceptItem(item)));\n  },\n\n  /**\n   * Actions taken when the http request returns a failure. Typically, this\n   * means failing the entire queue, but could be overridden in some\n   * implementations to e.g. reenqueue.\n   * Intended to be overridden\n   * @param {WebexHttpError} reason\n   * @returns {Promise<undefined>}\n   */\n  handleHttpError(reason) {\n    if (reason instanceof WebexHttpError) {\n      if (has(reason, 'options.body.map')) {\n        return Promise.all(reason.options.body.map((item) => this.getDeferredForRequest(item)\n          .then((defer) => {\n            defer.reject(reason);\n          })));\n      }\n    }\n    this.logger.error('http error handler called without a WebexHttpError object', reason);\n\n    return Promise.reject(reason);\n  },\n\n  /**\n   * Determines if the item succeeded or failed and delegates accordingly\n   * @param {Object} item\n   * @returns {Promise<undefined>}\n   */\n  acceptItem(item) {\n    return this.didItemFail(item)\n      .then((didFail) => {\n        if (didFail) {\n          return this.handleItemFailure(item);\n        }\n\n        return this.handleItemSuccess(item);\n      });\n  },\n\n  /**\n   * Indicates if the specified response item implies a success or a failure\n   * Intended to be overridden\n   * @param {Object} item\n   * @returns {Promise<Boolean>}\n   */\n  // eslint-disable-next-line no-unused-vars\n  didItemFail(item) {\n    return Promise.resolve(false);\n  },\n\n  /**\n   * Finds the Defer for the specified item and rejects its promise\n   * Intended to be overridden\n   * @param {Object} item\n   * @returns {Promise<undefined>}\n   */\n  handleItemFailure(item) {\n    return this.getDeferredForResponse(item)\n      .then((defer) => {\n        defer.reject(item);\n      });\n  },\n\n  /**\n   * Finds the Defer for the specified item and resolves its promise\n   * Intended to be overridden\n   * @param {Object} item\n   * @returns {Promise<undefined>}\n   */\n  handleItemSuccess(item) {\n    return this.getDeferredForResponse(item)\n      .then((defer) => {\n        defer.resolve(item);\n      });\n  },\n\n  /**\n   * Returns the Deferred for the specified request item\n   * @param {Object} item\n   * @returns {Promise<Defer>}\n   */\n  getDeferredForRequest(item) {\n    return this.fingerprintRequest(item)\n      .then((idx) => {\n        const defer = this.deferreds.get(idx);\n\n        /* istanbul ignore if */\n        if (!defer) {\n          throw new Error('Could not find pending request for received response');\n        }\n\n        return defer;\n      });\n  },\n\n  /**\n   * Returns the Deferred for the specified response item\n   * @param {Object} item\n   * @returns {Promise<Defer>}\n   */\n  getDeferredForResponse(item) {\n    return this.fingerprintResponse(item)\n      .then((idx) => {\n        const defer = this.deferreds.get(idx);\n\n        /* istanbul ignore if */\n        if (!defer) {\n          throw new Error('Could not find pending request for received response');\n        }\n\n        return defer;\n      });\n  },\n\n  /**\n   * Generates a unique identifier for the item in a request payload\n   * Intended to be overridden\n   * Note that overrides must return a primitive.\n   * @param {Object} item\n   * @returns {Promise<primitive>}\n   */\n  // eslint-disable-next-line no-unused-vars\n  fingerprintRequest(item) {\n    throw new Error('fingerprintRequest() must be implemented');\n  },\n\n  /**\n   * Generates a unique identifier for the item in a response payload\n   * Intended to be overridden\n   * Note that overrides must return a primitive.\n   * @param {Object} item\n   * @returns {Promise<primitive>}\n   */\n  // eslint-disable-next-line no-unused-vars\n  fingerprintResponse(item) {\n    throw new Error('fingerprintResponse() must be implemented');\n  }\n});\n\nexport default Batcher;\n"]}