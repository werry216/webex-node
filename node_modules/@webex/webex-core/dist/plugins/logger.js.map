{"version":3,"sources":["logger.js"],"names":["precedence","error","warn","info","debug","trace","wrapConsoleMethod","level","impls","slice","console","pop","wrappedConsoleMethod","args","process","env","NODE_ENV","webex","internal","device","url","unshift","Logger","WebexPlugin","extend","namespace","log"],"mappings":";;;;;;;;;;;;AAGA;;AACA;;AAJA;AACA;AACA;AAIA,IAAMA,UAAU,GAAG;AACjBC,EAAAA,KAAK,EAAE,CAAC,KAAD,CADU;AAEjBC,EAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,KAAV,CAFW;AAGjBC,EAAAA,IAAI,EAAE,CAAC,KAAD,CAHW;AAIjBC,EAAAA,KAAK,EAAE,CAAC,MAAD,EAAS,KAAT,CAJU;AAKjBC,EAAAA,KAAK,EAAE,CAAC,OAAD,EAAU,MAAV,EAAkB,KAAlB;AALU,CAAnB;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC;AACA,MAAIC,KAAK,GAAGR,UAAU,CAACO,KAAD,CAAtB;;AAEA,MAAIC,KAAJ,EAAW;AACTA,IAAAA,KAAK,GAAGA,KAAK,CAACC,KAAN,EAAR;;AACA,WAAO,CAACC,OAAO,CAACH,KAAD,CAAf,EAAwB;AACtBA,MAAAA,KAAK,GAAGC,KAAK,CAACG,GAAN,EAAR;AACD;AACF;;AAED,SAAO,SAASC,oBAAT,GAAuC;AAAA;;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAC5C;;AACA;AACA,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAAzB,IAAmC,KAAKC,KAAxC,IAAiD,KAAKA,KAAL,CAAWC,QAAX,CAAoBC,MAArE,IAA+E,KAAKF,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BC,GAA9G,EAAmH;AACjHP,MAAAA,IAAI,CAACQ,OAAL,CAAa,KAAKJ,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BC,GAA3B,CAA+BX,KAA/B,CAAqC,CAAC,CAAtC,CAAb;AACD;;AACD,gBAAAC,OAAO,EAACH,KAAD,CAAP,iBAAkBM,IAAlB;AACD,GAPD;AAQD;;AAED,IAAMS,MAAM,GAAGC,qBAAYC,MAAZ,CAAmB;AAChCC,EAAAA,SAAS,EAAE,QADqB;AAEhCxB,EAAAA,KAAK,EAAEK,iBAAiB,CAAC,OAAD,CAFQ;AAGhCJ,EAAAA,IAAI,EAAEI,iBAAiB,CAAC,MAAD,CAHS;AAIhCoB,EAAAA,GAAG,EAAEpB,iBAAiB,CAAC,KAAD,CAJU;AAKhCH,EAAAA,IAAI,EAAEG,iBAAiB,CAAC,MAAD,CALS;AAMhCF,EAAAA,KAAK,EAAEE,iBAAiB,CAAC,OAAD,CANQ;AAOhCD,EAAAA,KAAK,EAAEC,iBAAiB,CAAC,OAAD,CAPQ;AAAA;AAAA,CAAnB,CAAf;;AAUA,+BAAe,QAAf,EAAyBgB,MAAzB;eAEeA,M","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\nimport WebexPlugin from '../lib/webex-plugin';\nimport {registerPlugin} from '../webex-core';\n\nconst precedence = {\n  error: ['log'],\n  warn: ['error', 'log'],\n  info: ['log'],\n  debug: ['info', 'log'],\n  trace: ['debug', 'info', 'log']\n};\n\n/**\n * Assigns the specified console method to Logger; uses `precedence` to fallback\n * to other console methods if the current environment doesn't provide the\n * specified level.\n * @param {string} level\n * @returns {Function}\n */\nfunction wrapConsoleMethod(level) {\n  /* eslint no-console: [0] */\n  let impls = precedence[level];\n\n  if (impls) {\n    impls = impls.slice();\n    while (!console[level]) {\n      level = impls.pop();\n    }\n  }\n\n  return function wrappedConsoleMethod(...args) {\n    /* eslint no-invalid-this: [0] */\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV === 'test' && this.webex && this.webex.internal.device && this.webex.internal.device.url) {\n      args.unshift(this.webex.internal.device.url.slice(-3));\n    }\n    console[level](...args);\n  };\n}\n\nconst Logger = WebexPlugin.extend({\n  namespace: 'Logger',\n  error: wrapConsoleMethod('error'),\n  warn: wrapConsoleMethod('warn'),\n  log: wrapConsoleMethod('log'),\n  info: wrapConsoleMethod('info'),\n  debug: wrapConsoleMethod('debug'),\n  trace: wrapConsoleMethod('trace')\n});\n\nregisterPlugin('logger', Logger);\n\nexport default Logger;\n"]}