{"version":3,"sources":["user-uuid-store.js"],"names":["usersByEmail","usersById","UserUUIDStore","set","user","id","reject","Error","emailAddress","patterns","uuid","test","email","p1","getById","then","u","get","catch","p2","getByEmail","all","ret","resolve"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {patterns} from '@webex/common';\n\nconst usersByEmail = new WeakMap();\nconst usersById = new WeakMap();\n\n/**\n * @class\n */\nexport default class UserUUIDStore {\n  /**\n   * @constructs {UserUUIDStore}\n   */\n  constructor() {\n    usersByEmail.set(this, new Map());\n    usersById.set(this, new Map());\n  }\n\n  /**\n   * Adds a user object to the store\n   * @param {Object} user\n   * @param {string} user.id\n   * @param {string} user.emailAddress\n   * @returns {Promise}\n   */\n  add(user) {\n    if (!user.id) {\n      return Promise.reject(new Error('`user.id` is required'));\n    }\n\n    if (!user.emailAddress) {\n      return Promise.reject(new Error('`user.emailAddress` is required'));\n    }\n\n    if (!patterns.uuid.test(user.id)) {\n      return Promise.reject(new Error('`user.id` does not appear to be a uuid'));\n    }\n\n    if (!patterns.email.test(user.emailAddress)) {\n      return Promise.reject(new Error('`user.emailAddress` does not appear to be an email address'));\n    }\n\n    const p1 = this.getById(user.id)\n      .then((u) => usersById.get(this).set(user.id, Object.assign({}, u, user)))\n      .catch(() => usersById.get(this).set(user.id, Object.assign({}, user)));\n\n    const p2 = this.getByEmail(user.emailAddress)\n      .then((u) => usersByEmail.get(this).set(user.emailAddress, Object.assign({}, u, user)))\n      .catch(() => usersByEmail.get(this).set(user.emailAddress, Object.assign({}, user)));\n\n    return Promise.all([p1, p2]);\n  }\n\n  /**\n   * Retrievves the specified user object from the store\n   * @param {string} id\n   * @returns {Promise<Object>}\n   */\n  get(id) {\n    if (patterns.uuid.test(id)) {\n      return this.getById(id);\n    }\n\n    if (patterns.email.test(id)) {\n      return this.getByEmail(id);\n    }\n\n    return Promise.reject(new Error('`id` does not appear to be a valid user identifier'));\n  }\n\n  /**\n   * Retrieves the specified user object by id from the store\n   * @param {Object} id\n   * @returns {Promise<Object>}\n   */\n  getById(id) {\n    const ret = usersById.get(this).get(id);\n\n    if (ret) {\n      return Promise.resolve(ret);\n    }\n\n    return Promise.reject(new Error('No user found by specified id'));\n  }\n\n\n  /**\n   * Retrieves the specified user object by id from the store\n   * @param {Object} email\n   * @returns {Promise<Object>}\n   */\n  getByEmail(email) {\n    const ret = usersByEmail.get(this).get(email);\n\n    if (ret) {\n      return Promise.resolve(ret);\n    }\n\n    return Promise.reject(new Error('No user found by specified email address'));\n  }\n}\n"]}