"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _weakMap = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/weak-map"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/map"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/assign"));

var _common = require("@webex/common");

/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */
var usersByEmail = new _weakMap.default();
var usersById = new _weakMap.default();
/**
 * @class
 */

var UserUUIDStore = /*#__PURE__*/function () {
  /**
   * @constructs {UserUUIDStore}
   */
  function UserUUIDStore() {
    (0, _classCallCheck2.default)(this, UserUUIDStore);
    usersByEmail.set(this, new _map.default());
    usersById.set(this, new _map.default());
  }
  /**
   * Adds a user object to the store
   * @param {Object} user
   * @param {string} user.id
   * @param {string} user.emailAddress
   * @returns {Promise}
   */


  (0, _createClass2.default)(UserUUIDStore, [{
    key: "add",
    value: function add(user) {
      var _this = this;

      if (!user.id) {
        return _promise.default.reject(new Error('`user.id` is required'));
      }

      if (!user.emailAddress) {
        return _promise.default.reject(new Error('`user.emailAddress` is required'));
      }

      if (!_common.patterns.uuid.test(user.id)) {
        return _promise.default.reject(new Error('`user.id` does not appear to be a uuid'));
      }

      if (!_common.patterns.email.test(user.emailAddress)) {
        return _promise.default.reject(new Error('`user.emailAddress` does not appear to be an email address'));
      }

      var p1 = this.getById(user.id).then(function (u) {
        return usersById.get(_this).set(user.id, (0, _assign.default)({}, u, user));
      }).catch(function () {
        return usersById.get(_this).set(user.id, (0, _assign.default)({}, user));
      });
      var p2 = this.getByEmail(user.emailAddress).then(function (u) {
        return usersByEmail.get(_this).set(user.emailAddress, (0, _assign.default)({}, u, user));
      }).catch(function () {
        return usersByEmail.get(_this).set(user.emailAddress, (0, _assign.default)({}, user));
      });
      return _promise.default.all([p1, p2]);
    }
    /**
     * Retrievves the specified user object from the store
     * @param {string} id
     * @returns {Promise<Object>}
     */

  }, {
    key: "get",
    value: function get(id) {
      if (_common.patterns.uuid.test(id)) {
        return this.getById(id);
      }

      if (_common.patterns.email.test(id)) {
        return this.getByEmail(id);
      }

      return _promise.default.reject(new Error('`id` does not appear to be a valid user identifier'));
    }
    /**
     * Retrieves the specified user object by id from the store
     * @param {Object} id
     * @returns {Promise<Object>}
     */

  }, {
    key: "getById",
    value: function getById(id) {
      var ret = usersById.get(this).get(id);

      if (ret) {
        return _promise.default.resolve(ret);
      }

      return _promise.default.reject(new Error('No user found by specified id'));
    }
    /**
     * Retrieves the specified user object by id from the store
     * @param {Object} email
     * @returns {Promise<Object>}
     */

  }, {
    key: "getByEmail",
    value: function getByEmail(email) {
      var ret = usersByEmail.get(this).get(email);

      if (ret) {
        return _promise.default.resolve(ret);
      }

      return _promise.default.reject(new Error('No user found by specified email address'));
    }
  }]);
  return UserUUIDStore;
}();

exports.default = UserUUIDStore;
//# sourceMappingURL=user-uuid-store.js.map
