{"version":3,"sources":["webhooks.js"],"names":["Webhooks","WebexPlugin","extend","create","webhook","request","method","service","resource","body","then","res","get","id","items","list","options","qs","Page","webex","remove","statusCode","undefined","update"],"mappings":";;;;;;;;;;AAIA;;AAJA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,QAAQ,GAAGC,uBAAYC,MAAZ,CAAmB;AAClC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,MA9BkC,kBA8B3BC,OA9B2B,EA8BlB;AACd,WAAO,KAAKC,OAAL,CAAa;AAClBC,MAAAA,MAAM,EAAE,MADU;AAElBC,MAAAA,OAAO,EAAE,OAFS;AAGlBC,MAAAA,QAAQ,EAAE,UAHQ;AAIlBC,MAAAA,IAAI,EAAEL;AAJY,KAAb,EAMJM,IANI,CAMC,UAACC,GAAD;AAAA,aAASA,GAAG,CAACF,IAAb;AAAA,KAND,CAAP;AAOD,GAtCiC;;AAwClC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEG,EAAAA,GArEkC,eAqE9BR,OArE8B,EAqErB;AACX,QAAMS,EAAE,GAAGT,OAAO,CAACS,EAAR,IAAcT,OAAzB;AAEA,WAAO,KAAKC,OAAL,CAAa;AAClBE,MAAAA,OAAO,EAAE,OADS;AAElBC,MAAAA,QAAQ,qBAAcK,EAAd;AAFU,KAAb,EAIJH,IAJI,CAIC,UAACC,GAAD;AAAA,aAASA,GAAG,CAACF,IAAJ,CAASK,KAAT,IAAkBH,GAAG,CAACF,IAA/B;AAAA,KAJD,CAAP;AAKD,GA7EiC;;AA+ElC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,IAhHkC,gBAgH7BC,OAhH6B,EAgHpB;AAAA;;AACZ,WAAO,KAAKX,OAAL,CAAa;AAClBE,MAAAA,OAAO,EAAE,OADS;AAElBC,MAAAA,QAAQ,EAAE,WAFQ;AAGlBS,MAAAA,EAAE,EAAED;AAHc,KAAb,EAKJN,IALI,CAKC,UAACC,GAAD;AAAA,aAAS,IAAIO,eAAJ,CAASP,GAAT,EAAc,KAAI,CAACQ,KAAnB,CAAT;AAAA,KALD,CAAP;AAMD,GAvHiC;;AAyHlC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,MA5JkC,kBA4J3BhB,OA5J2B,EA4JlB;AACd,QAAMS,EAAE,GAAGT,OAAO,CAACS,EAAR,IAAcT,OAAzB;AAEA,WAAO,KAAKC,OAAL,CAAa;AAClBC,MAAAA,MAAM,EAAE,QADU;AAElBC,MAAAA,OAAO,EAAE,OAFS;AAGlBC,MAAAA,QAAQ,qBAAcK,EAAd;AAHU,KAAb,EAKJH,IALI,CAKC,UAACC,GAAD,EAAS;AACb;AACA;AACA,UAAIA,GAAG,CAACU,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,eAAOC,SAAP;AACD;;AAED,aAAOX,GAAG,CAACF,IAAX;AACD,KAbI,CAAP;AAcD,GA7KiC;;AA+KlC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEc,EAAAA,MAhNkC,kBAgN3BnB,OAhN2B,EAgNlB;AAAA,QACPS,EADO,GACDT,OADC,CACPS,EADO;AAGd,WAAO,KAAKR,OAAL,CAAa;AAClBC,MAAAA,MAAM,EAAE,KADU;AAElBC,MAAAA,OAAO,EAAE,OAFS;AAGlBC,MAAAA,QAAQ,qBAAcK,EAAd,CAHU;AAIlBJ,MAAAA,IAAI,EAAEL;AAJY,KAAb,EAMJM,IANI,CAMC,UAACC,GAAD;AAAA,aAASA,GAAG,CAACF,IAAb;AAAA,KAND,CAAP;AAOD,GA1NiC;AAAA;AAAA,CAAnB,CAAjB;;eA6NeT,Q","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin, Page} from '@webex/webex-core';\n\n/**\n * @typedef {Object} WebhookObject\n * @property {string} id - (server generated) Unique identifier for the webhook\n * @property {string} resource - The resource type for the webhook\n * @property {string} event - The event type for the webhook\n * @property {string} filter - The filter that defines the webhook scope\n * @property {string} targetUrl - The URL that receives POST requests for each event\n * @property {string} name - A user-friendly name for this webhook\n * @property {string} created - (server generated) The date and time that the webhook was created\n */\n\n/**\n * Webhooks allow your app to be notified via HTTP when a specific event\n * occurs on Webex. For example, your app can register a webhook to be\n * notified when a new message is posted into a specific room.\n * @class\n */\nconst Webhooks = WebexPlugin.extend({\n  /**\n   * Posts a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {WebhookObject} webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * webex.rooms.create({title: 'Create Webhook Example'})\n   *   .then(function(room) {\n   *     return webex.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(webhook) {\n   *     var assert = require('assert');\n   *     assert(webhook.id);\n   *     assert(webhook.resource);\n   *     assert(webhook.event);\n   *     assert(webhook.filter);\n   *     assert(webhook.targetUrl);\n   *     assert(webhook.name);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(webhook) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'webhooks',\n      body: webhook\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Shows details for a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Webhook|string} webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * var webhook;\n   * webex.rooms.create({title: 'Get Webhook Example'})\n   *   .then(function(room) {\n   *     return webex.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     return webex.webhooks.get(webhook.id);\n   *   })\n   *   .then(function(webhook2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(webhook2, webhook);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(webhook) {\n    const id = webhook.id || webhook;\n\n    return this.request({\n      service: 'hydra',\n      resource: `webhooks/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Lists all webhooks.\n   * @instance\n   * @memberof Webhooks\n   * @param {Object} options\n   * @param {integer} options.max Limit the maximum number of webhooks in the response.\n   * @returns {Promise<Array<Webhook>>}\n   * @example\n   * var room, webhook;\n   * webex.rooms.create({title: 'List Webhooks Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     return webex.webhooks.list();\n   *   })\n   *   .then(function(webhooks) {\n   *     var assert = require('assert');\n   *     assert.equal(webhooks.items.filter(function(w) {\n   *       return w.id === webhook.id;\n   *     }).length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'webhooks/',\n      qs: options\n    })\n      .then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Delete a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Webhook|string} webhook\n   * @returns {Promise}\n   * @example\n   * var room, webhook;\n   * webex.rooms.create({title: 'Remove Webhook Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     return webex.webhooks.remove(webhook);\n   *   })\n   *   .then(function() {\n   *     return webex.webhooks.list();\n   *   })\n   *   .then(function(webhooks) {\n   *     var assert = require('assert');\n   *     assert.equal(webhooks.items.filter(function(w) {\n   *       return w.id === webhook.id;\n   *     }).length, 0);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(webhook) {\n    const id = webhook.id || webhook;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `webhooks/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n\n        return res.body;\n      });\n  },\n\n  /**\n   * Update a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Webhook} webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * var webhook;\n   * webex.rooms.create({title: 'Webhook Example'})\n   *   .then(function(room) {\n   *     return webex.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     webhook.targetUrl = 'https://example.com/webhook/newtarget';\n   *     return webex.webhooks.update(webhook);\n   *   })\n   *   .then(function() {\n   *     return webex.webhooks.get(webhook);\n   *   })\n   *   .then(function(webhook) {\n   *     var assert = require('assert');\n   *     assert.equal(webhook.targetUrl, 'https://example.com/webhook/newtarget');\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update(webhook) {\n    const {id} = webhook;\n\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: `webhooks/${id}`,\n      body: webhook\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default Webhooks;\n"]}