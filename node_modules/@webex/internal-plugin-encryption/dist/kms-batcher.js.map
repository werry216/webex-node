{"version":3,"sources":["kms-batcher.js"],"names":["TIMEOUT_SYMBOL","KmsBatcher","Batcher","extend","namespace","processKmsMessageEvent","event","logger","info","all","encryption","kmsMessages","map","kmsMessage","resolve","process","env","NODE_ENV","body","acceptItem","prepareItem","item","getDeferredForRequest","then","defer","timeout","Error","timer","warn","requestId","handleItemFailure","KmsTimeoutError","request","promise","clearTimeout","catch","prepareRequest","queue","webex","internal","kms","_getKMSCluster","cluster","destination","req","wrapped","submitHttpRequest","payload","length","method","service","resource","handleHttpSuccess","didItemFail","status","handleItemSuccess","getDeferredForResponse","reason","reject","KmsError","fingerprintRequest","fingerprintResponse"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {safeSetTimeout} from '@webex/common-timers';\nimport {Batcher} from '@webex/webex-core';\n\nimport {KmsError, KmsTimeoutError} from './kms-errors';\n\nexport const TIMEOUT_SYMBOL = Symbol('TIMEOUT_SYMBOL');\n\n/**\n * @class\n */\nconst KmsBatcher = Batcher.extend({\n  namespace: 'Encryption',\n\n  /**\n   * Accepts a kmsMessage event and passes its contents to acceptItem\n   * @param {Object} event\n   * @returns {Promise}\n   */\n  processKmsMessageEvent(event) {\n    this.logger.info('kms-batcher: received kms message');\n\n    return Promise.all(event.encryption.kmsMessages.map((kmsMessage) => new Promise((resolve) => {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.info('kms-batcher:', kmsMessage.body);\n      }\n\n      resolve(this.acceptItem(kmsMessage));\n    })));\n  },\n\n  /**\n   * Attaches a timeout to the given KMS message\n   * @param {Object} item\n   * @returns {Promise<Object>}\n   */\n  prepareItem(item) {\n    return this.getDeferredForRequest(item)\n      .then((defer) => {\n        const timeout = item[TIMEOUT_SYMBOL];\n\n        /* istanbul ignore if */\n        if (!timeout) {\n          throw new Error('timeout is required');\n        }\n\n        const timer = safeSetTimeout(() => {\n          this.logger.warn(`kms: request timed out; request id: ${item.requestId}; timeout: ${timeout}`);\n          this.handleItemFailure(item, new KmsTimeoutError({\n            timeout,\n            request: item\n          }));\n        }, timeout);\n\n        // Reminder: reassign `promise` is not a viable means of inserting into\n        // the Promise chain\n        defer.promise.then(() => clearTimeout(timer));\n        defer.promise.catch(() => clearTimeout(timer));\n\n        return item;\n      });\n  },\n\n  /**\n   * Attaches the final bits of cluster info to the payload\n   * @param {Array} queue\n   * @returns {Promise<Array>}\n   */\n  prepareRequest(queue) {\n    return this.webex.internal.encryption.kms._getKMSCluster()\n      .then((cluster) => ({\n        destination: cluster,\n        kmsMessages: queue.map((req) => req.wrapped)\n      }));\n  },\n\n  /**\n   * @param {Object} payload\n   * @returns {Promise<HttpResponseObject>}\n   */\n  submitHttpRequest(payload) {\n    this.logger.info('kms: batched-request-length', payload.kmsMessages.length);\n\n    return this.webex.request({\n      method: 'POST',\n      service: 'encryption',\n      resource: '/kms/messages',\n      body: payload\n    });\n  },\n\n  /**\n   * Does nothing; the http response doesn't carry our response data\n   * @returns {Promise}\n   */\n  handleHttpSuccess() {\n    return Promise.resolve();\n  },\n\n  /**\n   * @param {Object} item\n   * @returns {Promise<boolean>}\n   */\n  didItemFail(item) {\n    return Promise.resolve(item.status >= 400);\n  },\n\n  /**\n   * @param {Object} item\n   * @returns {Promise}\n   */\n  handleItemSuccess(item) {\n    return this.getDeferredForResponse(item)\n      .then((defer) => {\n        defer.resolve(item.body);\n      });\n  },\n\n  /**\n   * @param {Object} item\n   * @param {KmsError} [reason]\n   * @returns {Promise}\n   */\n  handleItemFailure(item, reason) {\n    return this.getDeferredForResponse(item)\n      .then((defer) => {\n        defer.reject(reason || new KmsError(item.body));\n      });\n  },\n\n  /**\n   * @param {Object} item\n   * @returns {Promise}\n   */\n  fingerprintRequest(item) {\n    return Promise.resolve(item.requestId);\n  },\n\n  /**\n   * @param {Object} item\n   * @returns {Promise}\n   */\n  fingerprintResponse(item) {\n    return Promise.resolve(item.requestId);\n  }\n});\n\nexport default KmsBatcher;\n"]}