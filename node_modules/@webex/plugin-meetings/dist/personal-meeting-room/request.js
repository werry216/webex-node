"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _webexCore = require("@webex/webex-core");

var _constants = require("../constants");

var _parameter = _interopRequireDefault(require("../common/errors/parameter"));

var _util = _interopRequireDefault(require("./util"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * @class MeetingInfoRequest
 */
var PersonalMeetingRoomRequest = /*#__PURE__*/function (_StatelessWebexPlugin) {
  (0, _inherits2.default)(PersonalMeetingRoomRequest, _StatelessWebexPlugin);

  var _super = _createSuper(PersonalMeetingRoomRequest);

  function PersonalMeetingRoomRequest() {
    var _this;

    (0, _classCallCheck2.default)(this, PersonalMeetingRoomRequest);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "namespace", _constants.MEETINGS);
    return _this;
  }

  (0, _createClass2.default)(PersonalMeetingRoomRequest, [{
    key: "claimPmr",
    value:
    /**
     *
     * @param {Object} options with format of {userId, passcode, meetingAddress, preferred}
     * @returns {Promise} returns a promise that resolves/rejects the result of the request
     * @memberof PersonalMeetingRoomRequest
     */
    function claimPmr(options) {
      if (!options || !options.userId || !options.passcode || !options.meetingAddress || !options.preferred) {
        throw new _parameter.default('Claiming a PMR should be done with userId, passcode, preferred, and meetingAddress in options.');
      }

      var validPin = _util.default.getClaimPmrPin(options.passcode);

      if (!validPin) {
        return _promise.default.reject(new _parameter.default('The host pin provided was of an invalid format'));
      }

      var validLink = _util.default.getClaimPmrLink(options.meetingAddress);

      if (!validLink) {
        return _promise.default.reject(new _parameter.default('The PMR link provided was of an invalid format'));
      }

      var request = _util.default.getClaimedRequestParams(validLink, validPin, options);

      return this.request(request);
    }
  }]);
  return PersonalMeetingRoomRequest;
}(_webexCore.StatelessWebexPlugin);

exports.default = PersonalMeetingRoomRequest;
//# sourceMappingURL=request.js.map
