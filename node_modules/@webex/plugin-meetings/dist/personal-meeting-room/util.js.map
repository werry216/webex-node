{"version":3,"sources":["util.js"],"names":["PersonalMeetingRoomUtil","getClaimPmrLink","pmrLink","validator","VALID_PMR_ADDRESS","test","match","VALID_PMR_LINK","WEBEX_DOT_COM","getClaimPmrPin","hostPin","VALID_PIN","getClaimedRequestParams","link","pin","options","method","HTTP_VERBS","POST","api","HECATE","resource","CMR_MEETINGS","CLAIM","body","userId","passcode","preferred","meetingAddress"],"mappings":";;;;;;;;;;AAAA;;AAWA,IAAMA,uBAAuB,GAAG,EAAhC;;AAEAA,uBAAuB,CAACC,eAAxB,GAA0C,UAACC,OAAD,EAAa;AACrD,MAAIC,SAAS,GAAGC,6BAAkBC,IAAlB,CAAuBH,OAAvB,CAAhB;;AAEA,MAAIC,SAAJ,EAAe;AACb,WAAOD,OAAP;AACD;;AACDC,EAAAA,SAAS,GAAGD,OAAO,CAACI,KAAR,CAAcC,yBAAd,CAAZ;;AACA,MAAIJ,SAAJ,EAAe;AACb;AACA,qBAAUA,SAAS,CAAC,CAAD,CAAnB,cAA0BA,SAAS,CAAC,CAAD,CAAnC,cAA0CK,wBAA1C;AACD;;AAED,SAAO,IAAP;AACD,CAbD;;AAeAR,uBAAuB,CAACS,cAAxB,GAAyC,UAACC,OAAD,EAAa;AACpD,MAAIC,qBAAUN,IAAV,CAAeK,OAAf,CAAJ,EAA6B;AAC3B,WAAOA,OAAP;AACD;;AAED,SAAO,IAAP;AACD,CAND;;AAQAV,uBAAuB,CAACY,uBAAxB,GAAkD,UAACC,IAAD,EAAOC,GAAP,EAAYC,OAAZ;AAAA,SAAyB;AACzEC,IAAAA,MAAM,EAAEC,sBAAWC,IADsD;AAEzEC,IAAAA,GAAG,EAAEC,iBAFoE;AAGzEC,IAAAA,QAAQ,aAAMC,uBAAN,cAAsBC,gBAAtB,CAHiE;AAIzEC,IAAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAEV,OAAO,CAACU,MADZ;AAEJC,MAAAA,QAAQ,EAAEZ,GAFN;AAGJa,MAAAA,SAAS,EAAEZ,OAAO,CAACY,SAHf;AAIJC,MAAAA,cAAc,EAAEf;AAJZ;AAJmE,GAAzB;AAAA,CAAlD;;eAYeb,uB","sourcesContent":["import {\n  HTTP_VERBS,\n  VALID_PIN,\n  VALID_PMR_ADDRESS,\n  VALID_PMR_LINK,\n  CMR_MEETINGS,\n  CLAIM,\n  HECATE,\n  WEBEX_DOT_COM\n} from '../constants';\n\nconst PersonalMeetingRoomUtil = {};\n\nPersonalMeetingRoomUtil.getClaimPmrLink = (pmrLink) => {\n  let validator = VALID_PMR_ADDRESS.test(pmrLink);\n\n  if (validator) {\n    return pmrLink;\n  }\n  validator = pmrLink.match(VALID_PMR_LINK);\n  if (validator) {\n    // userId + '@' + site + '.webex.com'\n    return `${validator[4]}@${validator[2]}.${WEBEX_DOT_COM}`;\n  }\n\n  return null;\n};\n\nPersonalMeetingRoomUtil.getClaimPmrPin = (hostPin) => {\n  if (VALID_PIN.test(hostPin)) {\n    return hostPin;\n  }\n\n  return null;\n};\n\nPersonalMeetingRoomUtil.getClaimedRequestParams = (link, pin, options) => ({\n  method: HTTP_VERBS.POST,\n  api: HECATE,\n  resource: `/${CMR_MEETINGS}/${CLAIM}`,\n  body: {\n    userId: options.userId,\n    passcode: pin,\n    preferred: options.preferred,\n    meetingAddress: link\n  }\n});\n\nexport default PersonalMeetingRoomUtil;\n"]}