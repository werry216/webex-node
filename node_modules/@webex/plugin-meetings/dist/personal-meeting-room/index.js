"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _webexCore = require("@webex/webex-core");

var _constants = require("../constants");

var _request = _interopRequireDefault(require("../meeting-info/request"));

var _parameter = _interopRequireDefault(require("../common/errors/parameter"));

var _request2 = _interopRequireDefault(require("./request"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * @class PersonalMeetingRoom
 */
var PersonalMeetingRoom = /*#__PURE__*/function (_StatelessWebexPlugin) {
  (0, _inherits2.default)(PersonalMeetingRoom, _StatelessWebexPlugin);

  var _super = _createSuper(PersonalMeetingRoom);

  /**
   *
   * @param {Object} attrs
   * @param {Object} options
   */
  function PersonalMeetingRoom(attrs, options) {
    var _this;

    (0, _classCallCheck2.default)(this, PersonalMeetingRoom);
    _this = _super.call(this, {}, options);
    /**
     * The pmr server object
     * @instance
     * @type {Object}
     * @public
     * @memberof PersonalMeetingRoom
    */

    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "namespace", _constants.MEETINGS);
    _this.pmr = null;
    /**
     * The pmr sip Uri
     * @instance
     * @type {String}
     * @public
     * @memberof PersonalMeetingRoom
    */

    _this.sipUri = null;
    /**
     * The pmr link
     * @instance
     * @type {String}
     * @public
     * @memberof PersonalMeetingRoom
    */

    _this.link = null;
    /**
     * The pmr server object
     * @instance
     * @type {Object}
     * @public
     * @memberof PersonalMeetingRoom
    */

    _this.userId = null;
    /**
     * The pmr name
     * @instance
     * @type {String}
     * @public
     * @memberof PersonalMeetingRoom
    */

    _this.name = null;
    /**
     * The meeting info request server interface
     * @instance
     * @type {MeetingInfoRequest}
     * @private
     * @memberof PersonalMeetingRoom
    */

    _this.meetingInfoRequest = new _request.default(options.parent);
    /**
     * The pmr server request interface
     * @instance
     * @type {Object}
     * @private
     * @memberof PersonalMeetingRoom
    */

    _this.personalMeetingRoomRequest = new _request2.default({}, options);
    return _this;
  }
  /**
   * claims a pmr and updates the cached PMR values
   * @param {String} link
   * @param {String} pin
   * @param {Boolean} [preferred] defaults to true to set this claimed PMR as the preferred
   * @returns {Promise}
   * @public
   * @memberof PersonalMeetingRoom
   */


  (0, _createClass2.default)(PersonalMeetingRoom, [{
    key: "claim",
    value: function claim(link, pin) {
      var _this2 = this;

      var preferred = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var options = {
        userId: this.webex.internal.device.userId,
        passcode: pin,
        meetingAddress: link,
        preferred: preferred
      };
      return this.personalMeetingRoomRequest.claimPmr(options).then(function (pmr) {
        if (pmr && pmr.body) {
          _this2.set(pmr.body);
        } else {
          return _promise.default.reject(new _parameter.default('No PMR body provided. PMR values not updated.'));
        }

        return pmr.body;
      });
    }
    /**
     * @param {Object} body the response body from meeting info request
     * @returns {undefined}
     * @private
     * @memberof PersonalMeetingRoom
     */

  }, {
    key: "set",
    value: function set(body) {
      this.pmr = body;
      this.sipUri = body.sipMeetingUri;
      this.meetingLink = body.webExMeetingLink || body.meetingLink;
      this.userId = body.owner;
      this.name = body.meetingName;
      this.number = body.meetingNumber;
    }
    /**
     * TODO: implement TTL for syncing and caching so to not request again and again
     * @param {Object} options
     * @returns {Promise}
     * @public
     * @memberof PersonalMeetingRoom
     */

  }, {
    key: "get",
    value: function get() {
      var _this3 = this;

      var options = {
        type: _constants._PERSONAL_ROOM_,
        destination: this.webex.internal.device.userId
      };
      return this.meetingInfoRequest.fetchMeetingInfo(options).then(function (pmr) {
        if (pmr && pmr.body && pmr.body.isPmr) {
          _this3.set(pmr.body);
        } else {
          return _promise.default.reject(new TypeError('The PMR requested is NOT a PMR. PMR values not set.'));
        }

        return pmr.body;
      });
    }
  }]);
  return PersonalMeetingRoom;
}(_webexCore.StatelessWebexPlugin);

exports.default = PersonalMeetingRoom;
//# sourceMappingURL=index.js.map
