{"version":3,"sources":["request.js"],"names":["MeetingInfoRequest","webex","options","type","destination","ParameterError","resourceUrl","MeetingInfoUtil","getResourceUrl","requestParams","getRequestParams","API","LOCUS","request"],"mappings":";;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;AACA;AACA;IACqBA,kB;AACnB;AACF;AACA;AACA;AACE,8BAAYC,KAAZ,EAAmB;AAAA;AACjB,SAAKA,KAAL,GAAaA,KAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACE,0BAAiBC,OAAjB,EAA0B;AACxB,UAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACC,IAArB,IAA6B,CAACD,OAAO,CAACE,WAA1C,EAAuD;AACrD,cAAM,IAAIC,kBAAJ,CAAmB,0IAAnB,CAAN;AACD;;AACD,UAAMC,WAAW,GAAGC,cAAgBC,cAAhB,CAA+BN,OAAO,CAACC,IAAvC,EAA6CD,OAAO,CAACE,WAArD,CAApB;;AACA,UAAMK,aAAa,GAAGF,cAAgBG,gBAAhB,CAAiCJ,WAAjC,EAA8CJ,OAAO,CAACC,IAAtD,EAA4DD,OAAO,CAACE,WAApE,EAAiFO,eAAIC,KAArF,CAAtB;;AAEA,aAAO,KAAKX,KAAL,CAAWY,OAAX,CAAmBJ,aAAnB,CAAP;AACD","sourcesContent":["import {API} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nimport MeetingInfoUtil from './util';\n/**\n * @class MeetingInfoRequest\n */\nexport default class MeetingInfoRequest {\n  /**\n   * Meeting Info Request Constructor\n   * @param {WebexSDK} webex\n   */\n  constructor(webex) {\n    this.webex = webex;\n  }\n\n  /**\n   *\n   * @param {Object} options with format of {type: String, desintation: String}\n   * where type is PERSONAL_ROOM, SIP_URI, CONVERSATION_URL, and destination is userId, sipUri, conversationUrl respectively\n   * type can also be specified as an option and be of the list SIP_URI,MEETING_ID,LOCUS_ID,PERSONAL_ROOM,MEETING_LINK,ONE_ON_ONE,MEDIA_SIP_URI,CONVERSATION_URL,TEMP_SIP_URI\n   * with the desination matching\n   * @returns {Promise} returns a promise that resolves/rejects the result of the request\n   * @throws {Error} if the options are not valid and complete\n   * @memberof MeetingInfoRequest\n   */\n  fetchMeetingInfo(options) {\n    if (!options || !options.type || !options.destination) {\n      throw new ParameterError('MeetingInfo should be fetched with a type and destination specified, see list of valid types and their corresponding values in constants');\n    }\n    const resourceUrl = MeetingInfoUtil.getResourceUrl(options.type, options.destination);\n    const requestParams = MeetingInfoUtil.getRequestParams(resourceUrl, options.type, options.destination, API.LOCUS);\n\n    return this.webex.request(requestParams);\n  }\n}\n"]}