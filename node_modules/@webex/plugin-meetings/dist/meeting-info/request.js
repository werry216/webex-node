"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _constants = require("../constants");

var _parameter = _interopRequireDefault(require("../common/errors/parameter"));

var _util = _interopRequireDefault(require("./util"));

/**
 * @class MeetingInfoRequest
 */
var MeetingInfoRequest = /*#__PURE__*/function () {
  /**
   * Meeting Info Request Constructor
   * @param {WebexSDK} webex
   */
  function MeetingInfoRequest(webex) {
    (0, _classCallCheck2.default)(this, MeetingInfoRequest);
    this.webex = webex;
  }
  /**
   *
   * @param {Object} options with format of {type: String, desintation: String}
   * where type is PERSONAL_ROOM, SIP_URI, CONVERSATION_URL, and destination is userId, sipUri, conversationUrl respectively
   * type can also be specified as an option and be of the list SIP_URI,MEETING_ID,LOCUS_ID,PERSONAL_ROOM,MEETING_LINK,ONE_ON_ONE,MEDIA_SIP_URI,CONVERSATION_URL,TEMP_SIP_URI
   * with the desination matching
   * @returns {Promise} returns a promise that resolves/rejects the result of the request
   * @throws {Error} if the options are not valid and complete
   * @memberof MeetingInfoRequest
   */


  (0, _createClass2.default)(MeetingInfoRequest, [{
    key: "fetchMeetingInfo",
    value: function fetchMeetingInfo(options) {
      if (!options || !options.type || !options.destination) {
        throw new _parameter.default('MeetingInfo should be fetched with a type and destination specified, see list of valid types and their corresponding values in constants');
      }

      var resourceUrl = _util.default.getResourceUrl(options.type, options.destination);

      var requestParams = _util.default.getRequestParams(resourceUrl, options.type, options.destination, _constants.API.LOCUS);

      return this.webex.request(requestParams);
    }
  }]);
  return MeetingInfoRequest;
}();

exports.default = MeetingInfoRequest;
//# sourceMappingURL=request.js.map
