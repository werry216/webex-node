"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _constants = require("../constants");

var _loggerProxy = _interopRequireDefault(require("../common/logs/logger-proxy"));

var _collection = _interopRequireDefault(require("./collection"));

var _request = _interopRequireDefault(require("./request"));

var _util = _interopRequireDefault(require("./util"));

/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

/**
 * @class MeetingInfo
 */
var MeetingInfo = /*#__PURE__*/function () {
  /**
   *
   * @param {WebexSDK} webex
   */
  function MeetingInfo(webex) {
    (0, _classCallCheck2.default)(this, MeetingInfo);
    this.webex = webex;
    /**
     * The meeting info request server interface
     * @instance
     * @type {Object}
     * @private
     * @memberof MeetingInfo
    */

    this.meetingInfoRequest = new _request.default(this.webex);
    /**
     * The meeting information collection interface
     * @instance
     * @type {Object}
     * @private
     * @memberof MeetingInfo
    */

    this.meetingInfoCollection = new _collection.default();
  }
  /**
   * @param {string} id
   * @returns {object}
   * @public
   * @memberof MeetingInfo
   */


  (0, _createClass2.default)(MeetingInfo, [{
    key: "getMeetingInfo",
    value: function getMeetingInfo(id) {
      return this.meetingInfoCollection.get(id);
    }
    /**
     * @param {string} id
     * @param {object} info
     * @returns {null}
     * @public
     * @memberof MeetingInfo
     */

  }, {
    key: "setMeetingInfo",
    value: function setMeetingInfo(id, info) {
      this.meetingInfoCollection.set(id, info);
    }
    /**
     * Helper to make the actual MeetingInfo request and set the meetingInfo if successful, else reject
     * @param {Object} options
     * @returns {Promise}
     * @private
     * @memberof MeetingInfo
     */

  }, {
    key: "requestFetchInfo",
    value: function requestFetchInfo(options) {
      var _this = this;

      return this.meetingInfoRequest.fetchMeetingInfo(options).then(function (info) {
        if (info && info.body) {
          _this.setMeetingInfo(info.body.sipMeetingUri || info.body.meetingLink, info.body);
        }

        return info;
      }).catch(function (error) {
        _loggerProxy.default.logger.error("Meeting-info:index#requestFetchInfo -->  ".concat(error, " fetch meetingInfo"));

        return _promise.default.reject(error);
      });
    }
    /**
     * Helper to generate the options for the MeetingInfo request
     * @param {String} destination
     * @param {String} type
     * @returns {Promise}
     * @private
     * @memberof MeetingInfo
     */

  }, {
    key: "fetchInfoOptions",
    value: function fetchInfoOptions(destination, type) {
      return _util.default.generateOptions({
        destination: destination,
        type: type,
        webex: this.webex
      });
    }
    /**
     * Fetches meeting info from the server
     * @param {String} destination one of many different types of destinations to look up info for
     * @param {String} [type] to match up with the destination value
     * @returns {Promise} returns a meeting info object
     * @public
     * @memberof MeetingInfo
     */

  }, {
    key: "fetchMeetingInfo",
    value: function fetchMeetingInfo(destination) {
      var _this2 = this;

      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this.fetchInfoOptions(destination, type).then(function (options) {
        return (// fetch meeting info
          _this2.requestFetchInfo(options).catch(function (error) {
            // if it failed the first time as meeting link
            if (options.type === _constants._MEETING_LINK_) {
              // convert the meeting link to sip URI and retry
              return _this2.requestFetchInfo(_this2.fetchInfoOptions(_util.default.convertLinkToSip(destination), _constants._SIP_URI_));
            }

            return _promise.default.reject(error);
          })
        );
      });
    }
  }]);
  return MeetingInfo;
}();

exports.default = MeetingInfo;
//# sourceMappingURL=index.js.map
