"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _constants = require("../constants");

var _parameter = _interopRequireDefault(require("../common/errors/parameter"));

var SelfUtils = {};
/**
 * parses the relevant values for self: muted, guest, moderator, mediaStatus, state, joinedWith, creator, id
 * @param {Object} self
 * @param {String} deviceId
 * @returns {undefined}
 */

SelfUtils.parse = function (self, deviceId) {
  if (self) {
    var joinedWith = self.devices.find(function (device) {
      return deviceId === device.url;
    });
    return {
      remoteMuted: SelfUtils.getRemoteMuted(self),
      unmuteAllowed: SelfUtils.getUnmuteAllowed(self),
      localAudioUnmuteRequested: SelfUtils.getLocalAudioUnmuteRequested(self),
      localAudioUnmuteRequired: SelfUtils.getLocalAudioUnmuteRequired(self),
      lastModified: SelfUtils.getLastModified(self),
      modifiedBy: SelfUtils.getModifiedBy(self),
      guest: self.guest,
      moderator: self.moderator,
      // cumulative media stats
      mediaStatus: SelfUtils.getStatus(self.status),
      // TODO: what should be the status if user has refreshed the page,
      // check the joinedWith parameter and communicate to the user
      state: self.state,
      // TODO: give a proper name . With same device as login or different login`
      // Some times we might have joined with both mobile and web
      joinedWith: joinedWith,
      // current media stats is for the current device who has joined
      currentMediaStatus: SelfUtils.getMediaStatus(joinedWith === null || joinedWith === void 0 ? void 0 : joinedWith.mediaSessions),
      creator: self.isCreator,
      // check if its used,
      selfId: self.id,
      selfIdentity: SelfUtils.getSelfIdentity(self),
      selfUrl: self.url,
      removed: self.removed
    };
  }

  return null;
};

SelfUtils.getSelves = function (oldSelf, newSelf, deviceId) {
  var previous = oldSelf && SelfUtils.parse(oldSelf, deviceId);
  var current = newSelf && SelfUtils.parse(newSelf, deviceId);
  var updates = {};
  updates.isUnadmittedGuest = SelfUtils.isUnadmittedGuest(current);
  updates.isAdmittedGuest = SelfUtils.isAdmittedGuest(previous, current);
  updates.isMutedByOthersChanged = SelfUtils.mutedByOthersChanged(previous, current);
  updates.localAudioUnmuteRequestedByServer = SelfUtils.localAudioUnmuteRequestedByServer(previous, current);
  updates.localAudioUnmuteRequiredByServer = SelfUtils.localAudioUnmuteRequiredByServer(previous, current);
  updates.moderatorChanged = SelfUtils.moderatorChanged(previous, current);
  updates.isMediaInactiveOrReleased = SelfUtils.wasMediaInactiveOrReleased(previous, current);
  updates.isMediaInactive = SelfUtils.isMediaInactive(previous, current);
  updates.audioStateChange = (previous === null || previous === void 0 ? void 0 : previous.currentMediaStatus.audio) !== current.currentMediaStatus.audio;
  updates.videoStateChange = (previous === null || previous === void 0 ? void 0 : previous.currentMediaStatus.video) !== current.currentMediaStatus.video;
  updates.shareStateChange = (previous === null || previous === void 0 ? void 0 : previous.currentMediaStatus.share) !== current.currentMediaStatus.share;
  return {
    previous: previous,
    current: current,
    updates: updates
  };
};

SelfUtils.isMediaInactive = function (previous, current) {
  if (previous && previous.joinedWith && previous.joinedWith.mediaSessions && current && current.joinedWith && current.joinedWith.mediaSessions) {
    var previousMediaStatus = SelfUtils.getMediaStatus(previous.joinedWith.mediaSessions);
    var currentMediaStatus = SelfUtils.getMediaStatus(current.joinedWith.mediaSessions);

    if (previousMediaStatus.audio && currentMediaStatus.audio && previousMediaStatus.audio.state !== _constants.MEDIA_STATE.inactive && currentMediaStatus.audio.state === _constants.MEDIA_STATE.inactive && currentMediaStatus.audio.direction !== _constants.MEDIA_STATE.inactive) {
      return true;
    }

    if (previousMediaStatus.video && currentMediaStatus.video && previousMediaStatus.video.state !== _constants.MEDIA_STATE.inactive && currentMediaStatus.video.state === _constants.MEDIA_STATE.inactive && currentMediaStatus.video.direction !== _constants.MEDIA_STATE.inactive) {
      return true;
    }

    if (previousMediaStatus.share && currentMediaStatus.share && previousMediaStatus.share.state !== _constants.MEDIA_STATE.inactive && currentMediaStatus.share.state === _constants.MEDIA_STATE.inactive && currentMediaStatus.share.direction !== _constants.MEDIA_STATE.inactive) {
      return true;
    }

    return false;
  }

  return false;
};

SelfUtils.getLastModified = function (self) {
  if (!self || !self.controls || !self.controls.audio || !self.controls.audio.meta || !self.controls.audio.meta.lastModified) {
    return null;
  }

  return self.controls.audio.meta.lastModified;
};

SelfUtils.getModifiedBy = function (self) {
  if (!self || !self.controls || !self.controls.audio || !self.controls.audio.meta || !self.controls.audio.meta.modifiedBy) {
    return null;
  }

  return self.controls.audio.meta.modifiedBy;
};
/**
 * get the id from the self object
 * @param {Object} self
 * @returns {String}
 */


SelfUtils.getSelfIdentity = function (self) {
  if (!self && !self.person) {
    return null;
  }

  return self.person.id;
};
/**
 * get the "remote mute" property from the self object
 * @param {Object} self
 * @returns {Boolean}
 */


SelfUtils.getRemoteMuted = function (self) {
  if (!self || !self.controls || !self.controls.audio) {
    return null;
  }

  return self.controls.audio.muted;
};

SelfUtils.getLocalAudioUnmuteRequested = function (self) {
  var _self$controls, _self$controls$audio;

  return !!(self !== null && self !== void 0 && (_self$controls = self.controls) !== null && _self$controls !== void 0 && (_self$controls$audio = _self$controls.audio) !== null && _self$controls$audio !== void 0 && _self$controls$audio.requestedToUnmute);
};

SelfUtils.getUnmuteAllowed = function (self) {
  if (!self || !self.controls || !self.controls.audio) {
    return null;
  }

  return !self.controls.audio.disallowUnmute;
};

SelfUtils.getLocalAudioUnmuteRequired = function (self) {
  var _self$controls2, _self$controls2$audio;

  return !!(self !== null && self !== void 0 && (_self$controls2 = self.controls) !== null && _self$controls2 !== void 0 && (_self$controls2$audio = _self$controls2.audio) !== null && _self$controls2$audio !== void 0 && _self$controls2$audio.localAudioUnmuteRequired);
};

SelfUtils.getStatus = function (status) {
  return {
    audio: status.audioStatus,
    video: status.videoStatus,
    slides: status.videoSlidesStatus
  };
};
/**
 * @param {Object} oldSelf
 * @param {Object} changedSelf
 * @returns {Boolean}
 */


SelfUtils.wasMediaInactiveOrReleased = function () {
  var oldSelf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var changedSelf = arguments.length > 1 ? arguments[1] : undefined;
  return oldSelf.joinedWith && oldSelf.joinedWith.state === _constants._JOINED_ && changedSelf.joinedWith.state === _constants._LEFT_ && (changedSelf.joinedWith.reason === _constants.MEETING_END_REASON.INACTIVE || changedSelf.joinedWith.reason === _constants.MEETING_END_REASON.MEDIA_RELEASED);
};
/**
 * @param {Object} check
 * @returns {Boolean}
 */


SelfUtils.isLocusGuestUnadmitted = function (check) {
  var _check$joinedWith, _check$joinedWith$int;

  return check && ((_check$joinedWith = check.joinedWith) === null || _check$joinedWith === void 0 ? void 0 : (_check$joinedWith$int = _check$joinedWith.intent) === null || _check$joinedWith$int === void 0 ? void 0 : _check$joinedWith$int.type) === _constants._WAIT_ && check.state === _constants._IDLE_;
};
/**
 * @param {Object} check
 * @returns {Boolean}
 */


SelfUtils.isLocusGuestAdmitted = function (check) {
  var _check$joinedWith2, _check$joinedWith2$in;

  return check && ((_check$joinedWith2 = check.joinedWith) === null || _check$joinedWith2 === void 0 ? void 0 : (_check$joinedWith2$in = _check$joinedWith2.intent) === null || _check$joinedWith2$in === void 0 ? void 0 : _check$joinedWith2$in.type) !== _constants._WAIT_ && check.state === _constants._JOINED_;
};
/**
 * @param {Object} self
 * @returns {Boolean}
 * @throws {Error} when self is undefined
 */


SelfUtils.isUnadmittedGuest = function (self) {
  if (!self) {
    throw new _parameter.default('self must be defined to determine if self is unadmitted as guest.');
  }

  return SelfUtils.isLocusGuestUnadmitted(self);
};

SelfUtils.moderatorChanged = function (oldSelf, changedSelf) {
  if (!oldSelf) {
    return true;
  }

  if (!changedSelf) {
    throw new _parameter.default('New self must be defined to determine if self transitioned moderator status.');
  }

  return oldSelf.moderator !== changedSelf.moderator;
};
/**
 * @param {Object} oldSelf
 * @param {Object} changedSelf
 * @returns {Boolean}
 * @throws {Error} if changed self was undefined
 */


SelfUtils.isAdmittedGuest = function (oldSelf, changedSelf) {
  if (!oldSelf) {
    // if there was no previous locus, it couldn't have been admitted yet
    return false;
  }

  if (!changedSelf) {
    throw new _parameter.default('New self must be defined to determine if self transitioned to admitted as guest.');
  }

  return SelfUtils.isLocusGuestUnadmitted(oldSelf) && SelfUtils.isLocusGuestAdmitted(changedSelf);
};

SelfUtils.mutedByOthersChanged = function (oldSelf, changedSelf) {
  if (!changedSelf) {
    throw new _parameter.default('New self must be defined to determine if self was muted by others.');
  }

  if (!oldSelf || oldSelf.remoteMuted === null) {
    if (changedSelf.remoteMuted) {
      return true; // this happens when mute on-entry is enabled
    } // we don't want to be sending the 'meeting:self:unmutedByOthers' notification on meeting join


    return false;
  }

  return oldSelf.remoteMuted !== changedSelf.remoteMuted || changedSelf.remoteMuted && oldSelf.unmuteAllowed !== changedSelf.unmuteAllowed;
};

SelfUtils.localAudioUnmuteRequestedByServer = function () {
  var oldSelf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var changedSelf = arguments.length > 1 ? arguments[1] : undefined;

  if (!changedSelf) {
    throw new _parameter.default('New self must be defined to determine if self received request to unmute.');
  }

  return changedSelf.localAudioUnmuteRequested && !oldSelf.localAudioUnmuteRequested;
};

SelfUtils.localAudioUnmuteRequiredByServer = function () {
  var oldSelf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var changedSelf = arguments.length > 1 ? arguments[1] : undefined;

  if (!changedSelf) {
    throw new _parameter.default('New self must be defined to determine if localAudioUnmuteRequired changed.');
  }

  return !changedSelf.remoteMuted && changedSelf.localAudioUnmuteRequired && oldSelf.localAudioUnmuteRequired !== changedSelf.localAudioUnmuteRequired;
};
/**
 * extract the sipUrl from the partner
 * @param {Object} partner
 * @param {Object} info
 * @returns {Object}
 */


SelfUtils.getSipUrl = function (partner, type, sipUri) {
  // For webex meeting the sipUrl gets updated in info parser
  if (partner && type === _constants._CALL_) {
    return {
      sipUri: partner.person.sipUrl || partner.person.id
    };
  }

  return {
    sipUri: sipUri
  };
};

SelfUtils.getMediaStatus = function () {
  var mediaSessions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var mediaStatus = {
    audio: {},
    video: {},
    share: {}
  };
  mediaStatus.audio = mediaSessions.find(function (media) {
    return media.mediaType === _constants.AUDIO && media.mediaContent === _constants.MediaContent.main;
  });
  mediaStatus.video = mediaSessions.find(function (media) {
    return media.mediaType === _constants.VIDEO && media.mediaContent === _constants.MediaContent.main;
  });
  mediaStatus.share = mediaSessions.find(function (media) {
    return media.mediaType === _constants.VIDEO && media.mediaContent === _constants.MediaContent.slides;
  });
  return mediaStatus;
};

var _default = SelfUtils;
exports.default = _default;
//# sourceMappingURL=selfUtils.js.map
