{"version":3,"sources":["hostUtils.js"],"names":["HostUtils","parse","host","hostId","getId","getHosts","oldHost","newHost","previous","current","updates","isNewHost","isDifferentHosts","previousId","currentId","id"],"mappings":";;;;;;;;;AAAA,IAAMA,SAAS,GAAG,EAAlB;AAEA;AACA;AACA;AACA;AACA;;AACAA,SAAS,CAACC,KAAV,GAAkB,UAACC,IAAD,EAAU;AAC1B,MAAIA,IAAJ,EAAU;AACR,WAAO;AACLC,MAAAA,MAAM,EAAEH,SAAS,CAACI,KAAV,CAAgBF,IAAhB;AADH,KAAP;AAGD;;AAED,SAAO,IAAP;AACD,CARD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,SAAS,CAACK,QAAV,GAAqB,UAACC,OAAD,EAAUC,OAAV,EAAsB;AACzC,MAAMC,QAAQ,GAAGF,OAAO,IAAIN,SAAS,CAACC,KAAV,CAAgBK,OAAhB,CAA5B;AACA,MAAMG,OAAO,GAAGF,OAAO,IAAIP,SAAS,CAACC,KAAV,CAAgBM,OAAhB,CAA3B;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAARA,QADK;AAELC,IAAAA,OAAO,EAAPA,OAFK;AAGLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAEH,QAAQ,IAAIC,OAAZ,GAAsBT,SAAS,CAACY,gBAAV,CAA2BJ,QAAQ,CAACL,MAApC,EAA4CM,OAAO,CAACN,MAApD,CAAtB,GAAoF;AADxF;AAHJ,GAAP;AAOD,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;;;AACAH,SAAS,CAACY,gBAAV,GAA6B,UAACC,UAAD,EAAaC,SAAb;AAAA,SAA2BD,UAAU,KAAKC,SAA1C;AAAA,CAA7B;AAEA;AACA;AACA;AACA;AACA;;;AACAd,SAAS,CAACI,KAAV,GAAkB,UAACF,IAAD,EAAU;AAC1B,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,SAAOA,IAAI,CAACa,EAAZ;AACD,CAND;;eAQef,S","sourcesContent":["const HostUtils = {};\n\n/**\n * parse the relevant host values that we care about: id\n * @param {Object} host\n * @returns {Object} parsed host or null if host was undefined\n */\nHostUtils.parse = (host) => {\n  if (host) {\n    return {\n      hostId: HostUtils.getId(host)\n    };\n  }\n\n  return null;\n};\n\n/**\n * get the previous and current host values parsed, as well as the boolean updates\n * @param {Object} oldHost\n * @param {Object} newHost\n * @returns {Object}\n * previous: {Object} old host, current: {Object} new host, updates: {isNewHost: {boolean}} boolean update values\n */\nHostUtils.getHosts = (oldHost, newHost) => {\n  const previous = oldHost && HostUtils.parse(oldHost);\n  const current = newHost && HostUtils.parse(newHost);\n\n  return {\n    previous,\n    current,\n    updates: {\n      isNewHost: previous && current ? HostUtils.isDifferentHosts(previous.hostId, current.hostId) : true\n    }\n  };\n};\n\n/**\n * determine by id if 2 hosts are different\n * @param {String} previousId\n * @param {String} currentId\n * @returns {Boolean}\n */\nHostUtils.isDifferentHosts = (previousId, currentId) => previousId !== currentId;\n\n/**\n * Extract the id from the host object\n * @param {Object} host\n * @returns {String}\n */\nHostUtils.getId = (host) => {\n  if (!host) {\n    return null;\n  }\n\n  return host.id;\n};\n\nexport default HostUtils;\n"]}