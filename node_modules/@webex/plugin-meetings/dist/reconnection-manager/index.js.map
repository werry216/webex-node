{"version":3,"sources":["index.js"],"names":["NeedsRetryError","Error","NeedsRejoinError","wasSharing","error","ReconnectionManager","meeting","iceState","disconnected","resolve","timer","undefined","timeoutDuration","config","reconnection","iceReconnectionTimeout","status","RECONNECTION","STATE","DEFAULT_STATUS","tryCount","DEFAULT_TRY_COUNT","webex","maxRejoinAttempts","rejoinAttempts","autoRejoinEnabled","autoRejoin","reset","LoggerProxy","logger","log","clearTimeout","reject","setTimeout","enabled","COMPLETE","info","ReconnectInProgress","ReconnectionError","networkDisconnect","networkRetry","id","validate","Metrics","postEvent","event","eventType","MEDIA_RECONNECTING","executeReconnection","then","MEDIA_RECOVERED","data","recoveredBy","RECOVERED_BY_NEW","catch","reconnectError","reconnect","message","reconnectMetric","CALL_ABORTED","errors","category","errorObjects","expected","errorCode","fatal","name","mediaEngine","shownToUser","rejoinMeeting","IN_PROGRESS","reconnectMercuryWebSocket","internal","device","url","FAILURE","shareStatus","SHARE_STATUS","LOCAL_SHARE_ACTIVE","meetings","syncMeetings","getMeetingByType","_ID_","state","_LEFT_","type","_CALL_","reconnectMedia","media","previousCorrelationId","correlationId","join","rejoin","RoapCollection","deleteSession","Media","stopTracks","mediaProperties","shareTrack","isSharing","NO_SHARE","mediaDirection","sendShare","Trigger","trigger","file","function","EVENT_TRIGGERS","MEETING_STOPPED_SHARING_LOCAL","reason","SHARE_STOPPED_REASON","MEETING_REJOIN","sendOperationalMetric","METRICS_OPERATIONAL_MEASURES","MEETING_MAX_REJOIN_FAILURE","locus_id","locusUrl","split","pop","stack","setupPeerConnection","attachMedia","meetingId","remoteQualityLevel","enableRtx","peerConnection","setRemoteStream","roap","sendRoapMediaRequest","sdp","roapSeq","mercury","connected","disconnect","connect","PeerConnectionManager","close","unsetPeerConnection","reInitiatePeerconnection","setPeerConnectionEvents","statsAnalyzer","updatePeerconnection"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-disable no-warning-comments */\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Trigger from '../common/events/trigger-proxy';\nimport {\n  EVENT_TRIGGERS,\n  METRICS_OPERATIONAL_MEASURES,\n  RECONNECTION,\n  SHARE_STATUS,\n  SHARE_STOPPED_REASON,\n  _CALL_,\n  _LEFT_,\n  _ID_\n} from '../constants';\nimport ReconnectionError from '../common/errors/reconnection';\nimport ReconnectInProgress from '../common/errors/reconnection-in-progress';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport {eventType, reconnection, errorObjects} from '../metrics/config';\nimport Media from '../media';\nimport Metrics from '../metrics';\nimport RoapCollection from '../roap/collection';\n\n/**\n * Used to indicate that the reconnect logic needs to be retried.\n *\n * @class NeedsRetryError\n * @extends {Error}\n */\nclass NeedsRetryError extends Error {}\n\n/**\n * Used to indicate that the meeting needs to be rejoined, not just media reconnected\n *\n * @class NeedsRejoinError\n * @extends {Error}\n */\nclass NeedsRejoinError extends Error {\n  /**\n   * Creates an instance of NeedsRejoinError.\n   * @param {Object} params\n   * @param {boolean} params.wasSharing\n   * @param {Error} params.error\n   * @memberof NeedsRejoinError\n   */\n  constructor({wasSharing, error = new Error('Meeting needs to be rejoined')}) {\n    super(error);\n\n    this.wasSharing = wasSharing;\n  }\n}\n\n/**\n * @export\n * @class ReconnectionManager\n*/\nexport default class ReconnectionManager {\n  /**\n   * @param {Meeting} meeting\n   */\n  constructor(meeting) {\n    /**\n     * Stores ICE reconnection state data.\n     *\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof ReconnectionManager\n     */\n    this.iceState = {\n      disconnected: false,\n      resolve: () => {},\n      timer: undefined,\n      timeoutDuration: meeting.config.reconnection.iceReconnectionTimeout\n    };\n\n    /**\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof ReconnectionManager\n    */\n    this.status = RECONNECTION.STATE.DEFAULT_STATUS;\n    /**\n     * @instance\n     * @type {Number}\n     * @private\n     * @memberof ReconnectionManager\n    */\n    this.tryCount = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n    /**\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof ReconnectionManager\n    */\n    // TODO : change this logic to not save the meeting instance\n    // It gets complicated when meeting ends on remote side , We have a old meeting instance which is not up to date\n    this.webex = meeting.webex;\n    /**\n     * @instance\n     * @type {Meeting}\n     * @private\n     * @memberof ReconnectionManager\n     */\n    // TODO: try removing the circular dependency for meeting and reconnection manager\n    // try moving this to meetings collection\n    this.meeting = meeting;\n\n    this.maxRejoinAttempts = meeting.config.reconnection.maxRejoinAttempts;\n    this.rejoinAttempts = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n    this.autoRejoinEnabled = meeting.config.reconnection.autoRejoin;\n\n\n    // Make sure reconnection state is in default\n    this.reset();\n  }\n\n  /**\n   * Sets the iceState to connected and clears any disconnect timeouts and\n   * related timeout data within the iceState.\n   *\n   * @returns {undefined}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  iceReconnected() {\n    if (this.iceState.disconnected) {\n      LoggerProxy.logger.log('ReconnectionManager:index#iceReconnected --> ice has reconnected');\n\n      this.iceState.resolve();\n      this.iceState.resolve = () => {};\n\n      if (this.iceState.timer) {\n        clearTimeout(this.iceState.timer);\n        delete this.iceState.timer;\n      }\n\n      this.iceState.disconnected = false;\n    }\n  }\n\n  /**\n   * Set the iceState to disconnected and generates a timeout that waits for the\n   * iceState to reconnect and then resolves. If the ice state is already\n   * processing a reconnect, it immediately resolves. Rejects if the timeout\n   * duration is reached.\n   *\n   * @returns {Promise<undefined>}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  waitForIceReconnect() {\n    if (!this.iceState.disconnected) {\n      LoggerProxy.logger.log('ReconnectionManager:index#waitForIceReconnect --> waiting for ice reconnect');\n\n      this.iceState.disconnected = true;\n\n      return new Promise((resolve, reject) => {\n        this.iceState.timer = setTimeout(() => {\n          if (this.iceState.disconnected === false) {\n            resolve();\n          }\n          else {\n            this.iceState.disconnected = false;\n            reject(new Error(`ice reconnection did not occur in ${this.iceState.timeoutDuration}ms`));\n          }\n        }, this.iceState.timeoutDuration);\n\n        this.iceState.resolve = resolve;\n      });\n    }\n\n    // return a resolved promise to prevent multiple catch executions of reconnect\n    return Promise.resolve();\n  }\n\n  /**\n   * @returns {undefined}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  reset() {\n    this.status = RECONNECTION.STATE.DEFAULT_STATUS;\n    this.tryCount = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n    this.rejoinAttempts = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n  }\n\n  /**\n   * @returns {undefined}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  cleanUp() {\n    this.reset();\n    this.meeting = null;\n  }\n\n  /**\n   * @returns {Boolean}\n   * @throws {ReconnectionError}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  validate() {\n    if (this.meeting.config.reconnection.enabled) {\n      if (\n        this.status === RECONNECTION.STATE.DEFAULT_STATUS ||\n        this.status === RECONNECTION.STATE.COMPLETE\n      ) {\n        return true;\n      }\n\n      LoggerProxy.logger.info('ReconnectionManager:index#validate --> Reconnection already in progress.');\n\n      throw new ReconnectInProgress('Reconnection already in progress.');\n    }\n\n    LoggerProxy.logger.info('ReconnectionManager:index#validate --> Reconnection is not enabled.');\n\n    throw new ReconnectionError('Reconnection is not enabled.');\n  }\n\n  /**\n   * Initiates a media reconnect for the active meeting\n   * @param {Object} reconnectOptions\n   * @param {boolean} [reconnectOptions.networkDisconnect=false] indicates if a network disconnect event happened\n   * @param {boolean} [reconnectOptions.networkRetry=false] indicates if we are retrying the reconnect\n   * @returns {Promise}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  async reconnect({networkDisconnect = false, networkRetry = false} = {}) {\n    LoggerProxy.logger.info(`ReconnectionManager:index#reconnect --> Reconnection start for meeting ${this.meeting.id}.`);\n    // First, validate that we can reconnect, if not, it will throw an error\n    try {\n      this.validate();\n    }\n    catch (error) {\n      LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Reconnection unable to begin.', error);\n      throw error;\n    }\n\n    if (!networkRetry) {\n      // Only log START metrics on the initial reconnect\n      LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Sending reconnect start metric.');\n      Metrics.postEvent({\n        event: eventType.MEDIA_RECONNECTING,\n        meeting: this.meeting\n      });\n    }\n\n    return this.executeReconnection({networkDisconnect})\n      .then(() => {\n        LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Reconnection successful.');\n        LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Sending reconnect success metric.');\n        Metrics.postEvent({\n          event: eventType.MEDIA_RECOVERED,\n          meeting: this.meeting,\n          data: {recoveredBy: reconnection.RECOVERED_BY_NEW}\n        });\n      })\n      .catch((reconnectError) => {\n        if (reconnectError instanceof NeedsRetryError) {\n          LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Reconnection not successful, retrying.');\n          // Reset our reconnect status since we are looping back to the beginning\n          this.status = RECONNECTION.STATE.DEFAULT_STATUS;\n\n          // This is a network retry, so we should not log START metrics again\n          return this.reconnect({networkDisconnect: true, networkRetry: true});\n        }\n\n        // Reconnect has failed\n        LoggerProxy.logger.error('ReconnectionManager:index#reconnect --> Reconnection failed.', reconnectError.message);\n        LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Sending reconnect abort metric.');\n\n        const reconnectMetric = {\n          event: eventType.CALL_ABORTED,\n          meeting: this.meeting,\n          data: {\n            errors: [\n              {\n                category: errorObjects.category.expected,\n                errorCode: 2008,\n                fatal: true,\n                name: errorObjects.name.mediaEngine,\n                shownToUser: false\n              }\n            ]\n          }\n        };\n\n        Metrics.postEvent(reconnectMetric);\n        if (reconnectError instanceof NeedsRejoinError) {\n          // send call aborded event with catogery as expected as we are trying to rejoin\n\n          if (this.autoRejoinEnabled) {\n            return this.rejoinMeeting(reconnectError.wasSharing);\n          }\n        }\n\n\n        throw reconnectError;\n      });\n  }\n\n  /**\n   * @param {Object} reconnectOptions\n   * @param {boolean} [reconnectOptions.networkDisconnect=false] indicates if a network disconnect event happened\n   * @returns {Promise}\n   * @throws {NeedsRetryError}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  async executeReconnection({networkDisconnect = false}) {\n    this.status = RECONNECTION.STATE.IN_PROGRESS;\n\n    LoggerProxy.logger.info('ReconnectionManager:index#executeReconnection --> Attempting to reconnect to meeting.');\n\n    if (networkDisconnect) {\n      try {\n        await this.reconnectMercuryWebSocket();\n        LoggerProxy.logger.error('ReconnectionManager:index#executeReconnection --> Websocket reconnected.', this.webex.internal.device.url);\n      }\n      catch (error) {\n        LoggerProxy.logger.error('ReconnectionManager:index#executeReconnection --> Unable to reconnect to websocket, giving up.');\n        this.status = RECONNECTION.STATE.FAILURE;\n        throw (error);\n      }\n    }\n\n    const wasSharing = this.meeting.shareStatus === SHARE_STATUS.LOCAL_SHARE_ACTIVE;\n\n    try {\n      LoggerProxy.logger.info('ReconnectionManager:index#executeReconnection --> Updating meeting data from server.');\n      await this.webex.meetings.syncMeetings();\n    }\n    catch (syncError) {\n      LoggerProxy.logger.info('ReconnectionManager:index#executeReconnection --> Unable to sync meetings, reconnecting.', syncError);\n      throw (new NeedsRetryError(syncError));\n    }\n\n    // TODO: try to improve this logic as the reconnection manager saves the instance of deleted meeting object\n    // So that on rejoin it known what parametrs it was using\n    if (!this.meeting || !this.webex.meetings.getMeetingByType(_ID_, this.meeting.id)) {\n      LoggerProxy.logger.info('ReconnectionManager:index#executeReconnection --> Meeting got deleted due to inactivity or ended remotely ');\n\n      throw new Error('Unable to rejoin a meeting already ended or inactive .');\n    }\n\n    LoggerProxy.logger.info(`ReconnectionManager:index#executeReconnection --> Current state of meeting is ${this.meeting.state}`);\n\n    // If the meeting state was left, no longer reconnect media\n    if (this.meeting.state === _LEFT_) {\n      if (this.meeting.type === _CALL_) {\n        throw new Error('Unable to rejoin a call in LEFT state.');\n      }\n\n      throw (new NeedsRejoinError({wasSharing}));\n    }\n\n    try {\n      const media = await this.reconnectMedia();\n\n      LoggerProxy.logger.log('ReconnectionManager:index#executeReconnection --> Media reestablished');\n      this.status = RECONNECTION.STATE.COMPLETE;\n\n      return media;\n    }\n    catch (error) {\n      LoggerProxy.logger.error('ReconnectionManager:index#executeReconnection --> Media reestablishment failed');\n      this.status = RECONNECTION.STATE.FAILURE;\n\n      throw (error);\n    }\n  }\n\n  /**\n   * Rejoins a meeting after detecting the member was in a LEFT state\n   *\n   * @async\n   * @param {boolean} wasSharing\n   * @returns {Promise}\n   */\n  async rejoinMeeting(wasSharing = false) {\n    try {\n      LoggerProxy.logger.info('ReconnectionManager:index#rejoinMeeting --> attemping meeting rejoin');\n      const previousCorrelationId = this.meeting.correlationId;\n\n      await this.meeting.join({rejoin: true});\n      LoggerProxy.logger.info('ReconnectionManager:index#rejoinMeeting --> meeting rejoined');\n\n      RoapCollection.deleteSession(previousCorrelationId);\n\n      if (wasSharing) {\n        // Stop the share streams if user tried to rejoin\n        Media.stopTracks(this.meeting.mediaProperties.shareTrack);\n        this.meeting.isSharing = false;\n        if (this.shareStatus === SHARE_STATUS.LOCAL_SHARE_ACTIVE) {\n          this.meeting.shareStatus = SHARE_STATUS.NO_SHARE;\n        }\n        this.meeting.mediaProperties.mediaDirection.sendShare = false;\n        Trigger.trigger(\n          this.meeting,\n          {\n            file: 'reconnection-manager/index',\n            function: 'rejoinMeeting'\n          },\n          EVENT_TRIGGERS.MEETING_STOPPED_SHARING_LOCAL,\n          {\n            reason: SHARE_STOPPED_REASON.MEETING_REJOIN\n          }\n        );\n      }\n    }\n    catch (joinError) {\n      this.rejoinAttempts += 1;\n      if (this.rejoinAttempts <= this.maxRejoinAttempts) {\n        LoggerProxy.logger.info(`ReconnectionManager:index#rejoinMeeting --> Unable to rejoin meeting, attempt #${this.rejoinAttempts}, retrying.`, joinError);\n        this.rejoinMeeting();\n      }\n      else {\n        LoggerProxy.logger.error('ReconnectionManager:index#rejoinMeeting --> Unable to rejoin meeting after max attempts.', joinError);\n        Metrics.sendOperationalMetric(\n          METRICS_OPERATIONAL_MEASURES.MEETING_MAX_REJOIN_FAILURE,\n          {\n            locus_id: this.meeting.locusUrl.split('/').pop(),\n            reason: joinError.message,\n            stack: joinError.stack\n          }\n        );\n        this.status = RECONNECTION.STATE.FAILURE;\n        throw joinError;\n      }\n    }\n\n    try {\n      await this.reconnectMedia();\n    }\n    catch (mediaError) {\n      LoggerProxy.logger.error('ReconnectionManager:index#rejoinMeeting --> Unable to reestablish media after rejoining.', mediaError);\n      throw mediaError;\n    }\n  }\n\n  /**\n   * @returns {Promise}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  reconnectMedia() {\n    LoggerProxy.logger.log('ReconnectionManager:index#reconnectMedia --> Begin reestablishment of media');\n\n    ReconnectionManager.setupPeerConnection(this.meeting);\n\n    return Media.attachMedia(this.meeting.mediaProperties, {\n      meetingId: this.meeting.id,\n      remoteQualityLevel: this.meeting.mediaProperties.remoteQualityLevel,\n      enableRtx: this.meeting.config.enableRtx\n    })\n      .then((peerConnection) => this.meeting.setRemoteStream(peerConnection))\n      .then(() => {\n        LoggerProxy.logger.log('ReconnectionManager:index#reconnectMedia --> Sending ROAP media request');\n\n        return this.meeting.roap\n          .sendRoapMediaRequest({\n            sdp: this.meeting.mediaProperties.peerConnection.sdp,\n            roapSeq: this.meeting.roapSeq,\n            meeting: this.meeting,\n            reconnect: true\n          });\n      });\n  }\n\n  /**\n   * Attempt to Reconnect Mercury Websocket\n   * @returns {Promise}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  async reconnectMercuryWebSocket() {\n    LoggerProxy.logger.info('ReconnectionManager:index#reconnectMercuryWebSocket --> Reconnecting websocket.');\n    // First, attempt to disconnect if we think we are already connected.\n    if (this.webex.internal.mercury.connected) {\n      LoggerProxy.logger.info('ReconnectionManager:index#reconnectMercuryWebSocket --> Disconnecting existing websocket.');\n      try {\n        await this.webex.internal.mercury.disconnect();\n        LoggerProxy.logger.info('ReconnectionManager:index#reconnectMercuryWebSocket --> Websocket disconnected successfully.');\n      }\n      catch (disconnectError) {\n        // If we can't disconnect, the sdk is in such a bad state that reconnecting is not going to happen.\n        LoggerProxy.logger.error('ReconnectionManager:index#reconnectMercuryWebSocket --> Unable to disconnect from websocket, giving up.', disconnectError);\n        throw disconnectError;\n      }\n    }\n\n    try {\n      LoggerProxy.logger.info('ReconnectionManager:index#reconnectMercuryWebSocket --> Connecting websocket.');\n      await this.webex.internal.mercury.connect();\n      LoggerProxy.logger.info('ReconnectionManager:index#reconnectMercuryWebSocket --> Websocket connected successfully.');\n    }\n    catch (connectError) {\n      LoggerProxy.logger.error('ReconnectionManager:index#reconnectMercuryWebSocket --> Unable to connect to websocket, giving up.', connectError);\n\n      throw (connectError);\n    }\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @returns {undefined}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  static setupPeerConnection(meeting) {\n    LoggerProxy.logger.log('ReconnectionManager:index#setupPeerConnection --> Begin resetting peer connection');\n    // close pcs, unset to null and create a new one with out closing any streams\n    PeerConnectionManager.close(meeting.mediaProperties.peerConnection);\n    meeting.mediaProperties.unsetPeerConnection();\n    meeting.mediaProperties.reInitiatePeerconnection();\n    PeerConnectionManager.setPeerConnectionEvents(meeting);\n    // update the peerconnection in the stats manager when ever we reconnect\n    meeting.statsAnalyzer.updatePeerconnection(meeting.mediaProperties.peerConnection);\n  }\n}\n"]}