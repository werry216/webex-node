{"version":3,"sources":["mqaUtil.js"],"names":["getAudioReceiverMqa","audioReceiver","statsResults","lastMqaDataSent","mediaType","STATS","AUDIO_CORRELATE","sendrecvType","RECEIVE_DIRECTION","common","direction","transportType","connectionType","remote","transport","rtpPackets","totalPacketsReceived","streams","mediaHopByHopLost","totalPacketsLost","rtpHopByHopLost","maxRtpJitter","meanRtpJitter","rtpJitter","fecRecovered","fecPacketsReceived","fecPacketsDiscarded","rtpEndToEndLost","framesDropped","totalSamplesDecoded","renderedFrameRate","framesReceived","totalSamplesReceived","concealedFrames","concealedSamples","receivedBitrate","totalBytesReceived","rtpBitrate","getAudioSenderMqa","audioSender","SEND_DIRECTION","local","maxRemoteJitter","meanRemoteJitter","totalPacketsSent","availableBitrate","availableOutgoingBitrate","totalpacketsLostForaMin","totalPacketsLostOnReceiver","remoteLossRate","maxRoundTripTime","meanRoundTripTime","roundTripTime","totalBytesSentInaMin","totalBytesSent","transmittedBitrate","transmittedKeyFrames","totalKeyFramesEncoded","requestedKeyFrames","totalFirCount","getVideoReceiverMqa","videoReceiver","isShareStream","SHARE_CORRELATE","VIDEO_CORRELATE","totalPacketLoss","totalBytesReceivedInaMin","totalFrameReceivedInaMin","resolutions","totalFrameDecodedInaMin","framesDecoded","receivedFrameRate","receivedHeight","height","receivedWidth","width","receivedFrameSize","receivedKeyFrames","keyFramesDecoded","totalPliCount","getVideoSenderMqa","videoSender","totalFrameSentInaMin","framesSent","transmittedFrameRate","transmittedHeight","transmittedWidth","transmittedFrameSize"],"mappings":"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","sourcesContent":["\nimport {mean, max} from 'lodash';\n\nimport {STATS} from '../constants';\n\nexport const getAudioReceiverMqa = ({audioReceiver, statsResults, lastMqaDataSent}) => {\n  const mediaType = STATS.AUDIO_CORRELATE;\n  const sendrecvType = STATS.RECEIVE_DIRECTION;\n\n  audioReceiver.common.common.direction = statsResults[mediaType].direction;\n  audioReceiver.common.transportType = statsResults.connectionType.remote.transport[0];\n  // add rtpPacket info inside common as also for call analyzer\n  audioReceiver.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].totalPacketsReceived || 0;\n  // Hop by hop are numbers and not percentage so we compare on what we sent the last min\n  // collect the packets received for the last min\n  audioReceiver.streams[0].common.rtpPackets = audioReceiver.common.rtpPackets;\n  audioReceiver.common.mediaHopByHopLost = (statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost) || 0;\n  audioReceiver.common.rtpHopByHopLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0;\n\n  audioReceiver.streams[0].common.maxRtpJitter = max(statsResults[mediaType][sendrecvType].meanRtpJitter) * 1000 || 0;\n  audioReceiver.streams[0].common.meanRtpJitter = mean(statsResults[mediaType][sendrecvType].meanRtpJitter) * 1000 || 0;\n  audioReceiver.streams[0].common.rtpJitter = audioReceiver.streams[0].common.maxRtpJitter;\n\n  // Fec packets do come in as part of the FEC only for audio\n  const fecRecovered = (statsResults[mediaType][sendrecvType].fecPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].fecPacketsReceived) - (statsResults[mediaType][sendrecvType].fecPacketsDiscarded - lastMqaDataSent[mediaType][sendrecvType].fecPacketsDiscarded);\n\n  audioReceiver.streams[0].common.rtpEndToEndLost = (statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost) - fecRecovered || 0;\n\n  audioReceiver.streams[0].common.framesDropped = statsResults[mediaType][sendrecvType].totalSamplesDecoded - lastMqaDataSent[mediaType][sendrecvType].totalSamplesDecoded || 0;\n  audioReceiver.streams[0].common.renderedFrameRate = audioReceiver.streams[0].common.framesDropped * 100 / 60 || 0;\n  audioReceiver.streams[0].common.framesReceived = statsResults[mediaType][sendrecvType].totalSamplesReceived - lastMqaDataSent[mediaType][sendrecvType].totalSamplesReceived || 0;\n  audioReceiver.streams[0].common.concealedFrames = statsResults[mediaType][sendrecvType].concealedSamples - lastMqaDataSent[mediaType][sendrecvType].concealedSamples || 0;\n  audioReceiver.streams[0].common.receivedBitrate = (statsResults[mediaType][sendrecvType].totalBytesReceived - lastMqaDataSent[mediaType][sendrecvType].totalBytesReceived) * 8 / 60 || 0;\n\n  audioReceiver.common.rtpBitrate = audioReceiver.streams[0].common.receivedBitrate;\n};\n\n\nexport const getAudioSenderMqa = ({audioSender, statsResults, lastMqaDataSent}) => {\n  const mediaType = STATS.AUDIO_CORRELATE;\n  const sendrecvType = STATS.SEND_DIRECTION;\n\n  audioSender.common.common.direction = statsResults[mediaType].direction;\n  audioSender.common.transportType = statsResults.connectionType.local.transport[0];\n\n  audioSender.common.maxRemoteJitter = max(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n  audioSender.common.meanRemoteJitter = mean(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n\n  audioSender.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;\n  audioSender.streams[0].common.rtpPackets = audioSender.common.rtpPackets;\n  // From candidate-pair\n  audioSender.common.availableBitrate = statsResults[mediaType][sendrecvType].availableOutgoingBitrate || 0;\n  // Calculate based on how much packets lost of received compated to how to the client sent\n\n  const totalpacketsLostForaMin = statsResults[mediaType][sendrecvType].totalPacketsLostOnReceiver - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLostOnReceiver;\n\n  audioSender.common.remoteLossRate = totalpacketsLostForaMin > 0 ? (totalpacketsLostForaMin * 100 / audioSender.common.rtpPackets) : 0; // This is the packets sent with in last min || 0;\n\n  audioSender.common.maxRoundTripTime = max(statsResults[mediaType][sendrecvType].meanRoundTripTime) * 1000 || 0;\n  audioSender.common.meanRoundTripTime = mean(statsResults[mediaType][sendrecvType].meanRoundTripTime) * 1000 || 0;\n  audioSender.common.roundTripTime = audioSender.common.maxRoundTripTime;\n\n\n  // Calculate the outgoing bitrate\n  const totalBytesSentInaMin = statsResults[mediaType][sendrecvType].totalBytesSent - lastMqaDataSent[mediaType][sendrecvType].totalBytesSent;\n\n  audioSender.streams[0].common.transmittedBitrate = totalBytesSentInaMin ? (totalBytesSentInaMin) * 8 / 60 : 0;\n  audioSender.common.rtpBitrate = audioSender.streams[0].common.transmittedBitrate;\n\n\n  audioSender.streams[0].transmittedKeyFrames = statsResults[mediaType][sendrecvType].totalKeyFramesEncoded - lastMqaDataSent[mediaType][sendrecvType].totalKeyFramesEncoded || 0;\n  audioSender.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalFirCount - lastMqaDataSent[mediaType][sendrecvType].totalFirCount || 0;\n};\n\n\nexport const getVideoReceiverMqa = ({\n  videoReceiver, statsResults, lastMqaDataSent, isShareStream = false\n}) => {\n  const mediaType = isShareStream ? STATS.SHARE_CORRELATE : STATS.VIDEO_CORRELATE;\n  const sendrecvType = STATS.RECEIVE_DIRECTION;\n\n  videoReceiver.common.common.direction = statsResults[mediaType].direction;\n  videoReceiver.common.transportType = statsResults.connectionType.remote.transport[0];\n  // collect the packets received for the last min\n  videoReceiver.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].totalPacketsReceived || 0;\n  videoReceiver.streams[0].common.rtpPackets = videoReceiver.common.rtpPackets;\n\n  const totalPacketLoss = (statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost) || 0;\n\n  // Hope by hop are numbers and not percentage so we compare on what we sent the last min\n  // this is including packet lost\n  videoReceiver.common.mediaHopByHopLost = totalPacketLoss;\n  videoReceiver.common.rtpHopByHopLost = totalPacketLoss;\n\n  // End to end packetloss is after recovery\n  videoReceiver.streams[0].common.rtpEndToEndLost = totalPacketLoss;\n\n  // calculate this values\n\n  videoReceiver.common.maxRemoteJitter = max(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n  videoReceiver.common.meanRemoteJitter = mean(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n\n  videoReceiver.streams[0].common.rtpJitter = videoReceiver.common.maxRemoteJitter;\n  // videoReceiver.streams[0].common.rtpJitter = (statsResults.resolutions[mediaType][sendrecvType].jitterBufferDelay - lastMqaDataSent.resolutions[mediaType][sendrecvType].jitterBufferDelay) / (statsResults.resolutions[mediaType][sendrecvType].jitterBufferEmittedCount - lastMqaDataSent.resolutions[mediaType][sendrecvType].jitterBufferEmittedCount) * 1000 || 0;\n\n  // Calculate the outgoing bitrate\n  const totalBytesReceivedInaMin = statsResults[mediaType][sendrecvType].totalBytesReceived - lastMqaDataSent[mediaType][sendrecvType].totalBytesReceived;\n\n  videoReceiver.streams[0].common.receivedBitrate = totalBytesReceivedInaMin ? (totalBytesReceivedInaMin) * 8 / 60 : 0;\n  videoReceiver.common.rtpBitrate = videoReceiver.streams[0].common.receivedBitrate;\n\n  // From tracks //TODO: calculate a proper one\n  const totalFrameReceivedInaMin = statsResults.resolutions[mediaType][sendrecvType].framesReceived - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesReceived;\n  const totalFrameDecodedInaMin = statsResults.resolutions[mediaType][sendrecvType].framesDecoded - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesDecoded;\n\n  videoReceiver.streams[0].common.receivedFrameRate = totalFrameReceivedInaMin ? totalFrameReceivedInaMin * 100 / 60 : 0;\n  videoReceiver.streams[0].common.renderedFrameRate = totalFrameDecodedInaMin ? totalFrameDecodedInaMin * 100 / 60 : 0;\n\n  videoReceiver.streams[0].common.framesDropped = statsResults.resolutions[mediaType][sendrecvType].framesDropped - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesDropped;\n  videoReceiver.streams[0].receivedHeight = statsResults.resolutions[mediaType][sendrecvType].height;\n  videoReceiver.streams[0].receivedWidth = statsResults.resolutions[mediaType][sendrecvType].width;\n  videoReceiver.streams[0].receivedFrameSize = statsResults.resolutions[mediaType][sendrecvType].height * statsResults.resolutions[mediaType][sendrecvType].height / 256;\n\n  videoReceiver.streams[0].receivedKeyFrames = statsResults[mediaType][sendrecvType].keyFramesDecoded - lastMqaDataSent[mediaType][sendrecvType].keyFramesDecoded || 0;\n  videoReceiver.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalPliCount - lastMqaDataSent[mediaType][sendrecvType].totalPliCount || 0;\n};\n\nexport const getVideoSenderMqa = ({\n  videoSender, statsResults, lastMqaDataSent, isShareStream = false\n}) => {\n  const mediaType = isShareStream ? STATS.SHARE_CORRELATE : STATS.VIDEO_CORRELATE;\n  const sendrecvType = STATS.SEND_DIRECTION;\n\n  videoSender.common.common.direction = statsResults[mediaType].direction;\n  videoSender.common.transportType = statsResults.connectionType.local.transport[0];\n\n  videoSender.common.maxRemoteJitter = max(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n  videoSender.common.meanRemoteJitter = mean(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n\n\n  videoSender.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;\n  videoSender.common.availableBitrate = statsResults[mediaType][sendrecvType].availableOutgoingBitrate || 0;\n  // Calculate based on how much packets lost of received compated to how to the client sent\n\n  const totalpacketsLostForaMin = statsResults[mediaType][sendrecvType].totalPacketsLostOnReceiver - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLostOnReceiver;\n\n  videoSender.common.remoteLossRate = totalpacketsLostForaMin > 0 ? (totalpacketsLostForaMin) * 100 / (videoSender.common.rtpPackets + totalpacketsLostForaMin) : 0; // This is the packets sent with in last min || 0;\n\n  videoSender.common.maxRoundTripTime = max(statsResults[mediaType][sendrecvType].meanRoundTripTime) * 1000 || 0;\n  videoSender.common.meanRoundTripTime = mean(statsResults[mediaType][sendrecvType].meanRoundTripTime) * 1000 || 0;\n  videoSender.common.roundTripTime = videoSender.common.maxRoundTripTime;\n\n  videoSender.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;\n\n  // Calculate the outgoing bitrate\n  const totalBytesSentInaMin = statsResults[mediaType][sendrecvType].totalBytesSent - lastMqaDataSent[mediaType][sendrecvType].totalBytesSent;\n\n  videoSender.streams[0].common.transmittedBitrate = totalBytesSentInaMin ? (totalBytesSentInaMin) * 8 / 60 : 0;\n\n  videoSender.common.rtpBitrate = videoSender.streams[0].common.transmittedBitrate;\n\n\n  videoSender.streams[0].transmittedKeyFrames = statsResults[mediaType][sendrecvType].totalKeyFramesEncoded - lastMqaDataSent[mediaType][sendrecvType].totalKeyFramesEncoded || 0;\n  videoSender.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalFirCount - lastMqaDataSent[mediaType][sendrecvType].totalFirCount || 0;\n\n  // From tracks //TODO: calculate a proper one\n  const totalFrameSentInaMin = statsResults.resolutions[mediaType][sendrecvType].framesSent - (lastMqaDataSent.resolutions[mediaType][sendrecvType].framesSent || 0);\n\n  videoSender.streams[0].common.transmittedFrameRate = totalFrameSentInaMin ? totalFrameSentInaMin * 100 / 60 : 0;\n  videoSender.streams[0].transmittedHeight = statsResults.resolutions[mediaType][sendrecvType].height;\n  videoSender.streams[0].transmittedWidth = statsResults.resolutions[mediaType][sendrecvType].width;\n  videoSender.streams[0].transmittedFrameSize = statsResults.resolutions[mediaType][sendrecvType].height * statsResults.resolutions[mediaType][sendrecvType].width / 254;\n};\n"]}