{"version":3,"sources":["index.js"],"names":["StatsAnalyzer","config","statsResults","defaultStats","result","type","isSender","isRemote","id","RemoteCandidateType","RemoteTransport","RemoteIpAddress","RemoteNetworkType","sendRecvType","STATS","SEND_DIRECTION","RECEIVE_DIRECTION","ipType","REMOTE","LOCAL","candidateType","indexOf","push","protocol","toUpperCase","ip","portNumber","networkType","internal","candidates","ipAddress","port","priority","transport","timestamp","time","connectionType","NETWORK_TYPE","VPN","UNKNOWN","totalRoundTripTime","statsStarted","lastStatsResults","correlationId","mqaSentCount","lastMqaDataSent","resolutions","video","send","recv","audio","share","localMQEStats","RX","packetsLost","jitter","latency","bitRate","TX","frameRate","resolutionWidth","resolutionHeight","requestedKeyFrame","receivedKeyFrame","lastMqa","audioReceive","common","mediaHopByHopLost","streams","rtpJitter","roundTripTime","receivedBitrate","audioTransmit","remoteLossRate","remoteJitter","transmittedBitrate","videoReceive","receivedFrameRate","receivedWidth","receivedHeight","videoTransmit","transmittedFrameRate","transmittedWidth","transmittedHeight","requestedKeyFrames","meanRemoteJitter","meanRtpJitter","meanRoundTripTime","status","meetingMediaStatus","audioReceiver","mqaData","intervals","audioSender","videoReceiver","videoSender","shareSender","shareReceiver","isShareStream","intervalMetadata","peerReflexiveIP","local","peripherals","information","_UNKNOWN_","name","MEDIA_DEVICES","SPEAKER","peerConnection","audioTransceiver","sender","track","label","MICROPHONE","videoTransceiver","CAMERA","intervalNumber","populateResults","resetStatsResults","emit","file","function","EVENT_TRIGGERS","MEDIA_QUALITY","data","getStatsAndParse","statsInterval","setInterval","analyzerInterval","sendMqaData","mqaInterval","MQA_INTEVAL","clearInterval","statsInterva","undefined","getStatsResult","processOutboundRTPResult","processInboundRTPResult","processTrackResult","compareSentAndReceived","parseCandidate","parseAudioSource","getStatsResults","types","DEFAULT_GET_STATS_FILTER","forEach","includes","parseGetStatsResult","AUDIO_CORRELATE","audioLevel","totalAudioEnergy","mediaType","currentStats","previousStats","expected","sendAudio","totalPacketsSent","LoggerProxy","logger","info","MEETING_MEDIA_LOCAL_STARTED","AUDIO","receiveAudio","totalPacketsReceived","totalSamplesReceived","VIDEO_CORRELATE","sendVideo","framesEncoded","framesSent","VIDEO","receiveVideo","framesReceived","framesDecoded","framesDropped","SHARE_CORRELATE","sendShare","connectionState","CONNECTION_STATE","FAILED","trace","getStats","then","res","filterAndParseGetStatsResults","receiver","shareTransceiver","direction","currentDirection","compareLastStatsResult","JSON","parse","sendrecvType","bytesSent","kilobytes","prevBytesSent","keyFramesEncoded","bytes","availableBandwidth","toFixed","outboundRtpId","packetsSent","totalKeyFramesEncoded","totalNackCount","nackCount","totalPliCount","pliCount","totalFirCount","firCount","encoderImplementation","qualityLimitationReason","qualityLimitationResolutionChanges","retransmittedPacketsSent","totalBytesSent","headerBytesSent","retransmittedBytesSent","bytesReceived","prevBytesReceived","packetsReceived","lastPacketReceivedTimestamp","currentPacketsLost","currentPacketLossRatio","totalPacketsLost","keyFramesDecoded","decoderImplementation","fecPacketsDiscarded","fecPacketsReceived","totalBytesReceived","headerBytesReceived","totalSamplesDecoded","concealedSamples","remoteSource","frameWidth","frameHeight","width","height","hugeFramesSent","trackIdentifier","jitterBufferDelay","jitterBufferEmittedCount","avgJitterDelay","totalPacketsLostOnReceiver","currentPacketLoss","packetsLostOnReceiver","ssrc","reportsReceived","overAllPacketLossRatio","maxPacketLossRatio","videoPacketLossRatioThreshold","log","MEETING_HIGH_PACKETLOSS","packetLossRatio","EventsScope"],"mappings":"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","sourcesContent":["import {cloneDeep} from 'lodash';\n\nimport EventsScope from '../common/events/events-scope';\nimport {EVENT_TRIGGERS,\n  DEFAULT_GET_STATS_FILTER, CONNECTION_STATE, STATS, MQA_INTEVAL, NETWORK_TYPE, MEDIA_DEVICES, _UNKNOWN_} from '../constants';\nimport mqaData from '../mediaQualityMetrics/config';\nimport LoggerProxy from '../common/logs/logger-proxy';\n\nimport defaultStats from './global';\nimport {\n  getAudioSenderMqa,\n  getAudioReceiverMqa,\n  getVideoSenderMqa,\n  getVideoReceiverMqa\n} from './mqaUtil';\n\n\n/**\n  * Meeting High Packet Loss Event\n  * Emitted when ever there is high packet loss detected\n  * @event meeting:highPacketLoss\n  * @type {Object}\n  * @property {String} mediaType Type of media experiencing packet loss\n  * @property {Number} packetLossRatio current packet loss ratio\n  * @memberof StatsAnalyzer\n  */\n\n/**\n * Stats Analyzer class that will emit events based on detected quality\n *\n * @export\n * @class StatsAnalyzer\n * @extends {EventsScope}\n */\nexport default class StatsAnalyzer extends EventsScope {\n  /**\n   * Creates a new instance of StatsAnalyzer\n   * @constructor\n   * @public\n   * @param {Object} config SDK Configuration Object\n   * @param {Object} statsResults Default properties for stats\n   */\n  constructor(config, statsResults = defaultStats) {\n    super();\n    this.statsStarted = false;\n    this.statsResults = statsResults;\n    this.lastStatsResults = null;\n    this.config = config;\n    this.correlationId = config.correlationId;\n    this.mqaSentCount = -1;\n    this.lastMqaDataSent = {\n      resolutions: {video: {send: {}, recv: {}}, audio: {send: {}, recv: {}}, share: {send: {}, recv: {}}},\n      video: {send: {}, recv: {}},\n      audio: {send: {}, recv: {}},\n      share: {send: {}, recv: {}}\n    };\n    this.localMQEStats = {\n      audio: {\n        RX: {\n          packetsLost: [],\n          jitter: [],\n          latency: [],\n          bitRate: []\n        },\n        TX: {\n          packetsLost: [],\n          jitter: [],\n          latency: [],\n          bitRate: []\n        }\n      },\n      video: {\n        RX: {\n          packetsLost: [],\n          jitter: [],\n          latency: [],\n          bitRate: [],\n          frameRate: [],\n          resolutionWidth: [],\n          resolutionHeight: [],\n          requestedKeyFrame: [],\n          receivedKeyFrame: []\n        },\n        TX: {\n          packetsLost: [],\n          jitter: [],\n          latency: [],\n          bitRate: [],\n          frameRate: [],\n          resolutionWidth: [],\n          resolutionHeight: [],\n          requestedKeyFrame: [],\n          receivedKeyFrame: []\n        }\n      }\n    };\n  }\n\n  populateResults(lastMqa) {\n    // Audio\n\n    this.localMQEStats.audio.RX.packetsLost.push(lastMqa.audioReceive[0].common.mediaHopByHopLost);\n    this.localMQEStats.audio.RX.jitter.push(lastMqa.audioReceive[0].streams[0].common.rtpJitter);\n    this.localMQEStats.audio.RX.latency.push(lastMqa.audioReceive[0].common.roundTripTime);\n    this.localMQEStats.audio.RX.bitRate.push(lastMqa.audioReceive[0].streams[0].common.receivedBitrate);\n\n    this.localMQEStats.audio.TX.packetsLost.push(lastMqa.audioTransmit[0].common.remoteLossRate);\n    this.localMQEStats.audio.TX.jitter.push(lastMqa.audioTransmit[0].common.remoteJitter);\n    this.localMQEStats.audio.TX.latency.push(lastMqa.audioTransmit[0].common.roundTripTime);\n    this.localMQEStats.audio.TX.bitRate.push(lastMqa.audioTransmit[0].streams[0].common.transmittedBitrate);\n\n    // Video\n\n    this.localMQEStats.video.RX.packetsLost.push(lastMqa.videoReceive[0].common.mediaHopByHopLost);\n    this.localMQEStats.video.RX.jitter.push(lastMqa.videoReceive[0].streams[0].common.rtpJitter);\n    this.localMQEStats.video.RX.latency.push(lastMqa.videoReceive[0].streams[0].common.roundTripTime);\n    this.localMQEStats.video.RX.bitRate.push(lastMqa.videoReceive[0].streams[0].common.receivedBitrate);\n    this.localMQEStats.video.RX.frameRate.push(lastMqa.videoReceive[0].streams[0].common.receivedFrameRate);\n    this.localMQEStats.video.RX.resolutionWidth.push(lastMqa.videoReceive[0].streams[0].receivedWidth);\n    this.localMQEStats.video.RX.resolutionHeight.push(lastMqa.videoReceive[0].streams[0].receivedHeight);\n    this.localMQEStats.video.RX.requestedKeyFrame.push();\n    this.localMQEStats.video.RX.receivedKeyFrame.push();\n\n    this.localMQEStats.video.TX.packetsLost.push(lastMqa.videoTransmit[0].common.remoteLossRate);\n    this.localMQEStats.video.TX.jitter.push(lastMqa.videoTransmit[0].common.remoteJitter);\n    this.localMQEStats.video.TX.latency.push(lastMqa.videoTransmit[0].common.roundTripTime);\n    this.localMQEStats.video.TX.bitRate.push(lastMqa.videoTransmit[0].streams[0].common.transmittedBitrate);\n    this.localMQEStats.video.TX.frameRate.push(lastMqa.videoTransmit[0].streams[0].common.transmittedFrameRate);\n    this.localMQEStats.video.TX.resolutionWidth.push(lastMqa.videoTransmit[0].streams[0].transmittedWidth);\n    this.localMQEStats.video.TX.resolutionHeight.push(lastMqa.videoTransmit[0].streams[0].transmittedHeight);\n    this.localMQEStats.video.TX.requestedKeyFrame.push(lastMqa.videoTransmit[0].streams[0].requestedKeyFrames);\n    this.localMQEStats.video.TX.receivedKeyFrame.push();\n  }\n\n\n  resetStatsResults() {\n    this.statsResults.audio.send.meanRemoteJitter = [];\n    this.statsResults.video.send.meanRemoteJitter = [];\n    this.statsResults.share.send.meanRemoteJitter = [];\n\n    this.statsResults.audio.recv.meanRtpJitter = [];\n\n    // TODO: currently no values are present\n    this.statsResults.video.recv.meanRtpJitter = [];\n    this.statsResults.share.recv.meanRtpJitter = [];\n\n    // Reset the roundTripTime\n    this.statsResults.audio.send.meanRoundTripTime = [];\n    this.statsResults.video.send.meanRoundTripTime = [];\n    this.statsResults.share.send.meanRoundTripTime = [];\n  }\n\n  /**\n   * sets mediaStatus status for analyzing metrics\n   *\n   * @public\n   * @param {Object} status for the audio and video\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  updateMediaStatus(status) {\n    this.meetingMediaStatus = status;\n  }\n\n  /**\n   * captures MQA data from peerconnection\n   *\n   * @public\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  sendMqaData() {\n    const audioReceiver = mqaData.intervals[0].audioReceive[0];\n    const audioSender = mqaData.intervals[0].audioTransmit[0];\n    const videoReceiver = mqaData.intervals[0].videoReceive[0];\n    const videoSender = mqaData.intervals[0].videoTransmit[0];\n    const shareSender = mqaData.intervals[0].videoTransmit[1];\n    const shareReceiver = mqaData.intervals[0].videoReceive[1];\n\n    getAudioSenderMqa({\n      audioSender,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent\n    });\n    getAudioReceiverMqa({\n      audioReceiver,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent\n    });\n\n    getVideoReceiverMqa({\n      videoReceiver,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent\n    });\n    getVideoSenderMqa({\n      videoSender,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent\n    });\n\n    // Capture mqa for share scenario\n\n    getVideoSenderMqa({\n      videoSender: shareSender,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent,\n      isShareStream: true\n    });\n\n    getVideoReceiverMqa({\n      videoReceiver: shareReceiver,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent,\n      isShareStream: true\n    });\n\n    mqaData.intervals[0].intervalMetadata.peerReflexiveIP = this.statsResults.connectionType.local.ipAddress[0];\n\n    // Adding peripheral information\n    mqaData.intervals[0].intervalMetadata.peripherals = [];\n    mqaData.intervals[0].intervalMetadata.peripherals.push({information: _UNKNOWN_, name: MEDIA_DEVICES.SPEAKER});\n    mqaData.intervals[0].intervalMetadata.peripherals.push({information: this.peerConnection?.audioTransceiver?.sender?.track?.label || _UNKNOWN_, name: MEDIA_DEVICES.MICROPHONE});\n    mqaData.intervals[0].intervalMetadata.peripherals.push({information: this.peerConnection?.videoTransceiver?.sender?.track?.label || _UNKNOWN_, name: MEDIA_DEVICES.CAMERA});\n\n\n    mqaData.networkType = this.statsResults.connectionType.local.networkType;\n\n    this.mqaSentCount = this.mqaSentCount + 1;\n\n    mqaData.intervals[0].intervalNumber = this.mqaSentCount;\n\n    // DO Deep copy, for some reason it takes the reference all the time rather then old value set\n    this.lastMqaDataSent = cloneDeep(this.statsResults);\n\n    this.populateResults(mqaData.intervals[0]);\n\n    this.resetStatsResults();\n\n    this.emit(\n      {\n        file: 'statsAnalyzer',\n        function: 'sendMqaData'\n      },\n      EVENT_TRIGGERS.MEDIA_QUALITY,\n      {\n        data: mqaData.intervals[0],\n        networkType: mqaData.networkType\n      }\n    );\n  }\n\n  /**\n   * updated the peerconnection when changed\n   *\n   * @private\n   * @memberof updatePeerconnection\n   * @param {PeerConnection} peerConnection\n   * @returns {void}\n   */\n  updatePeerconnection(peerConnection) {\n    this.peerConnection = peerConnection;\n  }\n\n  /**\n   * Starts the stats analyzer on interval\n   *\n   * @public\n   * @memberof StatsAnalyzer\n   * @param {PeerConnection} peerConnection\n   * @returns {void}\n   */\n  startAnalyzer(peerConnection) {\n    if (!this.statsStarted) {\n      this.statsStarted = true;\n      this.peerConnection = peerConnection;\n      this.getStatsAndParse();\n      this.statsInterval = setInterval(() => {\n        this.getStatsAndParse();\n      }, this.config.analyzerInterval);\n      // Trigger initial fetch\n      this.sendMqaData();\n      this.mqaInterval = setInterval(() => {\n        this.sendMqaData();\n      }, MQA_INTEVAL);\n    }\n  }\n\n  /**\n   * Cleans up the analyzer when done\n   *\n   * @public\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  stopAnalyzer() {\n    if (this.statsInterval) {\n      this.getStatsAndParse();\n      clearInterval(this.statsInterval);\n      this.statsInterva = undefined;\n    }\n\n    if (this.mqaInterval) {\n      this.sendMqaData();\n      clearInterval(this.mqaInterval);\n      this.statsInterva = undefined;\n    }\n    this.peerConnection = null;\n  }\n\n  /**\n   * Parse a single result of get stats\n   *\n   * @private\n   * @param {*} getStatsResult\n   * @param {String} type\n   * @param {boolean} isSender\n   * @returns {void}\n   * @memberof StatsAnalyzer\n   */\n  parseGetStatsResult(getStatsResult, type, isSender) {\n    if (!getStatsResult) {\n      return;\n    }\n\n    switch (getStatsResult.type) {\n      case 'outbound-rtp':\n        this.processOutboundRTPResult(getStatsResult, type);\n        break;\n      case 'inbound-rtp':\n        this.processInboundRTPResult(getStatsResult, type);\n        break;\n      case 'track':\n        this.processTrackResult(getStatsResult, type);\n        break;\n      case 'remote-inbound-rtp':\n      case 'remote-outbound-rtp':\n        this.compareSentAndReceived(getStatsResult, type, isSender);\n        break;\n      case 'remotecandidate':\n      case 'remote-candidate':\n        this.parseCandidate(getStatsResult, type, isSender, true);\n        break;\n      case 'local-candidate':\n        this.parseCandidate(getStatsResult, type, isSender, false);\n        break;\n      case 'media-source':\n        this.parseAudioSource(getStatsResult, type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Filters the get stats results for types\n   * @private\n   * @param {Array} getStatsResults\n   * @param {String} type\n   * @param {boolean} isSender\n   * @returns {void}\n   */\n  filterAndParseGetStatsResults(getStatsResults, type, isSender) {\n    const {types} = DEFAULT_GET_STATS_FILTER;\n\n    getStatsResults.forEach((result) => {\n      if (types.includes(result.type)) {\n        this.parseGetStatsResult(result, type, isSender);\n      }\n    });\n  }\n\n  /**\n   * parse the audio\n   * @param {String} result\n   * @param {boolean} type\n   * @returns {void}\n   */\n  parseAudioSource(result, type) {\n    if (!result) {\n      return;\n    }\n\n    if (type === STATS.AUDIO_CORRELATE) {\n      this.statsResults[type].send.audioLevel = result.audioLevel;\n      this.statsResults[type].send.totalAudioEnergy = result.totalAudioEnergy;\n    }\n  }\n\n  /**\n   * compares current and previous stats to check if packets are not sent\n   *\n   * @private\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  compareLastStatsResult() {\n    if (this.lastStatsResults !== null && this.meetingMediaStatus) {\n      // compare audio stats sent\n      let mediaType = STATS.AUDIO_CORRELATE;\n      let currentStats = null;\n      let previousStats = null;\n\n      if (this.meetingMediaStatus.expected.sendAudio) {\n        currentStats = this.statsResults[mediaType].send;\n        previousStats = this.lastStatsResults[mediaType].send;\n\n        if (currentStats.totalPacketsSent === previousStats.totalPacketsSent || currentStats.totalPacketsSent === 0) {\n          LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets sent`);\n        }\n        else {\n          if (currentStats.totalAudioEnergy === previousStats.totalAudioEnergy || currentStats.totalAudioEnergy === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} Energy present`);\n          }\n\n          if (currentStats.audioLevel === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> ${mediaType} level is 0 for the user`);\n          }\n        }\n\n        if (previousStats.totalPacketsSent === 0 && currentStats.totalPacketsSent > 0) {\n          this.emit(\n            {\n              file: 'statsAnalyzer/index',\n              function: 'compareLastStatsResult'\n            },\n            EVENT_TRIGGERS.MEETING_MEDIA_LOCAL_STARTED,\n            {\n              type: mediaType.AUDIO\n            }\n          );\n        }\n      }\n\n      if (this.meetingMediaStatus.expected.receiveAudio) {\n      // compare audio stats received\n        currentStats = this.statsResults[mediaType].recv;\n        previousStats = this.lastStatsResults[mediaType].recv;\n\n        if (currentStats.totalPacketsReceived === previousStats.totalPacketsReceived || currentStats.totalPacketsReceived === 0) {\n          LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets received`);\n        }\n        else if (currentStats.totalSamplesReceived === previousStats.totalSamplesReceived ||\n          currentStats.totalSamplesReceived === 0) {\n          LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} samples received`);\n        }\n      }\n\n      mediaType = STATS.VIDEO_CORRELATE;\n      if (this.meetingMediaStatus.expected.sendVideo) {\n      // compare video stats sent\n        currentStats = this.statsResults[mediaType].send;\n        previousStats = this.lastStatsResults[mediaType].send;\n\n        if (currentStats.totalPacketsSent === previousStats.totalPacketsSent || currentStats.totalPacketsSent === 0) {\n          LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets sent`);\n        }\n        else {\n          if (currentStats.framesEncoded === previousStats.framesEncoded || currentStats.framesEncoded === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} Frames Encoded`);\n          }\n\n          if (this.statsResults.resolutions[mediaType].send.framesSent === this.lastStatsResults.resolutions[mediaType].send.framesSent || this.statsResults.resolutions[mediaType].send.framesSent === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} Frames sent`);\n          }\n        }\n\n        if (previousStats.framesSent === 0 && currentStats.framesSent > 0) {\n          this.emit(\n            {\n              file: 'statsAnalyzer/index',\n              function: 'compareLastStatsResult'\n            },\n            EVENT_TRIGGERS.MEETING_MEDIA_LOCAL_STARTED,\n            {\n              type: mediaType.VIDEO\n            }\n          );\n        }\n      }\n\n\n      if (this.meetingMediaStatus.expected.receiveVideo) {\n      // compare video stats reveived\n\n        currentStats = this.statsResults[mediaType].recv;\n        previousStats = this.lastStatsResults[mediaType].recv;\n\n        if (currentStats.totalPacketsReceived === previousStats.totalPacketsReceived || currentStats.totalPacketsReceived === 0) {\n          LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets received`);\n        }\n        else {\n          if (this.statsResults.resolutions[mediaType].recv.framesReceived === this.lastStatsResults.resolutions[mediaType].recv.framesReceived || this.statsResults.resolutions[mediaType].recv.framesReceived === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames received`);\n          }\n\n          if (this.statsResults.resolutions[mediaType].recv.framesDecoded === this.lastStatsResults.resolutions[mediaType].recv.framesDecoded || this.statsResults.resolutions[mediaType].send.framesDecoded === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames decoded`);\n          }\n\n          if (this.statsResults.resolutions[mediaType].recv.framesDropped - this.lastStatsResults.resolutions[mediaType].recv.framesDropped > 10) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> ${mediaType} frames are getting dropped`);\n          }\n        }\n      }\n\n      mediaType = STATS.SHARE_CORRELATE;\n      if (this.meetingMediaStatus.expected.sendShare) {\n      // compare share stats sent\n\n        currentStats = this.statsResults[mediaType].send;\n        previousStats = this.lastStatsResults[mediaType].send;\n\n        if (currentStats.totalPacketsSent === previousStats.totalPacketsSent || currentStats.totalPacketsSent === 0) {\n          LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets sent`);\n        }\n        else {\n          if (currentStats.framesEncoded === previousStats.framesEncoded || currentStats.framesEncoded === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames getting encoded`);\n          }\n\n          if (this.statsResults.resolutions[mediaType].send.framesSent === this.lastStatsResults.resolutions[mediaType].send.framesSent || this.statsResults.resolutions[mediaType].send.framesSent === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames sent`);\n          }\n        }\n\n        if (previousStats.framesSent === 0 && currentStats.framesSent > 0) {\n          this.emit(\n            {\n              file: 'statsAnalyzer/index',\n              function: 'compareLastStatsResult'\n            },\n            EVENT_TRIGGERS.MEETING_MEDIA_LOCAL_STARTED,\n            {\n              type: mediaType.VIDEO\n            }\n          );\n        }\n\n        // TODO:need to check receive share value\n        // compare share stats reveived\n        currentStats = this.statsResults[mediaType].recv;\n        previousStats = this.lastStatsResults[mediaType].recv;\n\n        if (currentStats.totalPacketsReceived === previousStats.totalPacketsReceived || currentStats.totalPacketsSent === 0) {\n          LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets received`);\n        }\n        else {\n          if (this.statsResults.resolutions[mediaType].recv.framesReceived === this.lastStatsResults.resolutions[mediaType].recv.framesReceived || this.statsResults.resolutions[mediaType].recv.framesReceived === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames received`);\n          }\n\n          if (this.statsResults.resolutions[mediaType].recv.framesDecoded === this.lastStatsResults.resolutions[mediaType].recv.framesDecoded || this.statsResults.resolutions[mediaType].send.framesDecoded === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames decoded`);\n          }\n\n          if (this.statsResults.resolutions[mediaType].recv.framesDropped - this.lastStatsResults.resolutions[mediaType].recv.framesDropped > 10) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> ${mediaType} frames are getting dropped`);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Does a `getStats` on all the transceivers and parses the results\n   *\n   * @private\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  getStatsAndParse() {\n    if (!this.peerConnection) {\n      return;\n    }\n\n    if (this.peerConnection && this.peerConnection.connectionState === CONNECTION_STATE.FAILED) {\n      LoggerProxy.logger.trace('StatsAnalyzer:index#getStatsAndParse --> PeerConnection is in failed state');\n\n      return;\n    }\n\n    LoggerProxy.logger.trace('StatsAnalyzer:index#getStatsAndParse --> Collecting Stats');\n    this.peerConnection.videoTransceiver.sender.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.VIDEO_CORRELATE, true);\n    });\n\n    this.peerConnection.videoTransceiver.receiver.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.VIDEO_CORRELATE, false);\n    });\n\n    this.peerConnection.audioTransceiver.sender.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.AUDIO_CORRELATE, true);\n    });\n\n    this.peerConnection.audioTransceiver.receiver.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.AUDIO_CORRELATE, false);\n    });\n\n    // TODO: add checks for screen share\n    this.peerConnection.shareTransceiver.sender.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.SHARE_CORRELATE, true);\n    });\n\n    this.peerConnection.shareTransceiver.receiver.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.SHARE_CORRELATE, false);\n    });\n\n    // updates the current direction of media\n    this.statsResults[STATS.AUDIO_CORRELATE].direction = this.peerConnection.audioTransceiver.currentDirection;\n    this.statsResults[STATS.VIDEO_CORRELATE].direction = this.peerConnection.videoTransceiver.currentDirection;\n    this.statsResults[STATS.SHARE_CORRELATE].direction = this.peerConnection.shareTransceiver.currentDirection;\n\n    // Process Stats results every 5 seconds\n\n    this.compareLastStatsResult();\n\n    // Save the last results to compare with the current\n    // DO Deep copy, for some reason it takes the reference all the time rather then old value set\n    this.lastStatsResults = JSON.parse(JSON.stringify(this.statsResults));\n\n    LoggerProxy.logger.trace('StatsAnalyzer:index#getStatsAndParse --> Finished Collecting Stats');\n  }\n\n  /**\n   * Processes OutboundRTP stats result and stores\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @returns {void}\n   */\n  processOutboundRTPResult(result, type) {\n    const mediaType = type || STATS.AUDIO_CORRELATE;\n    const sendrecvType = STATS.SEND_DIRECTION;\n\n    if (result.bytesSent) {\n      let kilobytes = 0;\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].prevBytesSent) {\n        this.statsResults.internal[mediaType][sendrecvType].prevBytesSent = result.bytesSent;\n      }\n      if (!this.statsResults.internal[mediaType][sendrecvType].framesEncoded) {\n        this.statsResults.internal[mediaType][sendrecvType].framesEncoded = result.framesEncoded;\n      }\n      if (!this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded) {\n        this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded = result.keyFramesEncoded;\n      }\n\n      const bytes = result.bytesSent - this.statsResults.internal[mediaType][sendrecvType].prevBytesSent;\n\n      this.statsResults.internal[mediaType][sendrecvType].prevBytesSent = result.bytesSent;\n\n      kilobytes = bytes / 1024;\n\n      this.statsResults[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);\n      this.statsResults[mediaType].bytesSent = kilobytes;\n\n      this.statsResults[mediaType][sendrecvType].framesEncoded = result.framesEncoded - this.statsResults.internal[mediaType][sendrecvType].framesEncoded;\n      this.statsResults[mediaType][sendrecvType].keyFramesEncoded = result.keyFramesEncoded - this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded;\n      this.statsResults.internal[mediaType].outboundRtpId = result.id;\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].packetsSent) {\n        this.statsResults.internal[mediaType][sendrecvType].packetsSent = result.packetsSent;\n      }\n\n      this.statsResults[mediaType][sendrecvType].packetsSent = result.packetsSent - this.statsResults.internal[mediaType][sendrecvType].packetsSent;\n      this.statsResults.internal[mediaType][sendrecvType].packetsSent = result.packetsSent;\n\n      // Data saved to send MQA metrics\n\n      this.statsResults[mediaType][sendrecvType].totalKeyFramesEncoded = result.keyFramesEncoded;\n      this.statsResults[mediaType][sendrecvType].totalNackCount = result.nackCount;\n      this.statsResults[mediaType][sendrecvType].totalPliCount = result.pliCount;\n      this.statsResults[mediaType][sendrecvType].totalPacketsSent = result.packetsSent;\n      this.statsResults[mediaType][sendrecvType].totalFirCount = result.firCount;\n      this.statsResults[mediaType][sendrecvType].framesEncoded = result.framesEncoded;\n      this.statsResults[mediaType][sendrecvType].encoderImplementation = result.encoderImplementation;\n      this.statsResults[mediaType][sendrecvType].qualityLimitationReason = result.qualityLimitationReason;\n      this.statsResults[mediaType][sendrecvType].qualityLimitationResolutionChanges = result.qualityLimitationResolutionChanges;\n      this.statsResults[mediaType][sendrecvType].retransmittedPacketsSent = result.retransmittedPacketsSent;\n      this.statsResults[mediaType][sendrecvType].totalBytesSent = result.bytesSent;\n      this.statsResults[mediaType][sendrecvType].headerBytesSent = result.headerBytesSent;\n      this.statsResults[mediaType][sendrecvType].retransmittedBytesSent = result.retransmittedBytesSent;\n    }\n  }\n\n\n  /**\n   * Processes InboundRTP stats result and stores\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @returns {void}\n   */\n  processInboundRTPResult(result, type) {\n    const mediaType = type || STATS.AUDIO_CORRELATE;\n    const sendrecvType = STATS.RECEIVE_DIRECTION;\n\n    if (result.bytesReceived) {\n      let kilobytes = 0;\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived) {\n        this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].pliCount) {\n        this.statsResults.internal[mediaType][sendrecvType].pliCount = result.pliCount;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].packetsLost) {\n        this.statsResults.internal[mediaType][sendrecvType].packetsLost = result.packetsLost;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived) {\n        this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].lastPacketReceivedTimestamp) {\n        this.statsResults.internal[mediaType][sendrecvType].lastPacketReceivedTimestamp = result.lastPacketReceivedTimestamp;\n      }\n\n      const bytes = result.bytesReceived - (this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived);\n\n      this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;\n\n      kilobytes = bytes / 1024;\n      this.statsResults[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);\n      this.statsResults[mediaType].bytesReceived = kilobytes.toFixed(1);\n\n      this.statsResults[mediaType][sendrecvType].pliCount = result.pliCount - this.statsResults.internal[mediaType][sendrecvType].pliCount;\n      this.statsResults[mediaType][sendrecvType].currentPacketsLost = result.packetsLost - this.statsResults.internal[mediaType][sendrecvType].packetsLost;\n      if (this.statsResults[mediaType][sendrecvType].currentPacketsLost < 0) {\n        this.statsResults[mediaType][sendrecvType].currentPacketsLost = 0;\n      }\n\n      this.statsResults[mediaType][sendrecvType].packetsReceived = result.packetsReceived - this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived;\n      this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;\n\n      if (this.statsResults[mediaType][sendrecvType].packetsReceived === 0) {\n        LoggerProxy.logger.info(`StatsAnalyzer:index#processInboundRTPResult --> No packets received for ${mediaType} `, this.statsResults[mediaType][sendrecvType].packetsReceived);\n      }\n\n      //  Check the over all packet Lost ratio\n      this.statsResults[mediaType][sendrecvType].currentPacketLossRatio = this.statsResults[mediaType][sendrecvType].currentPacketsLost > 0 ? this.statsResults[mediaType][sendrecvType].currentPacketsLost / (this.statsResults[mediaType][sendrecvType].packetsReceived + this.statsResults[mediaType][sendrecvType].currentPacketsLost) : 0;\n      if (this.statsResults[mediaType][sendrecvType].currentPacketLossRatio > 3) {\n        LoggerProxy.logger.info('StatsAnalyzer:index#processInboundRTPResult --> Packets getting lost from the receiver ', this.statsResults[mediaType][sendrecvType].currentPacketLossRatio);\n      }\n\n      // TODO: check the packet loss value is negative values here\n\n      if (result.packetsLost) {\n        this.statsResults[mediaType][sendrecvType].totalPacketsLost = result.packetsLost > 0 ? result.packetsLost : -result.packetsLost;\n      }\n      else {\n        this.statsResults[mediaType][sendrecvType].totalPacketsLost = 0;\n      }\n\n      this.statsResults[mediaType][sendrecvType].lastPacketReceivedTimestamp = result.lastPacketReceivedTimestamp;\n\n      // From Thin\n      this.statsResults[mediaType][sendrecvType].totalNackCount = result.nackCount;\n      this.statsResults[mediaType][sendrecvType].totalPliCount = result.pliCount;\n      this.statsResults[mediaType][sendrecvType].framesDecoded = result.framesDecoded;\n      this.statsResults[mediaType][sendrecvType].keyFramesDecoded = result.keyFramesDecoded;\n\n      this.statsResults[mediaType][sendrecvType].decoderImplementation = result.decoderImplementation;\n      this.statsResults[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;\n\n\n      this.statsResults[mediaType][sendrecvType].fecPacketsDiscarded = result.fecPacketsDiscarded;\n      this.statsResults[mediaType][sendrecvType].fecPacketsReceived = result.fecPacketsReceived;\n      this.statsResults[mediaType][sendrecvType].totalBytesReceived = result.bytesReceived;\n      this.statsResults[mediaType][sendrecvType].headerBytesReceived = result.headerBytesReceived;\n\n      this.statsResults[mediaType][sendrecvType].meanRtpJitter.push(result.jitter);\n\n      // Audio stats\n\n      this.statsResults[mediaType][sendrecvType].audioLevel = result.audioLevel;\n      this.statsResults[mediaType][sendrecvType].totalAudioEnergy = result.totalAudioEnergy;\n      this.statsResults[mediaType][sendrecvType].totalSamplesReceived = result.totalSamplesReceived || 0;\n      this.statsResults[mediaType][sendrecvType].totalSamplesDecoded = result.totalSamplesDecoded || 0;\n      this.statsResults[mediaType][sendrecvType].concealedSamples = result.concealedSamples || 0;\n    }\n  }\n\n  /**\n   * Processes remote and local candidate result and stores\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @param {boolean} isSender\n   * @param {boolean} isRemote\n   *\n   * @returns {void}\n   */\n  parseCandidate = (result, type, isSender, isRemote) => {\n    if (!result || !result.id) {\n      return;\n    }\n    const RemoteCandidateType = {};\n    const RemoteTransport = {};\n    const RemoteIpAddress = {};\n    const RemoteNetworkType = {};\n\n    if (!result.id) return;\n\n    const sendRecvType = isSender ? STATS.SEND_DIRECTION : STATS.RECEIVE_DIRECTION;\n    const ipType = isRemote ? STATS.REMOTE : STATS.LOCAL;\n\n    if (!RemoteCandidateType[result.id]) {\n      RemoteCandidateType[result.id] = [];\n    }\n\n    if (!RemoteTransport[result.id]) {\n      RemoteTransport[result.id] = [];\n    }\n\n    if (!RemoteIpAddress[result.id]) {\n      RemoteIpAddress[result.id] = [];\n    }\n    if (!RemoteNetworkType[result.id]) {\n      RemoteNetworkType[result.id] = [];\n    }\n\n    if (result.candidateType && RemoteCandidateType[result.id].indexOf(result.candidateType) === -1) {\n      RemoteCandidateType[result.id].push(result.candidateType);\n    }\n\n    if (result.protocol && RemoteTransport[result.id].indexOf(result.protocol) === -1) {\n      RemoteTransport[result.id].push(result.protocol.toUpperCase());\n    }\n\n    if (result.ip && RemoteIpAddress[result.id].indexOf(`${result.ip}:${result.portNumber}`) === -1) {\n      RemoteIpAddress[result.id].push(`${result.ip}`); // TODO: Add ports\n    }\n\n    if (result.networkType && RemoteNetworkType[result.id].indexOf(result.networkType) === -1) {\n      RemoteNetworkType[result.id].push(result.networkType);\n    }\n\n    this.statsResults.internal.candidates[result.id] = {\n      candidateType: RemoteCandidateType[result.id],\n      ipAddress: RemoteIpAddress[result.id],\n      portNumber: result.port,\n      networkType: RemoteNetworkType[result.id],\n      priority: result.priority,\n      transport: RemoteTransport[result.id],\n      timestamp: result.time,\n      id: result.id,\n      type: result.type\n    };\n\n    this.statsResults.connectionType[ipType].candidateType = RemoteCandidateType[result.id];\n    this.statsResults.connectionType[ipType].ipAddress = RemoteIpAddress[result.id];\n\n    this.statsResults.connectionType[ipType].networkType = RemoteNetworkType[result.id][0] === NETWORK_TYPE.VPN ? NETWORK_TYPE.UNKNOWN : RemoteNetworkType[result.id][0];\n    this.statsResults.connectionType[ipType].transport = RemoteTransport[result.id];\n\n    this.statsResults[type][sendRecvType].totalRoundTripTime = result.totalRoundTripTime;\n  };\n\n\n  /**\n   * Process Track results\n   *\n   * @private\n   * @param {*} result\n   * @param {*} mediaType\n   * @returns {void}\n   * @memberof StatsAnalyzer\n   */\n  processTrackResult(result, mediaType) {\n    if (!result || result.type !== 'track') {\n      return;\n    }\n    if (result.type !== 'track') return;\n\n    const sendrecvType = result.remoteSource === true ? STATS.RECEIVE_DIRECTION : STATS.SEND_DIRECTION;\n\n    if (result.frameWidth && result.frameHeight) {\n      this.statsResults.resolutions[mediaType][sendrecvType].width = result.frameWidth;\n      this.statsResults.resolutions[mediaType][sendrecvType].height = result.frameHeight;\n      this.statsResults.resolutions[mediaType][sendrecvType].framesSent = result.framesSent;\n      this.statsResults.resolutions[mediaType][sendrecvType].hugeFramesSent = result.hugeFramesSent;\n    }\n\n    if (sendrecvType === STATS.RECEIVE_DIRECTION) {\n      this.statsResults.resolutions[mediaType][sendrecvType].framesReceived = result.framesReceived;\n      this.statsResults.resolutions[mediaType][sendrecvType].framesDecoded = result.framesDecoded;\n      this.statsResults.resolutions[mediaType][sendrecvType].framesDropped = result.framesDropped;\n    }\n\n\n    if (result.trackIdentifier && mediaType !== STATS.AUDIO_CORRELATE) {\n      this.statsResults.resolutions[mediaType][sendrecvType].trackIdentifier = result.trackIdentifier;\n\n      const jitterBufferDelay = result && result.jitterBufferDelay;\n      const jitterBufferEmittedCount = result && result.jitterBufferEmittedCount;\n\n      this.statsResults.resolutions[mediaType][sendrecvType].avgJitterDelay = jitterBufferEmittedCount && (+jitterBufferDelay / +jitterBufferEmittedCount);\n\n      // Used to calculate the jitter\n      this.statsResults.resolutions[mediaType][sendrecvType].jitterBufferDelay = result.jitterBufferDelay;\n      this.statsResults.resolutions[mediaType][sendrecvType].jitterBufferEmittedCount = result.jitterBufferEmittedCount;\n    }\n  }\n\n  /**\n   *\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @returns {void}\n   * @memberof StatsAnalyzer\n   */\n  compareSentAndReceived(result, type) {\n    if (!type) {\n      return;\n    }\n\n    const mediaType = type;\n\n    if (!this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver) { this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost; }\n\n    const currentPacketLoss = result.packetsLost - this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver;\n\n    this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;\n    this.statsResults[mediaType].send.packetsLostOnReceiver = currentPacketLoss;\n    this.statsResults[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;\n\n    this.statsResults[mediaType].send.meanRemoteJitter.push(result.jitter);\n    this.statsResults[mediaType].send.meanRoundTripTime.push(result.roundTripTime);\n\n    this.statsResults[mediaType].send.timestamp = result.timestamp;\n    this.statsResults[mediaType].send.ssrc = result.ssrc;\n    this.statsResults[mediaType].send.reportsReceived = result.reportsReceived;\n\n    // Total packloss ratio on this video section of the call\n    this.statsResults[mediaType].send.overAllPacketLossRatio = this.statsResults[mediaType].send.totalPacketsLostOnReceiver > 0 ? this.statsResults[mediaType].send.totalPacketsLostOnReceiver / this.statsResults[mediaType].send.totalPacketsSent : 0;\n    this.statsResults[mediaType].send.currentPacketLossRatio = this.statsResults[mediaType].send.packetsLostOnReceiver > 0 ? this.statsResults[mediaType].send.packetsLostOnReceiver * 100 / (this.statsResults[mediaType].send.packetsSent + this.statsResults[mediaType].send.packetsLostOnReceiver) : 0;\n\n    if (this.statsResults[mediaType].send.maxPacketLossRatio < this.statsResults[mediaType].send.currentPacketLossRatio) {\n      this.statsResults[mediaType].send.maxPacketLossRatio = this.statsResults[mediaType].send.currentPacketLossRatio;\n    }\n\n\n    if (this.statsResults[mediaType].send.currentPacketLossRatio > this.config.videoPacketLossRatioThreshold && mediaType === STATS.VIDEO_CORRELATE) {\n      // Trigger downgrade video callback\n      LoggerProxy.logger.log('StatsAnalyzer:index#compareSentAndReceived -->  Packet Loss is high ', this.statsResults[mediaType].send.currentPacketLossRatio);\n      this.emit(\n        {\n          file: 'statsAnalyzer',\n          function: 'compareSentAndReceived'\n        },\n        EVENT_TRIGGERS.MEETING_HIGH_PACKETLOSS,\n        {\n          mediaType,\n          packetLossRatio: this.statsResults[mediaType].send.currentPacketLossRatio\n        }\n      );\n    }\n  }\n}\n"]}