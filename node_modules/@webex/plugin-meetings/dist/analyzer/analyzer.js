"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _set = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/set"));

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var _isFinite2 = _interopRequireDefault(require("lodash/isFinite"));

var _forEach2 = _interopRequireDefault(require("lodash/forEach"));

var _constants = require("../constants");

var _parameter = _interopRequireDefault(require("../common/errors/parameter"));

var StatsAnalyzer = {};
/**
 * Can involve changing of the default plugin-meetings sdk for deeper results
 * @param {Array} series of WebRTCData
 * @param {Object} options
 * @param {Array} options.analysisKeys [{key: 'bytesSent', check: 'increasing'}, {key: 'bytesReceived', check: 'increasing'}]
 * @returns {Object} analysis {valid: true/false, failed: { key: [number] }, data: { webRtcKeyToAnalyze: { valid: true/false, reports: [ { value: number, valid: true/false, difference: number } ] } } }
 * @public
 */

StatsAnalyzer.analyze = function (series) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    analysisKeys: _constants.ANALYSIS_STATS.DEFAULT_KEYS
  };

  if (!(0, _isArray2.default)(series) || !series.length || !options || !(0, _isArray2.default)(options.analysisKeys) || !options.analysisKeys.length) {
    throw new _parameter.default('analyzer->analyze#series must be defined as a nonempty array of WebRTCData objects, and options.analysisKeys must be a nonempty array of strings, representing the properties to analyze.');
  }

  var properties = new _set.default(options.analysisKeys);
  var analysis = {
    valid: true,
    failed: {},
    data: {}
  };
  properties.forEach(function (config) {
    var property = config.key;
    analysis.data[property] = {
      valid: true,
      reports: []
    };
    analysis.failed[property] = [];
    var previous = {
      value: 0
    };
    var index = 0;

    var _loop = function _loop(i) {
      var singular = {};
      (0, _forEach2.default)(series[i].data.getData()[config.prop], function (webrtcData) {
        // eslint-disable-line
        var value = webrtcData[property];

        if (!value || !(0, _isFinite2.default)(value)) {
          return;
        }

        singular.value = value;
        singular.difference = 0;
        singular.valid = false;
        singular.index = index;
        singular.difference = singular.value - previous.value;

        if (config.check === _constants.ANALYSIS_CHECKS.INCREASING && singular.difference > 0) {
          singular.valid = true;
        } else if (config.check === _constants.ANALYSIS_CHECKS.DECREASING && singular.difference < 0) {
          singular.valid = true;
        } else if (config.check === _constants.ANALYSIS_CHECKS.CONSTANT) {
          singular.valid = true;
        } else {
          singular.valid = false;
        }

        if (!singular.valid) {
          analysis.data[property].valid = false;
          analysis.valid = false;
          analysis.failed[property].push(i);
        }

        previous = singular;
        analysis.data[property].reports.push(singular);
      });
      index += 1;
    };

    for (var i = series.length - 1; i > 0; i -= 1) {
      _loop(i);
    }

    if (!analysis.data[property].valid) {
      analysis.valid = false;
    }
  });
  return analysis;
};

var _default = StatsAnalyzer;
exports.default = _default;
//# sourceMappingURL=analyzer.js.map
