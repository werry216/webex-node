{"version":3,"sources":["analyzer.js"],"names":["StatsAnalyzer","analyze","series","options","analysisKeys","ANALYSIS_STATS","DEFAULT_KEYS","length","ParameterError","properties","analysis","valid","failed","data","forEach","config","property","key","reports","previous","value","index","i","singular","getData","prop","webrtcData","difference","check","ANALYSIS_CHECKS","INCREASING","DECREASING","CONSTANT","push"],"mappings":"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","sourcesContent":["import {forEach, isFinite, isArray} from 'lodash';\n\nimport {\n  ANALYSIS_STATS,\n  ANALYSIS_CHECKS\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nconst StatsAnalyzer = {};\n\n/**\n * Can involve changing of the default plugin-meetings sdk for deeper results\n * @param {Array} series of WebRTCData\n * @param {Object} options\n * @param {Array} options.analysisKeys [{key: 'bytesSent', check: 'increasing'}, {key: 'bytesReceived', check: 'increasing'}]\n * @returns {Object} analysis {valid: true/false, failed: { key: [number] }, data: { webRtcKeyToAnalyze: { valid: true/false, reports: [ { value: number, valid: true/false, difference: number } ] } } }\n * @public\n */\nStatsAnalyzer.analyze = (series, options = {analysisKeys: ANALYSIS_STATS.DEFAULT_KEYS}) => {\n  if (!isArray(series) || !series.length || !options || !isArray(options.analysisKeys) || !options.analysisKeys.length) {\n    throw new ParameterError('analyzer->analyze#series must be defined as a nonempty array of WebRTCData objects, and options.analysisKeys must be a nonempty array of strings, representing the properties to analyze.');\n  }\n  const properties = new Set(options.analysisKeys);\n  const analysis = {valid: true, failed: {}, data: {}};\n\n  properties.forEach((config) => {\n    const property = config.key;\n\n    analysis.data[property] = {valid: true, reports: []};\n    analysis.failed[property] = [];\n    let previous = {value: 0};\n    let index = 0;\n\n    for (let i = series.length - 1; i > 0; i -= 1) {\n      const singular = {};\n\n      forEach(series[i].data.getData()[config.prop], (webrtcData) => { // eslint-disable-line\n        const value = webrtcData[property];\n\n        if (!value || !isFinite(value)) {\n          return;\n        }\n        singular.value = value;\n        singular.difference = 0;\n        singular.valid = false;\n        singular.index = index;\n        singular.difference = singular.value - previous.value;\n        if (config.check === ANALYSIS_CHECKS.INCREASING && singular.difference > 0) {\n          singular.valid = true;\n        }\n        else if (config.check === ANALYSIS_CHECKS.DECREASING && singular.difference < 0) {\n          singular.valid = true;\n        }\n        else if (config.check === ANALYSIS_CHECKS.CONSTANT) {\n          singular.valid = true;\n        }\n        else {\n          singular.valid = false;\n        }\n        if (!singular.valid) {\n          analysis.data[property].valid = false;\n          analysis.valid = false;\n          analysis.failed[property].push(i);\n        }\n        previous = singular;\n        analysis.data[property].reports.push(singular);\n      });\n      index += 1;\n    }\n    if (!analysis.data[property].valid) {\n      analysis.valid = false;\n    }\n  });\n\n  return analysis;\n};\n\nexport default StatsAnalyzer;\n"]}