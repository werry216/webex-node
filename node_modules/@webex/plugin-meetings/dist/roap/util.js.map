{"version":3,"sources":["util.js"],"names":["RoapUtil","ROAP_ANSWER","_ANSWER_","toLowerCase","shouldHandleMedia","meeting","offer","mediaProperties","peerConnection","signalingState","SDP","HAVE_LOCAL_OFFER","handleError","pc","PeerConnectionManager","rollBackLocalDescription","then","resolve","catch","err","LoggerProxy","logger","error","reject","findError","messageType","errorType","type","ROAP","RECEIVE_ROAP_MSG","SEND_ROAP_MSG","_ERROR_","_CONFLICT_","ensureMeeting","SEND_ROAP_MSG_SUCCESS","updatePeerConnection","session","offerSdp","OFFER","sdps","meetingId","id","remoteQualityLevel","res","roap","lastRoapOffer","setRemoteDescription","info","correlationId","ParameterError","setRemoteSessionDetails","ANSWER","seq","locusId","locusSelfId","locusInfo","self","mediaId"],"mappings":"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","sourcesContent":["\nimport PeerConnectionManager from '../peer-connection-manager';\nimport {\n  _ANSWER_,\n  _ERROR_,\n  _CONFLICT_,\n  ROAP,\n  SDP\n} from '../constants';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport ParameterError from '../common/errors/parameter';\n\nconst RoapUtil = {};\nconst ROAP_ANSWER = _ANSWER_.toLowerCase();\n\nRoapUtil.shouldHandleMedia = (meeting) => {\n  const offer =\n    meeting.mediaProperties.peerConnection &&\n    meeting.mediaProperties.peerConnection.signalingState === SDP.HAVE_LOCAL_OFFER;\n\n  if (offer) {\n    return false;\n  }\n\n  return true;\n};\n\nRoapUtil.handleError = (pc) =>\n  PeerConnectionManager.rollBackLocalDescription({peerConnection: pc})\n    .then(() => Promise.resolve(true))\n    .catch((err) => {\n      LoggerProxy.logger.error(`Roap:util#handleError --> ${err}`);\n\n      return Promise.reject(err);\n    });\n\nRoapUtil.findError = (messageType, errorType, type) =>\n  (type === ROAP.RECEIVE_ROAP_MSG || type === ROAP.SEND_ROAP_MSG) && messageType === _ERROR_ && errorType === _CONFLICT_;\n\nRoapUtil.ensureMeeting = (meeting, type) => {\n  if (type === ROAP.RECEIVE_ROAP_MSG || type === ROAP.SEND_ROAP_MSG || type === ROAP.SEND_ROAP_MSG_SUCCESS) {\n    if (!meeting) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nRoapUtil.updatePeerConnection = (meeting, session) => PeerConnectionManager.updatePeerConnection({\n  offerSdp: session.OFFER.sdps,\n  peerConnection: meeting.mediaProperties.peerConnection\n},\n{\n  meetingId: meeting.id,\n  remoteQualityLevel: meeting.mediaProperties.remoteQualityLevel\n})\n  .then((res) => {\n    meeting.roap.lastRoapOffer = session.OFFER.sdps;\n\n    return res;\n  });\n\n\nRoapUtil.setRemoteDescription = (meeting, session) => {\n  LoggerProxy.logger.info(`Roap:util#setRemoteDescription --> Transmit WAIT_TX_OK, correlationId: ${meeting.correlationId}`);\n  if (!(meeting && (meeting.mediaProperties.peerConnection))) {\n    LoggerProxy.logger.error(`Roap:util#setRemoteDescription --> DANGER no media or screen peer connection, correlationId: ${meeting.correlationId}`);\n\n    return Promise.reject(new ParameterError('Must provide a media or screen peer connection'));\n  }\n\n  return PeerConnectionManager.setRemoteSessionDetails(\n    meeting.mediaProperties.peerConnection,\n    ROAP_ANSWER,\n    session.ANSWER.sdps[0],\n    meeting.id\n  ).then(() => {\n    LoggerProxy.logger.info(`Roap:util#setRemoteDescription --> Success for correlationId: ${meeting.correlationId}`);\n\n    return {\n      seq: session.ANSWER.seq,\n      locusId: meeting.locusId,\n      locusSelfId: meeting.locusInfo.self.id,\n      mediaId: meeting.mediaId,\n      correlationId: meeting.correlationId\n    };\n  })\n    .catch((err) => {\n      LoggerProxy.logger.error(`Roap:util#setRemoteDescription --> ${err}`);\n      throw err;\n    });\n};\n\nexport default RoapUtil;\n"]}