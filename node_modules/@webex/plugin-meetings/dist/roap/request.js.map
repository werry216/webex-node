{"version":3,"sources":["request.js"],"names":["RoapRequest","localSdp","reachabilityData","window","localStorage","getItem","REACHABILITY","reachabilityResult","JSON","parse","length","reachability","e","LoggerProxy","logger","error","options","info","roapMessage","resolve","then","deviceUrl","webex","internal","device","url","body","usingResource","resourceId","correlationId","localMedias","attachRechabilityData","audioMuted","videoMuted","clientMediaPreferences","preferTranscoding","locusUrl","PARTICIPANT","sipUrl","services","waitForCatalog","get","LOCI","CALL","invitee","address","sipTarget","ParameterError","request","method","HTTP_VERBS","POST","uri","res","locus","roapSeq","seq","id","split","pop","fullState","lastActive","catch","err","locusSelfUrl","mediaId","meetingId","mediaUrl","MEDIA","messageType","Metrics","postEvent","event","eventType","MEDIA_REQUEST","PUT","deviceType","config","meetings","MEDIA_RESPONSE","mediaConnection","mediaConnections","statusCode","data","parseLocusError","StatelessWebexPlugin"],"mappings":"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","sourcesContent":["\n/* global window */\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {\n  PARTICIPANT,\n  LOCI,\n  CALL,\n  MEDIA,\n  HTTP_VERBS,\n  REACHABILITY\n} from '../constants';\nimport Metrics from '../metrics';\nimport {eventType} from '../metrics/config';\nimport ParameterError from '../common/errors/parameter';\n/**\n * @class RoapRequest\n */\nexport default class RoapRequest extends StatelessWebexPlugin {\n  /**\n   * Joins a meeting via ROAP\n   * @param {Object} options\n   * @returns {Promise} returns a promise that resolves/rejects whatever the request does\n   */\n\n\n  attachRechabilityData(localSdp) {\n    const reachabilityData = window.localStorage.getItem(REACHABILITY.localStorage);\n\n    if (reachabilityData) {\n      try {\n        const reachabilityResult = JSON.parse(reachabilityData);\n\n        /* istanbul ignore else */\n        if (reachabilityResult && Object.keys(reachabilityResult).length) {\n          localSdp.reachability = reachabilityResult;\n        }\n      }\n      catch (e) {\n        LoggerProxy.logger.error(`Roap:request#attachReachabilityData --> Error in parsing reachability data: ${e}`);\n      }\n    }\n\n    return localSdp;\n  }\n\n  joinMeetingWithRoap(options) {\n    LoggerProxy.logger.info('Roap:request#joinMeetingWithRoap --> Join locus with roap');\n    LoggerProxy.logger.info(`Roap:request#joinMeetingWithRoap --> Local SDP: ${options.roapMessage}`);\n\n    return Promise.resolve().then(async () => {\n      const deviceUrl = this.webex.internal.device.url;\n      let url = '';\n\n      const body = {\n        deviceUrl,\n        usingResource: options.resourceId || null,\n        correlationId: options.correlationId,\n        localMedias: [\n          {\n            localSdp: JSON.stringify(this.attachRechabilityData({\n              roapMessage: options.roapMessage,\n              audioMuted: false,\n              videoMuted: false\n            }))\n          }\n        ],\n        clientMediaPreferences: {\n          preferTranscoding: options.preferTranscoding ?? true\n        }\n      };\n\n      if (options.locusUrl) {\n        url = `${options.locusUrl}/${PARTICIPANT}`;\n      }\n      else if (options.sipUrl) {\n        try {\n          await this.webex.internal.services.waitForCatalog('postauth');\n          url = `${this.webex.internal.services.get('locus')}/${LOCI}/${CALL}`;\n          body.invitee = {\n            address: options.sipTarget\n          };\n        }\n        catch (e) {\n          LoggerProxy.logger.error(`Roap:request#joinMeetingWithRoap --> ${e}`);\n          throw (e);\n        }\n      }\n      else {\n        throw new ParameterError('Must provide a locusUrl or sipTarget');\n      }\n\n      return this.webex\n        .request({\n          method: HTTP_VERBS.POST,\n          uri: url,\n          body\n        })\n        .then((res) => {\n          const {locus} = res.body;\n\n          locus.roapSeq = options.roapMessage.seq;\n          locus.id = locus.url.split('/').pop();\n          LoggerProxy.logger.info(`Roap:request#joinMeetingWithRoap --> Joined locus [${locus.id}][${locus.fullState.lastActive}]`);\n\n          return locus;\n        })\n        .catch((err) => {\n          LoggerProxy.logger.error(`Roap:request#joinMeetingWithRoap --> failed with error: ${err}`);\n          throw err;\n        });\n    });\n  }\n\n  /**\n   * Sends a ROAP message\n   * @param {Object} options\n   * @param {String} options.roapMessage\n   * @param {String} options.locusId\n   * @param {String} options.locusSelfId\n   * @param {String} options.mediaId\n   * @param {String} options.correlationId\n   * @returns {Promise} returns the response/failure of the request\n   */\n  sendRoap(options) {\n    const {\n      roapMessage, locusSelfUrl, mediaId, correlationId, meetingId\n    } = options;\n\n    if (!mediaId) {\n      LoggerProxy.logger.info('Roap:request#sendRoap --> Race Condition /call mediaID not present');\n    }\n\n    const mediaUrl = `${locusSelfUrl}/${MEDIA}`;\n    const deviceUrl = this.webex.internal.device.url;\n\n    LoggerProxy.logger.info(`Roap:request#sendRoap --> ${mediaUrl} \\n ${roapMessage.messageType} \\n seq:${roapMessage.seq}`);\n\n    Metrics.postEvent({event: eventType.MEDIA_REQUEST, meetingId});\n\n    return this.webex\n      .request({\n        uri: mediaUrl,\n        method: HTTP_VERBS.PUT,\n        body: {\n          device: {\n            url: deviceUrl,\n            deviceType: this.config.meetings.deviceType\n          },\n          correlationId,\n          localMedias: [\n            {\n              localSdp: JSON.stringify(this.attachRechabilityData({\n                roapMessage,\n                // eslint-disable-next-line no-warning-comments\n                // TODO: check whats the need for video and audiomute\n                audioMuted: !!options.audioMuted,\n                videoMuted: !!options.videoMuted\n              })),\n              mediaId: options.mediaId\n            }\n          ],\n          clientMediaPreferences: {\n            preferTranscoding: options.preferTranscoding ?? true\n          }\n        }\n      })\n      .then((res) => {\n        Metrics.postEvent({event: eventType.MEDIA_RESPONSE, meetingId});\n\n        // always it will be the first mediaConnection Object\n        const mediaConnection = res.body.mediaConnections && res.body.mediaConnections.length > 0 && res.body.mediaConnections[0];\n\n        LoggerProxy.logger.info(\n          `Roap:request#sendRoap --> response:${JSON.stringify(mediaConnection, null, 2)}'\\n StatusCode:'${res.statusCode}`\n        );\n        const {locus} = res.body;\n\n        locus.roapSeq = options.roapMessage.seq;\n\n        return locus;\n      })\n      .catch((err) => {\n        Metrics.postEvent({event: eventType.MEDIA_RESPONSE, meetingId, data: {error: Metrics.parseLocusError(err, true)}});\n        LoggerProxy.logger.error(`Roap:request#sendRoap --> Error:${JSON.stringify(err, null, 2)}`);\n        LoggerProxy.logger.error(\n          `Roap:request#sendRoapRequest --> errorBody:${JSON.stringify(roapMessage, null, 2)} + '\\\\n mediaId:'${options.mediaId}`\n        );\n        throw err;\n      });\n  }\n}\n"]}