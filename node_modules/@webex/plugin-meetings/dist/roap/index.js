"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _isNan = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/number/is-nan"));

var _parseFloat2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/parse-float"));

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/json/stringify"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _webexCore = require("@webex/webex-core");

var _constants = require("../constants");

var _loggerProxy = _interopRequireDefault(require("../common/logs/logger-proxy"));

var _util = _interopRequireDefault(require("../meeting/util"));

var _handler = _interopRequireDefault(require("./handler"));

var _request = _interopRequireDefault(require("./request"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * Roap options
 * @typedef {Object} RoapOptions
 * @property {String} sdp
 * @property {Meeting} meeting
 * @property {Number} roapSeq
 * @property {Boolean} reconnect
 */

/**
  * @typedef {Object} SeqOptions
  * @property {String} correlationId
  * @property {String} mediaId
  * @property {Number} seq
  */

/**
 * @class Roap
 * @export
 * @private
 */
var Roap = /*#__PURE__*/function (_StatelessWebexPlugin) {
  (0, _inherits2.default)(Roap, _StatelessWebexPlugin);

  var _super = _createSuper(Roap);

  /**
   *
   * @param {Object} attrs
   * @param {Object} options
   */
  function Roap(attrs, _options) {
    var _this;

    (0, _classCallCheck2.default)(this, Roap);
    _this = _super.call(this, {}, _options);
    /**
     * @instance
     * @type {Object}
     * @private
     * @memberof Roap
     */

    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sendRoapCallRequest", function (options) {
      var meeting = options.meeting;
      var roapMessage = {
        messageType: _constants.ROAP.ROAP_TYPES.OFFER,
        sdps: [options.sdp],
        version: _constants.ROAP.ROAP_VERSION,
        seq: typeof options.roapSeq !== 'number' && (0, _isNan.default)((0, _parseFloat2.default)(options.roapSeq)) ? 0 : options.roapSeq + 1,
        tieBreaker: 4294967294 // Math.floor(Math.random() * (2 ** 32) - 1) // TODO: Handle the roap  conflict scenario

      };

      _this.roapHandler.submit({
        type: _constants.ROAP.SEND_ROAP_MSG,
        msg: roapMessage,
        correlationId: meeting.correlationId
      });

      var roapBody = {
        localMedias: [{
          localSdp: (0, _stringify.default)(_this.roapRequest.attachRechabilityData({
            roapMessage: roapMessage,
            // eslint-disable-next-line no-warning-comments
            // TODO: check whats the need for video and audiomute
            audioMuted: !!meeting.isAudioMuted(),
            videoMuted: !!meeting.isVideoMuted()
          })) // mediaId: meeting.mediaId

        }]
      };
      return _util.default.joinMeetingOptions(meeting, {
        roapMessage: roapBody
      }).then(function (locus) {
        _this.roapHandler.submit({
          type: _constants.ROAP.SEND_ROAP_MSG_SUCCESS,
          seq: roapMessage.seq,
          correlationId: meeting.correlationId
        });

        meeting.setRoapSeq(roapMessage.seq); // eslint-disable-next-line no-warning-comments
        // TODO: we need to attach peerconenction to locus not sure if we need to pass everything here

        return locus; // eslint-disable-next-line no-warning-comments
        // TODO: check where to update the sequence number
      });
    });
    _this.attrs = attrs;
    /**
     * @instance
     * @type {Object}
     * @private
     * @memberof Roap
     */

    _this.options = _options;
    /**
     * The Roap Process State Handler
     * @instance
     * @type {RoapHandler}
     * @private
     * @memberof Roap
     */

    _this.roapHandler = new _handler.default(_this.attrs, _this.options, _this.sendRoapOK.bind((0, _assertThisInitialized2.default)(_this)), _this.sendRoapAnswer.bind((0, _assertThisInitialized2.default)(_this)));
    /**
     * The Roap Request Server Proxy Object
     * @instance
     * @type {RoapRequest}
     * @private
     * @memberof Roap
     */

    _this.roapRequest = new _request.default({}, _options);
    /**
     * The last roap offer sent to server and acked
     * @instance
     * @type {Object}
     * @private
     * @memberof Roap
     */

    _this.lastRoapOffer = {};
    return _this;
  }
  /**
   * Starts listening to mercury events for Roap messages
   * @param {object} data event object
   * @returns {Promise}
   * @private
   * @memberof Roap
   */


  (0, _createClass2.default)(Roap, [{
    key: "roapEvent",
    value: function roapEvent(data) {
      var msg = data.message;
      var correlationId = data.correlationId;

      _loggerProxy.default.logger.log("Roap:index#roapEvent --> Received Roap Message [".concat((0, _stringify.default)(msg, null, 2), "]"));

      this.roapHandler.submit({
        type: _constants.ROAP.RECEIVE_ROAP_MSG,
        msg: msg,
        correlationId: correlationId
      });
    }
    /**
     *
     * @param {String} correlationId correlation id of a meeting
     * @param {Number} seq ROAP sequence number
     * @returns {Promise}
     * @private
     * @memberof Roap
     */

  }, {
    key: "stop",
    value: function stop(correlationId, seq) {
      this.roapHandler.submit({
        type: _constants.ROAP.RECEIVE_CALL_LEAVE,
        seq: seq,
        correlationId: correlationId
      });
      return _promise.default.resolve();
    }
    /**
     *
     * @param {SeqOptions} options
     * @returns {null}
     * @private
     * @memberof Roap
     */

  }, {
    key: "sendRoapOK",
    value: function sendRoapOK(options) {
      var _this2 = this;

      return _promise.default.resolve().then(function () {
        var meeting = _this2.webex.meetings.meetingCollection.getByKey('correlationId', options.correlationId);

        var roapMessage = {
          messageType: _constants.ROAP.ROAP_TYPES.OK,
          version: _constants.ROAP.ROAP_VERSION,
          seq: options.seq
        };

        _loggerProxy.default.logger.log("Roap:index#sendRoapOK --> ROAP OK sending with seq ".concat(options.seq));

        return _this2.roapRequest.sendRoap({
          roapMessage: roapMessage,
          locusSelfUrl: meeting.selfUrl,
          mediaId: options.mediaId,
          correlationId: options.correlationId,
          audioMuted: meeting.isAudioMuted(),
          videoMuted: meeting.isVideoMuted(),
          meetingId: meeting.id
        }).then(function () {
          _this2.roapHandler.submit({
            type: _constants.ROAP.SEND_ROAP_MSG,
            msg: roapMessage,
            correlationId: options.correlationId
          });

          _loggerProxy.default.logger.log("Roap:index#sendRoapOK --> ROAP OK sent with seq ".concat(options.seq));

          meeting.setRoapSeq(options.seq);
        });
      });
    } // eslint-disable-next-line no-warning-comments
    // TODO: try to merge sendRoapOk and roapAnswer

    /**
     * Sends a ROAP answer...
     * @param {SeqOptions} options
     * @param {Boolean} options.audioMuted
     * @param {Boolean} options.videoMuted
     * @returns {Promise}
     * @private
     * @memberof Roap
     */

  }, {
    key: "sendRoapAnswer",
    value: function sendRoapAnswer(options) {
      var _this3 = this;

      var meeting = this.webex.meetings.meetingCollection.getByKey('correlationId', options.correlationId);
      var roapMessage = {
        messageType: _constants.ROAP.ROAP_TYPES.ANSWER,
        sdps: options.sdps,
        version: _constants.ROAP.ROAP_VERSION,
        seq: options.seq
      };
      return this.roapRequest.sendRoap({
        roapMessage: roapMessage,
        locusSelfUrl: meeting.selfUrl,
        mediaId: options.mediaId,
        correlationId: options.correlationId,
        audioMuted: options.audioMuted,
        videoMuted: options.videoMuted,
        meetingId: meeting.id
      }).then(function () {
        meeting.setRoapSeq(options.seq);

        _this3.roapHandler.submit({
          type: _constants.ROAP.SEND_ROAP_MSG,
          msg: roapMessage,
          correlationId: options.correlationId
        });
      });
    }
    /**
     * Sends a ROAP error...
     * @param {Object} session
     * @param {Object} locus
     * @param {String} errorType
     * @returns {Promise}
     * @private
     * @memberof Roap
     */

  }, {
    key: "sendRoapError",
    value: function sendRoapError(session, locus, errorType) {
      var msg = {
        messageType: _constants.ROAP.ROAP_TYPES.ERROR,
        version: _constants.ROAP.ROAP_VERSION,
        errorType: errorType,
        seq: session.OFFER.seq
      };
      return this.roapRequest.sendRoap(msg, locus);
    }
    /**
     * sends a roap media request
     * @param {RoapOptions} options
     * @returns {Promise}
     * @private
     * @memberof Roap
     */

  }, {
    key: "sendRoapMediaRequest",
    value: function sendRoapMediaRequest(options) {
      var _this4 = this;

      var meeting = options.meeting,
          reconnect = options.reconnect;
      var roapMessage = {
        messageType: _constants.ROAP.ROAP_TYPES.OFFER,
        sdps: [options.sdp],
        // sdps: [options.sdp],
        version: _constants.ROAP.ROAP_VERSION,
        seq: typeof options.roapSeq !== 'number' && (0, _isNan.default)((0, _parseFloat2.default)(options.roapSeq)) ? 0 : options.roapSeq + 1,
        tieBreaker: 4294967294 // Math.floor(Math.random() * (2 ** 32) - 1) // TODO: Handle the roap  conflict scenario

      };
      this.roapHandler.submit({
        type: _constants.ROAP.SEND_ROAP_MSG,
        msg: roapMessage,
        correlationId: meeting.correlationId
      });
      return this.roapRequest.sendRoap({
        roapMessage: roapMessage,
        correlationId: meeting.correlationId,
        locusSelfUrl: meeting.selfUrl,
        mediaId: reconnect ? '' : meeting.mediaId,
        audioMuted: meeting.isAudioMuted(),
        videoMuted: meeting.isVideoMuted(),
        meetingId: meeting.id
      }).then(function (locus) {
        _this4.roapHandler.submit({
          type: _constants.ROAP.SEND_ROAP_MSG_SUCCESS,
          seq: roapMessage.seq,
          correlationId: meeting.correlationId
        });

        meeting.setRoapSeq(roapMessage.seq); // eslint-disable-next-line no-warning-comments
        // TODO: we need to attach peerconenction to locus not sure if we need to pass everything here

        return locus; // eslint-disable-next-line no-warning-comments
        // TODO: check where to update the sequence number
      });
    }
    /**
     * sends a roap media request
     * @param {RoapOptions} options
     * @returns {Promise}
     * @private
     * @memberof Roap
     */

  }]);
  return Roap;
}(_webexCore.StatelessWebexPlugin);

exports.default = Roap;
//# sourceMappingURL=index.js.map
