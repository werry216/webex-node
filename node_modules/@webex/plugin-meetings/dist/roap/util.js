"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _peerConnectionManager = _interopRequireDefault(require("../peer-connection-manager"));

var _constants = require("../constants");

var _loggerProxy = _interopRequireDefault(require("../common/logs/logger-proxy"));

var _parameter = _interopRequireDefault(require("../common/errors/parameter"));

var RoapUtil = {};

var ROAP_ANSWER = _constants._ANSWER_.toLowerCase();

RoapUtil.shouldHandleMedia = function (meeting) {
  var offer = meeting.mediaProperties.peerConnection && meeting.mediaProperties.peerConnection.signalingState === _constants.SDP.HAVE_LOCAL_OFFER;

  if (offer) {
    return false;
  }

  return true;
};

RoapUtil.handleError = function (pc) {
  return _peerConnectionManager.default.rollBackLocalDescription({
    peerConnection: pc
  }).then(function () {
    return _promise.default.resolve(true);
  }).catch(function (err) {
    _loggerProxy.default.logger.error("Roap:util#handleError --> ".concat(err));

    return _promise.default.reject(err);
  });
};

RoapUtil.findError = function (messageType, errorType, type) {
  return (type === _constants.ROAP.RECEIVE_ROAP_MSG || type === _constants.ROAP.SEND_ROAP_MSG) && messageType === _constants._ERROR_ && errorType === _constants._CONFLICT_;
};

RoapUtil.ensureMeeting = function (meeting, type) {
  if (type === _constants.ROAP.RECEIVE_ROAP_MSG || type === _constants.ROAP.SEND_ROAP_MSG || type === _constants.ROAP.SEND_ROAP_MSG_SUCCESS) {
    if (!meeting) {
      return false;
    }
  }

  return true;
};

RoapUtil.updatePeerConnection = function (meeting, session) {
  return _peerConnectionManager.default.updatePeerConnection({
    offerSdp: session.OFFER.sdps,
    peerConnection: meeting.mediaProperties.peerConnection
  }, {
    meetingId: meeting.id,
    remoteQualityLevel: meeting.mediaProperties.remoteQualityLevel
  }).then(function (res) {
    meeting.roap.lastRoapOffer = session.OFFER.sdps;
    return res;
  });
};

RoapUtil.setRemoteDescription = function (meeting, session) {
  _loggerProxy.default.logger.info("Roap:util#setRemoteDescription --> Transmit WAIT_TX_OK, correlationId: ".concat(meeting.correlationId));

  if (!(meeting && meeting.mediaProperties.peerConnection)) {
    _loggerProxy.default.logger.error("Roap:util#setRemoteDescription --> DANGER no media or screen peer connection, correlationId: ".concat(meeting.correlationId));

    return _promise.default.reject(new _parameter.default('Must provide a media or screen peer connection'));
  }

  return _peerConnectionManager.default.setRemoteSessionDetails(meeting.mediaProperties.peerConnection, ROAP_ANSWER, session.ANSWER.sdps[0], meeting.id).then(function () {
    _loggerProxy.default.logger.info("Roap:util#setRemoteDescription --> Success for correlationId: ".concat(meeting.correlationId));

    return {
      seq: session.ANSWER.seq,
      locusId: meeting.locusId,
      locusSelfId: meeting.locusInfo.self.id,
      mediaId: meeting.mediaId,
      correlationId: meeting.correlationId
    };
  }).catch(function (err) {
    _loggerProxy.default.logger.error("Roap:util#setRemoteDescription --> ".concat(err));

    throw err;
  });
};

var _default = RoapUtil;
exports.default = _default;
//# sourceMappingURL=util.js.map
