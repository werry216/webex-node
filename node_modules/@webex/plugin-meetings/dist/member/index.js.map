{"version":3,"sources":["index.js"],"names":["Member","participant","options","MEETINGS","id","name","isAudioMuted","isVideoMuted","isSelf","isHost","isGuest","isInLobby","isInMeeting","isNotAdmitted","isContentSharing","status","isDevice","isUser","associatedUser","isRecording","isMutable","isRemovable","type","isModerator","isModeratorAssignmentProhibited","processParticipant","processParticipantOptions","processMember","MemberUtil","extractId","extractName","processStatus","processIsSelf","selfId","processIsHost","hostId","processIsContentSharing","contentSharingId","processType","processIsRecording","recordingId","extractStatus","_IN_LOBBY_","_IN_MEETING_","_NOT_IN_MEETING_","flag","sharingId","isSame","isAssociatedSame"],"mappings":";;;;;;;;;;;;;;;;;;AAGA;;AAOA;;AAVA;AACA;AACA;;AAUA;AACA;AACA;IACqBA,M;AAGnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,kBAAYC,WAAZ,EAAuC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAA;AAAA,qDAZ3BC,mBAY2B;;AACrC;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,SAAKF,WAAL,GAAmB,IAAnB;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKG,EAAL,GAAU,IAAV;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,IAAL,GAAY,IAAZ;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,YAAL,GAAoB,IAApB;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,YAAL,GAAoB,IAApB;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,MAAL,GAAc,IAAd;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,MAAL,GAAc,IAAd;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,OAAL,GAAe,IAAf;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,SAAL,GAAiB,IAAjB;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,WAAL,GAAmB,IAAnB;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,aAAL,GAAqB,IAArB;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,gBAAL,GAAwB,IAAxB;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,MAAL,GAAc,IAAd;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,QAAL,GAAgB,IAAhB;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,MAAL,GAAc,IAAd;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,cAAL,GAAsB,IAAtB;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,WAAL,GAAmB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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\nimport {\n  MEETINGS,\n  _IN_LOBBY_,\n  _NOT_IN_MEETING_,\n  _IN_MEETING_\n} from '../constants';\n\nimport MemberUtil from './util.js';\n\n/**\n * @class Member\n */\nexport default class Member {\n  namespace = MEETINGS;\n\n  /**\n   * @param {Object} participant - the locus participant\n   * @param {Object} [options] - constructor params\n   * @param {String} options.selfId\n   * @param {String} options.hostId\n   * @param {String} options.contentSharingId\n   * @param {String} options.type\n   * @returns {Member}\n   * @memberof Member\n   */\n  constructor(participant, options = {}) {\n    /**\n     * The server participant object\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof Member\n    */\n    this.participant = null;\n    /**\n     * The member id\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof Member\n    */\n    this.id = null;\n    /**\n     * The member name\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof Member\n    */\n    this.name = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isAudioMuted = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isVideoMuted = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isSelf = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isHost = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isGuest = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isInLobby = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isInMeeting = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isNotAdmitted = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isContentSharing = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.status = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isDevice = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isUser = null;\n    /**\n         * Is this member associated to another user by way of pairing (typical of devices)\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof Member\n    */\n    this.associatedUser = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isRecording = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isMutable = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isRemovable = null;\n    /**\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Member\n    */\n    this.type = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isModerator = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isModeratorAssignmentProhibited = null;\n    // TODO: more participant types\n    // such as native client, web client, is a device, what type of phone, etc\n    this.processParticipant(participant);\n    this.processParticipantOptions(participant, options);\n    this.processMember();\n  }\n\n  /**\n   * set all the participant values extracted directly from locus participant\n   * @param {Object} participant the locus participant object\n   * @returns {undefined}\n   * @private\n   * @memberof Member\n   */\n  processParticipant(participant) {\n    this.participant = participant;\n    if (participant) {\n      this.id = MemberUtil.extractId(participant);\n      this.name = MemberUtil.extractName(participant);\n      this.isAudioMuted = MemberUtil.isAudioMuted(participant);\n      this.isVideoMuted = MemberUtil.isVideoMuted(participant);\n      this.isGuest = MemberUtil.isGuest(participant);\n      this.isUser = MemberUtil.isUser(participant);\n      this.isDevice = MemberUtil.isDevice(participant);\n      this.isModerator = MemberUtil.isModerator(participant);\n      this.isModeratorAssignmentProhibited = MemberUtil.isModeratorAssignmentProhibited(participant);\n      this.processStatus(participant);\n      // must be done last\n      this.isNotAdmitted = MemberUtil.isNotAdmitted(participant, this.isGuest, this.status);\n    }\n  }\n\n  /**\n   * Use the members options and participant values to set on the member\n   * @param {Object} participant the locus participant object\n   * @param {Object} options the passed in options, what was set on members\n   * @returns {undefined}\n   * @private\n   * @memberof Member\n   */\n  processParticipantOptions(participant, options) {\n    if (participant && options) {\n      this.processIsSelf(participant, options.selfId);\n      this.processIsHost(participant, options.hostId);\n      this.processIsContentSharing(participant, options.contentSharingId);\n      this.processType(options.type);\n      this.processIsRecording(participant, options.recordingId);\n    }\n  }\n\n  /**\n   * processes what already exists on the member to determine other info about the member\n   * @returns {undefined}\n   * @private\n   * @memberof Member\n   */\n  processMember() {\n    // must occur after self, guest, meeting, and type properties are calculated\n    this.isRemovable = MemberUtil.isRemovable(this.isSelf, this.isGuest, this.isInMeeting, this.type);\n    // must occur after self, device, meeting, mute status, and type properties are calculated\n    this.isMutable = MemberUtil.isMutable(this.isSelf, this.isDevice, this.isInMeeting, this.isAudioMuted, this.type);\n  }\n\n  /**\n   * set the status on member object\n   * @param {Object} participant the locus participant object\n   * @returns {undefined}\n   * @private\n   * @memberof Member\n   */\n  processStatus(participant) {\n    this.status = MemberUtil.extractStatus(participant);\n    switch (this.status) {\n      case _IN_LOBBY_:\n        this.isInLobby = true;\n        this.isInMeeting = false;\n        break;\n      case _IN_MEETING_:\n        this.isInLobby = false;\n        this.isInMeeting = true;\n        break;\n      case _NOT_IN_MEETING_:\n        this.isInLobby = false;\n        this.isInMeeting = false;\n        break;\n      default:\n        this.isInLobby = false;\n        this.isInMeeting = false;\n    }\n  }\n\n  /**\n   * set the isContentSharing on member\n   * @param {Boolean} flag\n   * @returns {undefined}\n   * @public\n   * @memberof Member\n   */\n  setIsContentSharing(flag) {\n    this.isContentSharing = flag;\n  }\n\n  /**\n   * set the isHost on member\n   * @param {Boolean} flag\n   * @returns {undefined}\n   * @public\n   * @memberof Member\n   */\n  setIsHost(flag) {\n    this.isHost = flag;\n  }\n\n  /**\n   * set the isSelf on member\n   * @param {Boolean} flag\n   * @returns {undefined}\n   * @public\n   * @memberof Member\n   */\n  setIsSelf(flag) {\n    this.isSelf = flag;\n  }\n\n  /**\n   * determine if this member is content sharing\n   * @param {Object} participant\n   * @param {String} sharingId\n   * @returns {undefined}\n   * @public\n   * @memberof Member\n   */\n  processIsContentSharing(participant, sharingId) {\n    if (MemberUtil.isUser(participant)) {\n      this.isContentSharing = MemberUtil.isSame(participant, sharingId);\n    }\n    else if (MemberUtil.isDevice(participant)) {\n      this.isContentSharing = MemberUtil.isAssociatedSame(participant, sharingId);\n    }\n  }\n\n  /**\n   * Determine if this member is recording\n   * @param {Object} participant\n   * @param {String} recordingId\n   * @returns {undefined}\n   * @public\n   * @memberof Member\n   */\n  processIsRecording(participant, recordingId) {\n    this.isRecording = MemberUtil.isSame(participant, recordingId);\n  }\n\n  /**\n   * determine if this member is the self\n   * @param {Object} participant\n   * @param {String} selfId\n   * @returns {undefined}\n   * @private\n   * @memberof Member\n   */\n  processIsSelf(participant, selfId) {\n    if (MemberUtil.isUser(participant)) {\n      this.isSelf = MemberUtil.isSame(participant, selfId);\n    }\n    else if (MemberUtil.isDevice(participant)) {\n      this.isSelf = MemberUtil.isAssociatedSame(participant, selfId);\n      this.associatedUser = selfId;\n    }\n  }\n\n  /**\n   * determine if this member is the host\n   * @param {Object} participant\n   * @param {String} hostId\n   * @returns {undefined}\n   * @private\n   * @memberof Member\n   */\n  processIsHost(participant, hostId) {\n    if (MemberUtil.isUser(participant)) {\n      this.isHost = MemberUtil.isSame(participant, hostId);\n    }\n    else if (MemberUtil.isDevice(participant)) {\n      this.isHost = MemberUtil.isAssociatedSame(participant, hostId);\n    }\n  }\n\n  /**\n   * set the type for the member, could be MEETING or CALL\n   * @param {String} type\n   * @returns {undefined}\n   * @private\n   * @memberof Member\n   */\n  processType(type) {\n    this.type = type;\n  }\n}\n"]}