"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _webexCore = require("@webex/webex-core");

var _loggerProxy = _interopRequireDefault(require("../common/logs/logger-proxy"));

var _constants = require("../constants");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * @class MeetingRequest
 */
var MeetingRequest = /*#__PURE__*/function (_StatelessWebexPlugin) {
  (0, _inherits2.default)(MeetingRequest, _StatelessWebexPlugin);

  var _super = _createSuper(MeetingRequest);

  function MeetingRequest() {
    (0, _classCallCheck2.default)(this, MeetingRequest);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(MeetingRequest, [{
    key: "getActiveMeetings",
    value:
    /**
       *  get all the active meetings for the user
       * @returns {Array} return locus array
      */
    function getActiveMeetings() {
      var _this = this;

      return this.request({
        api: _constants.API.LOCUS,
        resource: _constants.RESOURCE.LOCI
      }).then(function (res) {
        return _this.determineRedirections(res.body);
      }).catch(function (error) {
        _loggerProxy.default.logger.error("Meetings:request#getActiveMeetings --> failed to get locus details, ".concat(error));
      });
    }
    /**
       *  fetch geoHit for the user
       * @returns {Promise<object>} geoHintInfo
      */

  }, {
    key: "fetchGeoHint",
    value: function fetchGeoHint() {
      return this.webex.internal.services.fetchClientRegionInfo();
    } // locus federation, determines and populate locus if the responseBody has remote URLs to fetch locus details

    /**
     *  Fetches indivdual locus rather then getting all at once
     * @param {object} responseBody determine the locus and fetch them if a remoteUrl is given
     * @returns {Promise}  returns locusObject array
     */

  }, {
    key: "determineRedirections",
    value: function determineRedirections(responseBody) {
      var _this2 = this;

      if (responseBody.remoteLocusClusterUrls && responseBody.remoteLocusClusterUrls.length) {
        return _promise.default.all(responseBody.remoteLocusClusterUrls.map(function (url) {
          return _this2.request({
            method: _constants.HTTP_VERBS.GET,
            url: url,
            runWhitelistedDomains: true // allows auth token for whitelisted domain

          }).then(function (res) {
            responseBody.loci = responseBody.loci.concat(res.body.loci);
            responseBody.locusUrls = responseBody.locusUrls.concat(res.body.locusUrls);
            return _promise.default.resolve(responseBody);
          }).catch(function (error) {
            _loggerProxy.default.logger.error("Meetings:request#determineRedirections --> failed to get locus details from url: ".concat(url, ", reason: ").concat(error));
          });
        })).then(function () {
          return _promise.default.resolve(responseBody);
        });
      }

      return _promise.default.resolve(responseBody);
    }
  }]);
  return MeetingRequest;
}(_webexCore.StatelessWebexPlugin);

exports.default = MeetingRequest;
//# sourceMappingURL=request.js.map
