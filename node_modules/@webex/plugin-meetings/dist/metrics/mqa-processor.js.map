{"version":3,"sources":["mqa-processor.js"],"names":["isBrowser","MQAProcessor","data","videoReceive","audioTransmit","audioReceive","videoTransmit","intervalNumber","id","interval","rtcCandidatePair","rtcOutVideo","rtpOutVideo","vsTransmit","sumValue","STATS","AUDIO_SENDER_ID","push","AUDIO_RECEIVER_ID","VIDEO_SENDER_ID","VIDEO_RECEIVER_ID","SHARE_SENDER_ID","MQA_STATS","DEFAULT_SHARE_SENDER_STATS","common","remoteLossRate","pliCount","length","rtpPackets","packetsSent","streams","transmittedFrameRate","framesEncoded","availableBitRate","availableOutgoingBitrate","roundTripTime","totalRoundTripTime","transmittedBitrate","framesSent","transmittedHeight","frameHeight","transmittedKeyFrames","hugeFramesSent","transmittedWidth","frameWidth","intervalMetadata","payload"],"mappings":"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","sourcesContent":["import {\n  STATS,\n  MQA_STATS\n} from '../constants';\nimport BrowserDetection from '../common/browser-detection';\n\nconst {isBrowser} = BrowserDetection();\n\n/**\n * @description MQAProcessor handles interval data for MQA\n * @export\n * @class MQAProcessor\n */\nclass MQAProcessor {\n  /**\n     * @constructor\n     * @public\n     * @memberof MQAProcessor\n     */\n  constructor() {\n    this.data = {\n      videoReceive: [],\n      audioTransmit: [],\n      audioReceive: [],\n      videoTransmit: []\n    };\n    this.intervalNumber = 1;\n  }\n\n  /**\n   * @param {String} id\n   * @param {Array<WebRTCData>} interval - a slice of metrics history\n   * @returns {undefined}\n   * @memberof MQAProcessor\n   */\n  process(id, interval) {\n    let rtcCandidatePair, rtcOutVideo, rtpOutVideo; // TODO: , rtcInVideo, rtpInVideo, rtcOutAudio, rtcInAudio, rtpInAudio, rtpOutAudio; // TODO:\n    let vsTransmit;\n\n    const {\n      videoReceive, audioTransmit, audioReceive, videoTransmit\n    } = this.data;\n\n    const sumValue = interval[0]; // the head is the last interval value, webRTC spec has some values automatically summed\n\n    if (sumValue) {\n      rtcCandidatePair = sumValue.rtcCandidatePair;\n    }\n\n    switch (id) {\n      case STATS.AUDIO_SENDER_ID:\n        audioTransmit.push();\n        break;\n      case STATS.AUDIO_RECEIVER_ID:\n        audioReceive.push();\n        break;\n      case STATS.VIDEO_SENDER_ID:\n        videoTransmit.push();\n        break;\n      case STATS.VIDEO_RECEIVER_ID:\n        videoReceive.push();\n        break;\n      case STATS.SHARE_SENDER_ID:\n        if (sumValue) {\n          rtcOutVideo = sumValue.rtcOutVideo;\n          rtpOutVideo = sumValue.rtpOutVideo;\n        }\n        vsTransmit = {...MQA_STATS.DEFAULT_SHARE_SENDER_STATS};\n        if (isBrowser('firefox')) {\n          vsTransmit.common.remoteLossRate = rtpOutVideo ? rtpOutVideo.pliCount / (interval.length * this.intervalNumber) : 0;\n          vsTransmit.common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : 0;\n          vsTransmit.streams[0].common.transmittedFrameRate = rtcOutVideo ? rtcOutVideo.framesEncoded / (interval.length * this.intervalNumber) : 0;\n          vsTransmit.streams[0].common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : 0;\n        }\n        else {\n          vsTransmit.common.availableBitRate = rtcCandidatePair ? rtcCandidatePair.availableOutgoingBitrate : 0;\n          vsTransmit.common.remoteLossRate = rtpOutVideo ? rtpOutVideo.pliCount / (interval.length * this.intervalNumber) : 0;\n          vsTransmit.common.roundTripTime = rtcCandidatePair ? rtcCandidatePair.totalRoundTripTime / (interval.length * this.intervalNumber) : 0;\n          vsTransmit.common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : 0;\n          vsTransmit.streams[0].common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : 0;\n          vsTransmit.streams[0].common.transmittedBitrate = rtcCandidatePair ? rtcCandidatePair.availableOutgoingBitrate : 0;\n          vsTransmit.streams[0].common.transmittedFrameRate = rtcOutVideo ? rtcOutVideo.framesSent / (interval.length * this.intervalNumber) : 0;\n          vsTransmit.streams[0].transmittedHeight = rtcOutVideo ? rtcOutVideo.frameHeight : 0;\n          vsTransmit.streams[0].transmittedKeyFrames = rtcOutVideo ? rtcOutVideo.hugeFramesSent : 0;\n          vsTransmit.streams[0].transmittedWidth = rtcOutVideo ? rtcOutVideo.frameWidth : 0;\n        }\n        videoTransmit.push(vsTransmit);\n        break;\n      default:\n        break;\n    }\n    this.data.intervalMetadata = this.data.intervalMetadata || {...MQA_STATS.intervalMetadata};\n  }\n\n  /**\n   * get the data payload for media quality events after they all have been processed\n   * wait to call this until after you have all the data from the interval you want\n   * this method clears the data as a side effect\n   * @returns {Object}\n   * @memberof MQAProcessor\n   */\n  getData() {\n    this.intervalNumber += 1;\n\n    const payload = {...this.data, intervalNumber: this.intervalNumber};\n\n    this.data = {\n      videoReceive: [],\n      audioTransmit: [],\n      audioReceive: [],\n      videoTransmit: []\n    };\n\n    return payload;\n  }\n}\n\nexport default MQAProcessor;\n"]}