"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

/**
 * stores the last x filtered stream datas
 */

/**
 * @export
 * @class StatsHistory
 */
var StatsHistory = /*#__PURE__*/function () {
  /**
   * instantiate our wrapped history array
   * @param {Number} max
   */
  function StatsHistory(max) {
    (0, _classCallCheck2.default)(this, StatsHistory);

    /**
     * @instance
     * @type {Array}
     * @public
     * @memberof StatsHistory
     */
    this.history = [];
    /**
     * @instance
     * @type {Number}
     * @public
     * @memberof StatsHistory
     */

    this.max = max;
  }
  /**
   * @returns {Array} the array of stats reports, read from [0] = most recent to [length - 1] = least recent
   * @public
   * @memberof StatsHistory
   */


  (0, _createClass2.default)(StatsHistory, [{
    key: "get",
    value: function get() {
      return this.history;
    }
    /**
     * deletes the history array and resets it
     * @returns {undefined}
     * @public
     * @memberof StatsHistory
     */

  }, {
    key: "clear",
    value: function clear() {
      this.history = [];
    }
    /**
     * gets the stored stat
     * @param {Number} index the location
     * @returns {Object} the stat at location index
     * @public
     * @memberof StatsHistory
     */

  }, {
    key: "getAt",
    value: function getAt(index) {
      return this.history[index];
    }
    /**
     * gets the most recently stored stat
     * @returns {Object} the most recently added stat to the history recorder
     * @public
     * @memberof StatsHistory
     */

  }, {
    key: "getMostRecent",
    value: function getMostRecent() {
      return this.history.length > 1 ? this.getAt(0) : null;
    }
    /**
     * gets the last two values, that can be used to compare
     * @returns {Object} {previous: WebRTCData, current: WebRTCData}
     */

  }, {
    key: "getComparable",
    value: function getComparable() {
      return {
        previous: this.getMostRecent(),
        current: this.history.length > 2 ? this.getAt(1) : null
      };
    }
    /**
     * gets a cut of the n most recent WebRTC datas stored
     * @param {Number} exclusiveEnd
     * @returns {Array}
     */

  }, {
    key: "getSlice",
    value: function getSlice(exclusiveEnd) {
      return this.history.slice(0, exclusiveEnd);
    }
    /**
     * adds a history entry into tshe array at the head, removes from the tail
     * if too large, returns the old tail if removed
     * @param {WebRTCData} data filtered stats report to add to the history array
     * @returns {Object} the removed stats report at the end if that had to be removed
     * to make space for the new stats data report to be added to the front
     */

  }, {
    key: "add",
    value: function add(data) {
      var removed = null;

      if (this.history.length >= this.max) {
        removed = this.history.pop();
      }

      this.history.unshift(data);
      return removed;
    }
  }]);
  return StatsHistory;
}();

exports.default = StatsHistory;
//# sourceMappingURL=history.js.map
