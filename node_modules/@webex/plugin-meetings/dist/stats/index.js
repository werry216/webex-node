"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _forEach2 = _interopRequireDefault(require("lodash/forEach"));

var _webexCore = require("@webex/webex-core");

var _constants = require("../constants");

var _stats = _interopRequireDefault(require("../stats/stats"));

var _util = _interopRequireDefault(require("../stats/util"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * @class WebRTCStats
 */
var WebRTCStats = /*#__PURE__*/function (_StatelessWebexPlugin) {
  (0, _inherits2.default)(WebRTCStats, _StatelessWebexPlugin);

  var _super = _createSuper(WebRTCStats);

  /**
  *
  * @param {Object} attrs
  * @param {Object} options
  * @param {Object} [optionalCreateOptions]
  */
  function WebRTCStats(attrs, options, optionalCreateOptions) {
    var _this;

    (0, _classCallCheck2.default)(this, WebRTCStats);
    _this = _super.call(this, {}, options);
    /**
    * @instance
    * @type {Object}
    * @private
    * @memberof WebRTCStats
    */

    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "namespace", _constants.MEETINGS);
    _this.attrs = attrs;
    /**
    * @instance
    * @type {Object}
    * @private
    * @memberof WebRTCStats
    */

    _this.options = options;
    /**
    * @instance
    * @type {Object}
    * @public
    * @memberof WebRTCStats
    */

    _this.senders = {};
    /**
    * @instance
    * @type {Object}
    * @public
    * @memberof WebRTCStats
    */

    _this.receivers = {};
    /**
    * @instance
    * @type {Meeting}
    * @private
    * @memberof WebRTCStats
    */

    _this.meetingRef = null;
    /**
    * @instance
    * @type {Object}
    * @public
    * @memberof WebRTCStats
    */

    _this.statsConfig = null;

    _this.populate(optionalCreateOptions);

    return _this;
  }
  /**
   * @param {Object} [optionalCreateOptions]
   * @param {Object} optionalCreateOptions.config
   * @param {Meeting} optionalCreateOptions.meeting
   * @param {Object} optionalCreateOptions.senders
   * @param {Object} optionalCreateOptions.receivers
   * @returns {WebRTCStats}
   * @private
   * @memberof WebRTCStats
   */


  (0, _createClass2.default)(WebRTCStats, [{
    key: "populate",
    value: function populate(optionalCreateOptions) {
      if (optionalCreateOptions) {
        if (optionalCreateOptions.config) {
          this.setConfig(optionalCreateOptions.config);
        }

        if (optionalCreateOptions.meeting) {
          this.associateMeeting(optionalCreateOptions.meeting);
        }

        if (optionalCreateOptions.senders) {
          this.addSenders(optionalCreateOptions.senders);
        }

        if (optionalCreateOptions.receivers) {
          this.addReceivers(optionalCreateOptions.receivers);
        }
      }

      return this;
    }
    /**
     * @param {Object} config
     * @returns {WebRTCStats}
     * @public
     * @memberof WebRTCStats
     */

  }, {
    key: "setConfig",
    value: function setConfig(config) {
      this.statsConfig = config;
    }
    /**
     * @param {Meeting} meeting
     * @returns {WebRTCStats}
     * @public
     * @memberof WebRTCStats
     */

  }, {
    key: "associateMeeting",
    value: function associateMeeting(meeting) {
      this.meetingRef = meeting;
      return this;
    }
    /**
     * @param {Object} senders
     * @param {Boolean} useConfig
     * @returns {WebRTCStats}
     * @public
     * @memberof WebRTCStats
     */

  }, {
    key: "addSenders",
    value: function addSenders(senders) {
      var _this2 = this;

      var useConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (!senders.forEach) {
        throw new TypeError('Stats senders must be created with an iterable array of senders to act on.');
      }

      senders.forEach(function (sender) {
        _this2.addSender(sender, useConfig);
      });
      return this;
    }
    /**
     * @param {Object} sender
     * @param {Boolean} useConfig
     * @returns {WebRTCStats}
     * @public
     * @memberof WebRTCStats
     */

  }, {
    key: "addSender",
    value: function addSender(sender) {
      var useConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (sender) {
        if (useConfig) {
          _util.default.generateSingularOptions(sender, this.statsConfig, this.meetingRef, _constants.STATS.SENDERS);
        }

        sender.type = _constants.STATS.SENDER;
        this.senders[sender.id] = new _stats.default(this.attrs, this.options, sender);
      }

      return this;
    }
    /**
     *
     * @param {String} id
     * @returns {WebRTCStats}
     * @public
     * @memberof WebRTCStats
     */

  }, {
    key: "addSenderStats",
    value: function addSenderStats(id) {
      var newSender = new _stats.default(this.attrs, this.options);
      this.senders[id] = newSender;
      return newSender;
    }
    /**
     *
     * @param {String} id
     * @returns {WebRTCStats}
     * @public
     * @memberof WebRTCStats
     */

  }, {
    key: "addReceiverStats",
    value: function addReceiverStats(id) {
      var newReceiver = new _stats.default(this.attrs, this.options);
      this.receivers[id] = newReceiver;
      return newReceiver;
    }
    /**
     * @param {Object} receivers
     * @param {boolean} useConfig
     * @returns {WebRTCStats}
     * @public
     * @memberof WebRTCStats
     */

  }, {
    key: "addReceivers",
    value: function addReceivers(receivers) {
      var _this3 = this;

      var useConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (!receivers.forEach) {
        throw new TypeError('Stats receivers must be created with an iterable array of receivers to act on.');
      }

      receivers.forEach(function (receiver) {
        _this3.addReceiver(receiver, useConfig);
      });
      return this;
    }
    /**
     * @param {Object} receiver
     * @param {boolean} useConfig
     * @returns {WebRTCStats}
     * @public
     * @memberof WebRTCStats
     */

  }, {
    key: "addReceiver",
    value: function addReceiver(receiver) {
      var useConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (receiver) {
        if (useConfig) {
          _util.default.generateSingularOptions(receiver, this.statsConfig, this.meetingRef, _constants.STATS.RECEIVERS);
        }

        receiver.type = _constants.STATS.RECEIVER;
        this.receivers[receiver.id] = new _stats.default(this.attrs, this.options, receiver);
      }

      return this;
    }
    /**
     * @returns {Object}
     * @public
     * @memberof WebRTCStats
     */

  }, {
    key: "getReceivers",
    value: function getReceivers() {
      return this.receivers;
    }
    /**
     * @returns {Object}
     * @public
     * @memberof WebRTCStats
     */

  }, {
    key: "getSenders",
    value: function getSenders() {
      return this.senders;
    }
    /**
     * @param {String} id
     * @returns {Object}
     * @public
     * @memberof WebRTCStats
     */

  }, {
    key: "getSender",
    value: function getSender(id) {
      return this.senders[id];
    }
    /**
     * @param {String} id
     * @returns {Object}
     * @public
     * @memberof WebRTCStats
     */

  }, {
    key: "getReceiver",
    value: function getReceiver(id) {
      return this.receivers[id];
    }
    /**
     * @returns {Object}
     * @public
     * @memberof WebRTCStats
     */

  }, {
    key: "destroySenders",
    value: function destroySenders() {
      var _this4 = this;

      (0, _forEach2.default)(this.senders, function (v, k) {
        _this4.destroySender(k);
      });
    }
    /**
     * @returns {undefined}
     * @public
     * @memberof WebRTCStats
     */

  }, {
    key: "destroyReceivers",
    value: function destroyReceivers() {
      var _this5 = this;

      (0, _forEach2.default)(this.receivers, function (v, k) {
        _this5.destroyReceiver(k);
      });
    }
    /**
     * @param {String} id
     * @returns {undefined}
     * @public
     * @memberof WebRTCStats
     */

  }, {
    key: "destroySender",
    value: function destroySender(id) {
      var sender = this.getSender(id);

      if (sender) {
        if (sender.stream) {
          sender.stream.destroy();
        }
      }

      sender = null;
      delete this.receivers[id];
    }
    /**
     * @param {String} id
     * @returns {undefined}
     * @public
     * @memberof WebRTCStats
     */

  }, {
    key: "destroyReceiver",
    value: function destroyReceiver(id) {
      var receiver = this.getReceiver(id);

      if (receiver) {
        if (receiver.stream) {
          receiver.stream.destroy();
        }
      }

      receiver = null;
      delete this.receivers[id];
    }
  }]);
  return WebRTCStats;
}(_webexCore.StatelessWebexPlugin);

exports.default = WebRTCStats;
//# sourceMappingURL=index.js.map
