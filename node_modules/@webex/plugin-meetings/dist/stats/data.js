"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _uuid = _interopRequireDefault(require("uuid"));

var _constants = require("../constants");

// TODO: Break this up a bit more, so that consumers aren't calling data.data.getData()

/**
 * @class WebRTCData
 */
var WebRTCData = /*#__PURE__*/function () {
  /**
   * @param {Object} data
   */
  function WebRTCData(data) {
    (0, _classCallCheck2.default)(this, WebRTCData);
    this.data = data;
    this.id = _uuid.default.v4();
  }
  /**
   * get omitted rtc/rtcp/rtp/track/transport/candidate data with omitted data (default)
   * @returns {Object}
   */


  (0, _createClass2.default)(WebRTCData, [{
    key: "omit",
    value: function omit() {
      var _this = this;

      var flat = {};
      (0, _keys.default)(this.data).forEach(function (key) {
        flat[key] = (0, _omit2.default)(_this.data[key], _constants.DEFAULT_OMISSION_DATA_KEYS);
      });
      return flat;
    }
    /**
     * returns if the data is empty
     * @returns {Boolean};
     */

  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return (0, _isEmpty2.default)(this.data);
    }
    /**
     * get the unique id for this specific stat pull
     * @returns {String};
     */

  }, {
    key: "getId",
    value: function getId() {
      return this.id;
    }
    /**
     * get the transformed data
     * @returns {Object}
     */

  }, {
    key: "getData",
    value: function getData() {
      return this.data;
    }
  }]);
  return WebRTCData;
}();

exports.default = WebRTCData;
//# sourceMappingURL=data.js.map
