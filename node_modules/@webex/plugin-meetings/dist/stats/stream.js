"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _weakMap = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/weak-map"));

var _events = require("events");

var _readableStream = require("readable-stream");

var _commonTimers = require("@webex/common-timers");

var _constants = require("../constants");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var pcsByRTCRtpDirection = new _weakMap.default();
var emittersByRTCRtpDirection = new _weakMap.default();
var RTCRtpDirectionByEmitter = new _weakMap.default();
var emittersByStream = new _weakMap.default();
var timersByEmitter = new _weakMap.default();
/**
 * Helper function that ensures no matter how many stats streams we create, we
 * don't poll the PeerConnection more than once per interval.
 * @param {EventEmitter} emitter
 * @param {Number} interval
 * @private
 * @returns {undefined}
 */

var schedule = function schedule(emitter, interval) {
  var timer = (0, _commonTimers.safeSetTimeout)(function () {
    var direction = RTCRtpDirectionByEmitter.get(emitter);
    var pc = pcsByRTCRtpDirection.get(direction);

    if (direction) {
      direction.getStats().then(function (stats) {
        emitter.emit(_constants.STATS.DATA, stats); // TODO: Remove on 1.0 spec adoption
        // "closed" is supposed to be part of the {@link RTCPeerConnectionState}
        // enum according to spec, but at time of writing, was still implemented
        // in the {@link RTCSignalingState} enum.

        if (!(pc.signalingState === _constants.STATS.CLOSED || pc.connectionState === _constants.STATS.CLOSED)) {
          schedule(emitter, interval);
        }
      }).catch(function (err) {
        emitter.emit(_constants.ERROR, err);
      });
    }
  }, interval);
  timersByEmitter.set(emitter, timer);
};
/**
 * Polls an {@link RTCPeerConnection} once per second and emits its {@link RTCStatsReport}
 * {@link RTCStatsReport}
 */


var StatsStream = /*#__PURE__*/function (_Readable) {
  (0, _inherits2.default)(StatsStream, _Readable);

  var _super = _createSuper(StatsStream);

  /**
   * @private
   * @param {Object} config
   * @param {RTCRtpSender|RTCRtpReceiver} config.rTCRtpDirection
   * @param {RTCPeerConnection} config.peerConnection
   * @param {Number} config.interval
   */
  function StatsStream() {
    var _this;

    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, StatsStream);
    _this = _super.call(this, {
      objectMode: true
    });
    _this.interval = config.interval;

    if (!emittersByRTCRtpDirection.has(config.rTCRtpDirection)) {
      emittersByRTCRtpDirection.set(config.rTCRtpDirection, new _events.EventEmitter());
    }

    var emitter = emittersByRTCRtpDirection.get(config.rTCRtpDirection);

    if (!emittersByStream.has((0, _assertThisInitialized2.default)(_this))) {
      emittersByStream.set((0, _assertThisInitialized2.default)(_this), emitter);
    }

    if (!RTCRtpDirectionByEmitter.has(emitter)) {
      RTCRtpDirectionByEmitter.set(emitter, config.rTCRtpDirection);
    }

    if (!pcsByRTCRtpDirection.has(config.rTCRtpDirection)) {
      pcsByRTCRtpDirection.set(config.rTCRtpDirection, config.peerConnection);
    }

    emitter.once(_constants.ERROR, function (err) {
      _this.emit(_constants.ERROR, err);
    });
    return _this;
  }
  /**
   * See NodeJS Docs
   * @private
   * @returns {undefined}
   */


  (0, _createClass2.default)(StatsStream, [{
    key: "_read",
    value: function _read() {
      var _this2 = this;

      var emitter = emittersByStream.get(this);
      emitter.once(_constants.STATS.DATA, function (data) {
        if (!_this2.isPaused()) {
          _this2.push(data);
        }
      });

      if (!timersByEmitter.has(emitter)) {
        schedule(emitter, this.interval);
      }
    }
  }]);
  return StatsStream;
}(_readableStream.Readable);

exports.default = StatsStream;
//# sourceMappingURL=stream.js.map
