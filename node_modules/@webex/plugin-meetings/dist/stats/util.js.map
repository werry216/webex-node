{"version":3,"sources":["util.js"],"names":["StatsUtil","generateSingularOptions","senderReceiver","config","meeting","name","options","correlate","generateOptions","ParameterError","configOptions","STATS","SENDERS","RECEIVERS","type","typeConfig","media","parent","peerConnection","filter","transceiver","child"],"mappings":";;;;;;;;;;;;;;;;AAEA;;AAGA;;AAEA,IAAMA,SAAS,GAAG,EAAlB;;AAEAA,SAAS,CAACC,uBAAV,GAAoC,UAACC,cAAD,EAAiBC,MAAjB,EAAyBC,OAAzB,EAAkCC,IAAlC,EAA2C;AAC7E,MAAMC,OAAO,GAAG,EAAhB;AAEAA,EAAAA,OAAO,CAACD,IAAD,CAAP,GAAgB,EAAhB;AACAC,EAAAA,OAAO,CAACD,IAAD,CAAP,CAAcH,cAAc,CAACK,SAA7B,IAA0CL,cAA1C;AACAF,EAAAA,SAAS,CAACQ,eAAV,CAA0BF,OAA1B,EAAmCH,MAAnC,EAA2CC,OAA3C;AACD,CAND;;AAQAJ,SAAS,CAACQ,eAAV,GAA4B,UAACF,OAAD,EAAUH,MAAV,EAAkBC,OAAlB,EAA8B;AACxD,MAAI,CAACE,OAAD,IAAY,CAACH,MAAb,IAAuB,CAACC,OAA5B,EAAqC;AACnC,UAAM,IAAIK,kBAAJ,CAAmB,sGAAnB,CAAN;AACD;;AACDT,EAAAA,SAAS,CAACU,aAAV,CAAwBN,OAAxB,EAAiCD,MAAjC,EAAyCG,OAAzC,EAAkDK,iBAAMC,OAAxD;AACAZ,EAAAA,SAAS,CAACU,aAAV,CAAwBN,OAAxB,EAAiCD,MAAjC,EAAyCG,OAAzC,EAAkDK,iBAAME,SAAxD;AACD,CAND;;AAQAb,SAAS,CAACU,aAAV,GAA0B,UAACN,OAAD,EAAUD,MAAV,EAAkBG,OAAlB,EAA2BD,IAA3B,EAAoC;AAC5D,MAAIC,OAAO,CAACD,IAAD,CAAX,EAAmB;AACjB,2BAAQC,OAAO,CAACD,IAAD,CAAf,EAAuB,UAACS,IAAD,EAAU;AAC/B,UAAI,CAACA,IAAI,CAACP,SAAV,EAAqB;AACnB,cAAM,IAAIE,kBAAJ,mDAA8DK,IAA9D,oEAAN;AACD;;AACD,UAAI,CAACX,MAAM,CAACE,IAAD,CAAN,CAAaS,IAAI,CAACP,SAAlB,CAAL,EAAmC;AACjC;AACD;;AACD,UAAMQ,UAAU,GAAGZ,MAAM,CAACE,IAAD,CAAN,CAAaS,IAAI,CAACP,SAAlB,CAAnB;AACA,UAAMS,KAAK,GAAGZ,OAAO,CAACW,UAAU,CAACE,MAAZ,CAAP,CAA2BF,UAAU,CAACG,cAAtC,CAAd;AACA,UAAMC,MAAM,GAAGH,KAAK,CAACD,UAAU,CAACK,WAAZ,CAAL,CAA8BL,UAAU,CAACM,KAAzC,CAAf;AAEA,2BAAcP,IAAd,EAAoB;AAACE,QAAAA,KAAK,EAALA,KAAD;AAAQG,QAAAA,MAAM,EAANA,MAAR;AAAgBd,QAAAA,IAAI,EAAEU,UAAU,CAACV;AAAjC,OAApB;AACD,KAZD;AAaD;AACF,CAhBD;;eAkBeL,S","sourcesContent":["import {forEach} from 'lodash';\n\nimport {\n  STATS\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nconst StatsUtil = {};\n\nStatsUtil.generateSingularOptions = (senderReceiver, config, meeting, name) => {\n  const options = {};\n\n  options[name] = {};\n  options[name][senderReceiver.correlate] = senderReceiver;\n  StatsUtil.generateOptions(options, config, meeting);\n};\n\nStatsUtil.generateOptions = (options, config, meeting) => {\n  if (!options || !config || !meeting) {\n    throw new ParameterError('stats/util->validateInitialization#options, config, and meeting must be provided to execute getStats');\n  }\n  StatsUtil.configOptions(meeting, config, options, STATS.SENDERS);\n  StatsUtil.configOptions(meeting, config, options, STATS.RECEIVERS);\n};\n\nStatsUtil.configOptions = (meeting, config, options, name) => {\n  if (options[name]) {\n    forEach(options[name], (type) => {\n      if (!type.correlate) {\n        throw new ParameterError(`stats/util->validateInitialization#each ${type} must be provided with a correlate as audio OR video OR share.`);\n      }\n      if (!config[name][type.correlate]) {\n        return;\n      }\n      const typeConfig = config[name][type.correlate];\n      const media = meeting[typeConfig.parent][typeConfig.peerConnection];\n      const filter = media[typeConfig.transceiver][typeConfig.child];\n\n      Object.assign(type, {media, filter, name: typeConfig.name});\n    });\n  }\n};\n\nexport default StatsUtil;\n"]}