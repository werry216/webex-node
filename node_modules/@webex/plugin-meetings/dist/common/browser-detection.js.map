{"version":3,"sources":["browser-detection.js"],"names":["mockDetectionObject","getOSName","require","platform","getOSVersion","release","getBrowserName","getBrowserVersion","isBrowser","createDetectionObject","results","name","agent","window","navigator","userAgent","bowser","getParser"],"mappings":";;;;;;;;;;;;;;AAAA;;AAEA;;AAEA,IAAMA,mBAAmB,GAAG;AAC1B;AACAC,EAAAA,SAAS,EAAE;AAAA,WAAMC,OAAO,CAAC,IAAD,CAAP,CAAcC,QAAd,EAAN;AAAA,GAFe;AAG1BC,EAAAA,YAAY,EAAE;AAAA,WAAMF,OAAO,CAAC,IAAD,CAAP,CAAcG,OAAd,EAAN;AAAA,GAHY;;AAI1B;AACAC,EAAAA,cAAc,EAAE;AAAA,WAAM,EAAN;AAAA,GALU;AAM1BC,EAAAA,iBAAiB,EAAE;AAAA,WAAM,EAAN;AAAA,GANO;AAO1BC,EAAAA,SAAS,EAAE;AAAA,WAAM,KAAN;AAAA;AAPe,CAA5B;;AAUA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,OAAD,EAAa;AACzC,MAAMT,SAAS,GAAG,SAAZA,SAAY;AAAA;;AAAA,iCAAMS,OAAN,aAAMA,OAAN,uBAAMA,OAAO,CAAET,SAAT,EAAN,mEAA8B,EAA9B;AAAA,GAAlB;;AACA,MAAMG,YAAY,GAAG,SAAfA,YAAe;AAAA;;AAAA,oCAAMM,OAAN,aAAMA,OAAN,uBAAMA,OAAO,CAAEN,YAAT,EAAN,yEAAiC,EAAjC;AAAA,GAArB;;AAEA,MAAME,cAAc,GAAG,SAAjBA,cAAiB;AAAA;;AAAA,oCAAMI,OAAN,aAAMA,OAAN,uBAAMA,OAAO,CAAEJ,cAAT,EAAN,yEAAmC,EAAnC;AAAA,GAAvB;;AACA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA;;AAAA,oCAAMG,OAAN,aAAMA,OAAN,uBAAMA,OAAO,CAAEH,iBAAT,EAAN,yEAAsC,EAAtC;AAAA,GAA1B;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAACG,IAAD;AAAA,WAAU,CAAC,EAACD,OAAD,aAACA,OAAD,eAACA,OAAO,CAAEF,SAAT,CAAmBG,IAAnB,EAAyB,IAAzB,CAAD,CAAX;AAAA,GAAlB;;AAEA,SAAO;AACLV,IAAAA,SAAS,EAATA,SADK;AAELG,IAAAA,YAAY,EAAZA,YAFK;AAGLE,IAAAA,cAAc,EAAdA,cAHK;AAILC,IAAAA,iBAAiB,EAAjBA,iBAJK;AAKLC,IAAAA,SAAS,EAATA;AALK,GAAP;AAOD,CAhBD;;eAkBe,uBAAQ,UAACI,KAAD;AAAA;;AAAA,SAAYA,KAAK,yBAAIC,gBAAOC,SAAX,8CAAI,kBAAkBC,SAA3B,GACjCN,qBAAqB,CAACO,gBAAOC,SAAP,CAAiBL,KAAK,IAAIC,gBAAOC,SAAP,CAAiBC,SAA3C,CAAD,CADY,GAEjCf,mBAFqB;AAAA,CAAR,C","sourcesContent":["import bowser from 'bowser';\nimport {memoize} from 'lodash';\nimport window from 'global/window';\n\nconst mockDetectionObject = {\n  /* eslint-disable global-require */\n  getOSName: () => require('os').platform(),\n  getOSVersion: () => require('os').release(),\n  /* eslint-enable global-require */\n  getBrowserName: () => '',\n  getBrowserVersion: () => '',\n  isBrowser: () => false\n};\n\nconst createDetectionObject = (results) => {\n  const getOSName = () => results?.getOSName() ?? '';\n  const getOSVersion = () => results?.getOSVersion() ?? '';\n\n  const getBrowserName = () => results?.getBrowserName() ?? '';\n  const getBrowserVersion = () => results?.getBrowserVersion() ?? '';\n\n  const isBrowser = (name) => !!results?.isBrowser(name, true);\n\n  return {\n    getOSName,\n    getOSVersion,\n    getBrowserName,\n    getBrowserVersion,\n    isBrowser\n  };\n};\n\nexport default memoize((agent) => (agent || window.navigator?.userAgent ?\n  createDetectionObject(bowser.getParser(agent || window.navigator.userAgent)) :\n  mockDetectionObject\n));\n"]}