"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _memoize2 = _interopRequireDefault(require("lodash/memoize"));

var _bowser = _interopRequireDefault(require("bowser"));

var _window = _interopRequireDefault(require("global/window"));

var mockDetectionObject = {
  /* eslint-disable global-require */
  getOSName: function getOSName() {
    return require('os').platform();
  },
  getOSVersion: function getOSVersion() {
    return require('os').release();
  },

  /* eslint-enable global-require */
  getBrowserName: function getBrowserName() {
    return '';
  },
  getBrowserVersion: function getBrowserVersion() {
    return '';
  },
  isBrowser: function isBrowser() {
    return false;
  }
};

var createDetectionObject = function createDetectionObject(results) {
  var getOSName = function getOSName() {
    var _results$getOSName;

    return (_results$getOSName = results === null || results === void 0 ? void 0 : results.getOSName()) !== null && _results$getOSName !== void 0 ? _results$getOSName : '';
  };

  var getOSVersion = function getOSVersion() {
    var _results$getOSVersion;

    return (_results$getOSVersion = results === null || results === void 0 ? void 0 : results.getOSVersion()) !== null && _results$getOSVersion !== void 0 ? _results$getOSVersion : '';
  };

  var getBrowserName = function getBrowserName() {
    var _results$getBrowserNa;

    return (_results$getBrowserNa = results === null || results === void 0 ? void 0 : results.getBrowserName()) !== null && _results$getBrowserNa !== void 0 ? _results$getBrowserNa : '';
  };

  var getBrowserVersion = function getBrowserVersion() {
    var _results$getBrowserVe;

    return (_results$getBrowserVe = results === null || results === void 0 ? void 0 : results.getBrowserVersion()) !== null && _results$getBrowserVe !== void 0 ? _results$getBrowserVe : '';
  };

  var isBrowser = function isBrowser(name) {
    return !!(results !== null && results !== void 0 && results.isBrowser(name, true));
  };

  return {
    getOSName: getOSName,
    getOSVersion: getOSVersion,
    getBrowserName: getBrowserName,
    getBrowserVersion: getBrowserVersion,
    isBrowser: isBrowser
  };
};

var _default = (0, _memoize2.default)(function (agent) {
  var _window$navigator;

  return agent || (_window$navigator = _window.default.navigator) !== null && _window$navigator !== void 0 && _window$navigator.userAgent ? createDetectionObject(_bowser.default.getParser(agent || _window.default.navigator.userAgent)) : mockDetectionObject;
});

exports.default = _default;
//# sourceMappingURL=browser-detection.js.map
