{"version":3,"sources":["events.js"],"names":["Events","scope","eventName","args","LoggerProxy","logger","debug","EventsUtil","getScopeLog","LoggerConfig","verboseEvents","getEventLog","EventEmitter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAEA;;;;;;AAEA;AACA;AACA;AACA;AACA;IACMA,M;;;;;;;;;;;;WACJ,cAAKC,KAAL,EAAYC,SAAZ,EAAuBC,IAAvB,EAA6B;AAC3BC,2BAAYC,MAAZ,CAAmBC,KAAnB,WAA4BC,cAAWC,WAAX,CAAuBP,KAAvB,CAA5B,mBAAkEC,SAAlE,SAA8EO,sBAAaC,aAAb,iBAAoCH,cAAWI,WAAX,CAAuBR,IAAvB,CAApC,IAAqE,EAAnJ;;AAEA,0GAAkBD,SAAlB,EAA6BC,IAA7B;AACD;;;EALkBS,e;;eAQN,IAAIZ,MAAJ,E","sourcesContent":["import EventEmitter from 'events';\n\nimport LoggerProxy from '../logs/logger-proxy';\nimport LoggerConfig from '../logs/logger-config';\n\nimport EventsUtil from './util';\n\n/**\n * Events\n * plugin-meetings global\n * Used to emit events internally between modules\n */\nclass Events extends EventEmitter {\n  emit(scope, eventName, args) {\n    LoggerProxy.logger.debug(`${EventsUtil.getScopeLog(scope)}event#${eventName}${LoggerConfig.verboseEvents ? ` -- ${EventsUtil.getEventLog(args)}` : ''}`);\n\n    return super.emit(eventName, args);\n  }\n}\n\nexport default new Events();\n"]}