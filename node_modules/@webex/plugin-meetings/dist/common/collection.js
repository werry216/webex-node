"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _constants = require("../constants");

var _parameter = _interopRequireDefault(require("../common/errors/parameter"));

/**
 * @class Collection
 */
var Collection = /*#__PURE__*/function () {
  /**
   * @param {String} property
   * @memberof Collection
   */
  function Collection(property) {
    (0, _classCallCheck2.default)(this, Collection);
    (0, _defineProperty2.default)(this, "namespace", _constants.MEETINGS);

    if (!property || !(0, _isString2.default)(property)) {
      throw new _parameter.default('Collection expects a string to use as a property name.');
    }
    /**
     * The property name for what collection will be stored, i.e., this.meetingInfos, this.meetings, etc.
     * @instance
     * @type {String}
     * @public
     * @memberof Meetings
     */


    this.propertyName = property;
    /**
     * The actual object for the collection
     * @instance
     * @type {Object}
     * @public
     * @memberof Meetings
     */

    this[this.propertyName] = {};
  }
  /**
   * @param {String} id ID of the thing stuffed into the collection at id location
   * @returns {Any} returns whatever is being stuffed into the collection
   * @public
   * @memberof Collection
   */


  (0, _createClass2.default)(Collection, [{
    key: "get",
    value: function get(id) {
      return this[this.propertyName] && this[this.propertyName][id] ? this[this.propertyName][id] : null;
    }
    /**
     * @param {String} id the id of the meeting info instance to add to the collection
     * @param {Any} value the thing to set in the collection
     * @returns {Any} returns the thing just put in the collection
     * @public
     * @memberof Collection
     */

  }, {
    key: "set",
    value: function set(id, value) {
      this[this.propertyName][id] = value;
      return this.get(id);
    }
    /**
     * remove the thing at the id
     * @param {String} id ID of the thing you wish to delete from the collection
     * @returns {undefined}
     * @public
     * @memberof Collection
     */

  }, {
    key: "delete",
    value: function _delete(id) {
      delete this[this.propertyName][id];
    }
    /**
     * @returns {Object} returns an object map of things stuffed into the collection
     * @public
     * @memberof Collection
     */

  }, {
    key: "getAll",
    value: function getAll() {
      return this[this.propertyName];
    }
    /**
     * @param {Object} set the replacement object
     * @returns {Object} returns an object map of things stuffed into the collection
     * @public
     * @memberof Collection
     */

  }, {
    key: "setAll",
    value: function setAll(set) {
      this[this.propertyName] = set;
      return this.getAll();
    }
  }]);
  return Collection;
}();

exports.default = Collection;
//# sourceMappingURL=collection.js.map
