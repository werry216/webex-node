{"version":3,"sources":["intent-to-join.js"],"names":["IntentToJoinError","message","ERROR_DICTIONARY","INTENT_TO_JOIN","MESSAGE","error","name","NAME","sdkMessage","stack","Error","joinIntentRequired","code","CODE"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA;AACA;AACA;IACqBA,iB;;;;;AACnB;AACF;AACA;AACA;AACA;AACA;AACE,+BAA6E;AAAA;;AAAA,QAAjEC,OAAiE,uEAAvDC,4BAAiBC,cAAjB,CAAgCC,OAAuB;AAAA,QAAdC,KAAc,uEAAN,IAAM;AAAA;AAC3E,8BAAMJ,OAAN;AACA,UAAKK,IAAL,GAAYJ,4BAAiBC,cAAjB,CAAgCI,IAA5C;AACA,UAAKC,UAAL,GAAkBN,4BAAiBC,cAAjB,CAAgCC,OAAlD;AACA,UAAKC,KAAL,GAAaA,KAAb;AACA,UAAKI,KAAL,GAAaJ,KAAK,GAAGA,KAAK,CAACI,KAAT,GAAkB,IAAIC,KAAJ,EAAD,CAAcD,KAAjD;AACA,UAAKE,kBAAL,GAA0B,IAA1B;AACA,UAAKC,IAAL,GAAYV,4BAAiBC,cAAjB,CAAgCU,IAA5C;AAP2E;AAQ5E;;;+CAf4CH,K","sourcesContent":["import {ERROR_DICTIONARY} from '../../constants';\n\n/**\n * Extended Error object to signify the intent to join for unclaimed PMR scenarios\n */\nexport default class IntentToJoinError extends Error {\n  /**\n  *\n  * @constructor\n  * @param {String} [message]\n  * @param {Object} [error]\n  */\n  constructor(message = ERROR_DICTIONARY.INTENT_TO_JOIN.MESSAGE, error = null) {\n    super(message);\n    this.name = ERROR_DICTIONARY.INTENT_TO_JOIN.NAME;\n    this.sdkMessage = ERROR_DICTIONARY.INTENT_TO_JOIN.MESSAGE;\n    this.error = error;\n    this.stack = error ? error.stack : (new Error()).stack;\n    this.joinIntentRequired = true;\n    this.code = ERROR_DICTIONARY.INTENT_TO_JOIN.CODE;\n  }\n}\n"]}