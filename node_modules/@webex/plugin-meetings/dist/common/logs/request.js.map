{"version":3,"sources":["request.js"],"names":["LogsRequest","options","webex","id","feedbackId","uuid","v4","locusId","correlationId","meetingId","callStart","LoggerProxy","logger","info","internal","support","submitLogs","error","reject"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;AACA;AACA;IACqBA,W;AACnB;AACF;AACA;AACA;AACA;AACA;AACE,uBAAYC,OAAZ,EAAqB;AAAA;AACnB,SAAKC,KAAL,GAAaD,OAAO,CAACC,KAArB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;gGACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBD,gBAAAA,OAAjB,2DAA2B,EAA3B;AACQE,gBAAAA,EADR,GACaF,OAAO,CAACG,UAAR,IAAsBC,cAAKC,EAAL,EADnC;AAGIC,gBAAAA,OAHJ,GAIMN,OAJN,CAGIM,OAHJ,EAGaC,aAHb,GAIMP,OAJN,CAGaO,aAHb,EAG4BC,SAH5B,GAIMR,OAJN,CAG4BQ,SAH5B,EAGuCC,SAHvC,GAIMT,OAJN,CAGuCS,SAHvC;;AAMEC,qCAAYC,MAAZ,CAAmBC,IAAnB,2EAA2FV,EAA3F;;AANF;AAAA;AAAA,uBASU,KAAKD,KAAL,CAAWY,QAAX,CAAoBC,OAApB,CAA4BC,UAA5B,CAAuC;AAC3CZ,kBAAAA,UAAU,EAAED,EAD+B;AAC3BI,kBAAAA,OAAO,EAAPA,OAD2B;AAClBC,kBAAAA,aAAa,EAAbA,aADkB;AACHC,kBAAAA,SAAS,EAATA,SADG;AACQC,kBAAAA,SAAS,EAATA;AADR,iBAAvC,CATV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAcIC,qCAAYC,MAAZ,CAAmBK,KAAnB,CAAyB,wDAAzB;;AAdJ,iDAgBW,iBAAQC,MAAR,aAhBX;;AAAA;AAAA,iDAmBSf,EAnBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O","sourcesContent":["import uuid from 'uuid';\n\nimport LoggerProxy from './logger-proxy';\n\n/**\n * @class LogsRequest\n */\nexport default class LogsRequest {\n  /**\n   *\n   * @param {Object} options\n   * @param {Object} options.webex Webex SDK instance\n   * @param {ClientMetrics} metrics\n   */\n  constructor(options) {\n    this.webex = options.webex;\n  }\n\n  /**\n   * Uploads logs to the support server\n   *\n   * @param {Object} [options={}]\n   * @param {String} [options.feedbackId=uuid.v4] ID used for tracking\n   * @param {String} [options.locusId]\n   * @param {String} [options.correlationId]\n   * @param {String} [options.callStart] Call Start Time\n   * @param {String} [options.meetingId] webex meeting ID\n   * @returns {Promise.<String>} Feedback ID\n   * @memberof LogsRequest\n   */\n  async uploadLogs(options = {}) {\n    const id = options.feedbackId || uuid.v4();\n    const {\n      locusId, correlationId, meetingId, callStart\n    } = options;\n\n    LoggerProxy.logger.info(`Logs:request#uploadLogs --> uploading user logs for feedbackId: ${id}`);\n\n    try {\n      await this.webex.internal.support.submitLogs({\n        feedbackId: id, locusId, correlationId, meetingId, callStart\n      });\n    }\n    catch (error) {\n      LoggerProxy.logger.error('Logs:request#uploadLogs --> uploading user logs failed', error);\n\n      return Promise.reject(error);\n    }\n\n    return id;\n  }\n}\n"]}