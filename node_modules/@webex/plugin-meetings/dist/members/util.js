"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _constants = require("../constants");

var MembersUtil = {};
/**
 * @param {Object} invitee with emailAddress or email
 * @param {String} locusUrl
 * @param {Boolean} alertIfActive
 * @returns {Object} the format object
 */

MembersUtil.generateAddMemberOptions = function (invitee, locusUrl, alertIfActive) {
  return {
    invitee: invitee,
    locusUrl: locusUrl,
    alertIfActive: alertIfActive
  };
};
/**
 * @param {Array} memberIds
 * @param {String} locusUrl
 * @returns {Object} the format object
 */


MembersUtil.generateAdmitMemberOptions = function (memberIds, locusUrl) {
  return {
    locusUrl: locusUrl,
    memberIds: memberIds
  };
};
/**
 * @param {Object} options with {invitee: {emailAddress, email}, alertIfActive}
 * @returns {Object} with {invitees: [{address}], alertIfActive}
 */


MembersUtil.getAddMemberBody = function (options) {
  return {
    invitees: [{
      address: options.invitee.emailAddress || options.invitee.email
    }],
    alertIfActive: options.alertIfActive
  };
};
/**
 * @param {Object} options with {memberIds}
 * @returns {Object} admit with {memberIds}
 */


MembersUtil.getAdmitMemberRequestBody = function (options) {
  return {
    admit: {
      participantIds: options.memberIds
    }
  };
};
/**
 * @param {Object} format with {memberIds, locusUrl}
 * @returns {Object} the request parameters (method, uri, body) needed to make a admitMember request
 */


MembersUtil.getAdmitMemberRequestParams = function (format) {
  var body = MembersUtil.getAdmitMemberRequestBody(format);
  var uri = "".concat(format.locusUrl, "/").concat(_constants.CONTROLS);
  return {
    method: _constants.HTTP_VERBS.PUT,
    uri: uri,
    body: body
  };
};
/**
 * @param {Object} format with {invitee {emailAddress, email}, locusUrl, alertIfActive}
 * @returns {Object} the request parameters (method, uri, body) needed to make a addMember request
 */


MembersUtil.getAddMemberRequestParams = function (format) {
  var body = MembersUtil.getAddMemberBody(format);
  var requestParams = {
    method: _constants.HTTP_VERBS.PUT,
    uri: format.locusUrl,
    body: body
  };
  return requestParams;
};

MembersUtil.isInvalidInvitee = function (invitee) {
  if (!(invitee && (invitee.email || invitee.emailAddress))) {
    return true;
  }

  return !_constants.VALID_EMAIL_ADDRESS.test(invitee.email || invitee.emailAddress);
};

MembersUtil.getRemoveMemberRequestParams = function (options) {
  var body = {
    reason: options.reason
  };
  var uri = "".concat(options.locusUrl, "/").concat(_constants.PARTICIPANT, "/").concat(options.memberId, "/").concat(_constants.LEAVE);
  return {
    method: _constants.HTTP_VERBS.PUT,
    uri: uri,
    body: body
  };
};

MembersUtil.generateTransferHostMemberOptions = function (transfer, moderator, locusUrl) {
  return {
    moderator: moderator,
    locusUrl: locusUrl,
    memberId: transfer
  };
};

MembersUtil.generateRemoveMemberOptions = function (removal, locusUrl) {
  return {
    reason: _constants._FORCED_,
    memberId: removal,
    locusUrl: locusUrl
  };
};

MembersUtil.generateMuteMemberOptions = function (mute, status, locusUrl) {
  return {
    memberId: mute,
    muted: status,
    locusUrl: locusUrl
  };
};

MembersUtil.getMuteMemberRequestParams = function (options) {
  var body = {
    audio: {
      muted: options.muted
    }
  };
  var uri = "".concat(options.locusUrl, "/").concat(_constants.PARTICIPANT, "/").concat(options.memberId, "/").concat(_constants.CONTROLS);
  return {
    method: _constants.HTTP_VERBS.PATCH,
    uri: uri,
    body: body
  };
};

MembersUtil.getTransferHostToMemberRequestParams = function (options) {
  var body = {
    role: {
      moderator: options.moderator
    }
  };
  var uri = "".concat(options.locusUrl, "/").concat(_constants.PARTICIPANT, "/").concat(options.memberId, "/").concat(_constants.CONTROLS);
  return {
    method: _constants.HTTP_VERBS.PATCH,
    uri: uri,
    body: body
  };
};

var _default = MembersUtil;
exports.default = _default;
//# sourceMappingURL=util.js.map
