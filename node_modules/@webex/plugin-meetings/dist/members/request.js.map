{"version":3,"sources":["request.js"],"names":["MembersRequest","MEETINGS","options","invitee","emailAddress","email","locusUrl","ParameterError","requestParams","MembersUtil","getAddMemberRequestParams","request","memberIds","getAdmitMemberRequestParams","memberId","getRemoveMemberRequestParams","getMuteMemberRequestParams","moderator","getTransferHostToMemberRequestParams","StatelessWebexPlugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAEA;;;;;;AAGA;AACA;AACA;IACqBA,c;;;;;;;;;;;;;;;4FACPC,mB;;;;;;;AAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACE,wBAAWC,OAAX,EAAoB;AAClB,UAAI,EAAE,CAACA,OAAD,IAAY,CAACA,OAAO,CAACC,OAArB,IAAiC,CAACD,OAAO,CAACC,OAAR,CAAgBC,YAAjB,IAAiC,CAACF,OAAO,CAACC,OAAR,CAAgBE,KAAnF,IAA6F,CAACH,OAAO,CAACI,QAAxG,CAAJ,EAAuH;AACrH,cAAM,IAAIC,kBAAJ,CAAmB,8FAAnB,CAAN;AACD;;AACD,UAAMC,aAAa,GAAGC,cAAYC,yBAAZ,CAAsCR,OAAtC,CAAtB;;AAEA,aAAO,KAAKS,OAAL,CAAaH,aAAb,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,qBAAYN,OAAZ,EAAqB;AACnB,UAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACI,QAArB,IAAiC,CAACJ,OAAO,CAACU,SAA9C,EAAyD;AACvD,cAAM,IAAIL,kBAAJ,CAAmB,yGAAnB,CAAN;AACD;;AACD,UAAMC,aAAa,GAAGC,cAAYI,2BAAZ,CAAwCX,OAAxC,CAAtB;;AAEA,aAAO,KAAKS,OAAL,CAAaH,aAAb,CAAP;AACD;;;WAED,sBAAaN,OAAb,EAAsB;AACpB,UAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACI,QAArB,IAAiC,CAACJ,OAAO,CAACY,QAA9C,EAAwD;AACtD,cAAM,IAAIP,kBAAJ,CAAmB,iGAAnB,CAAN;AACD;;AAED,UAAMC,aAAa,GAAGC,cAAYM,4BAAZ,CAAyCb,OAAzC,CAAtB;;AAEA,aAAO,KAAKS,OAAL,CAAaH,aAAb,CAAP;AACD;;;WAED,oBAAWN,OAAX,EAAoB;AAClB,UAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACI,QAArB,IAAiC,CAACJ,OAAO,CAACY,QAA9C,EAAwD;AACtD,cAAM,IAAIP,kBAAJ,CAAmB,iGAAnB,CAAN;AACD;;AAED,UAAMC,aAAa,GAAGC,cAAYO,0BAAZ,CAAuCd,OAAvC,CAAtB;;AAEA,aAAO,KAAKS,OAAL,CAAaH,aAAb,CAAP;AACD;;;WAED,8BAAqBN,OAArB,EAA8B;AAC5B,UAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACI,QAArB,IAAiC,CAACJ,OAAO,CAACY,QAA1C,IAAsD,CAACZ,OAAO,CAACe,SAAnE,EAA8E;AAC5E,cAAM,IAAIV,kBAAJ,CAAmB,gHAAnB,CAAN;AACD;;AAED,UAAMC,aAAa,GAAGC,cAAYS,oCAAZ,CAAiDhB,OAAjD,CAAtB;;AAEA,aAAO,KAAKS,OAAL,CAAaH,aAAb,CAAP;AACD;;;EA/DyCW,+B","sourcesContent":["import {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {MEETINGS} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nimport MembersUtil from './util';\n\n\n/**\n * @class MembersRequest\n */\nexport default class MembersRequest extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} options with format of {invitee: string, locusUrl: string}\n   * @returns {Promise}\n   * @throws {Error} if the options are not valid and complete, must have invitee with emailAddress OR email AND locusUrl\n   * @memberof MembersRequest\n   */\n  addMembers(options) {\n    if (!(!options || !options.invitee || (!options.invitee.emailAddress || !options.invitee.email) || !options.locusUrl)) {\n      throw new ParameterError('invitee must be passed and the associated locus url for this meeting object must be defined.');\n    }\n    const requestParams = MembersUtil.getAddMemberRequestParams(options);\n\n    return this.request(requestParams);\n  }\n\n  /**\n   *\n   * @param {Object} options\n   * @returns {Promise}\n   * @throws {Error} if the options are not valid and complete, must have memberIds AND locusUrl\n   * @memberof MembersRequest\n   */\n  admitMember(options) {\n    if (!options || !options.locusUrl || !options.memberIds) {\n      throw new ParameterError('memberIds must be an array passed and the associated locus url for this meeting object must be defined.');\n    }\n    const requestParams = MembersUtil.getAdmitMemberRequestParams(options);\n\n    return this.request(requestParams);\n  }\n\n  removeMember(options) {\n    if (!options || !options.locusUrl || !options.memberId) {\n      throw new ParameterError('memberId must be defined, and the associated locus url for this meeting object must be defined.');\n    }\n\n    const requestParams = MembersUtil.getRemoveMemberRequestParams(options);\n\n    return this.request(requestParams);\n  }\n\n  muteMember(options) {\n    if (!options || !options.locusUrl || !options.memberId) {\n      throw new ParameterError('memberId must be defined, and the associated locus url for this meeting object must be defined.');\n    }\n\n    const requestParams = MembersUtil.getMuteMemberRequestParams(options);\n\n    return this.request(requestParams);\n  }\n\n  transferHostToMember(options) {\n    if (!options || !options.locusUrl || !options.memberId || !options.moderator) {\n      throw new ParameterError('memberId must be defined, the associated locus url, and the moderator for this meeting object must be defined.');\n    }\n\n    const requestParams = MembersUtil.getTransferHostToMemberRequestParams(options);\n\n    return this.request(requestParams);\n  }\n}\n"]}