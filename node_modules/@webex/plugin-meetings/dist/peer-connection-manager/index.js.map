{"version":3,"sources":["index.js"],"names":["isBrowser","pc","insertBandwidthLimit","sdpLines","index","limit","periodicKeyFrame","search","AUDIO","StaticConfig","meetings","bandwidth","audio","video","SDP","PERIODIC_KEYFRAME","splice","B_LINE","setMaxFs","sdp","level","QUALITY_LEVELS","HIGH","MAX_FRAMESIZES","ParameterError","replaceSdp","maxFsLine","MAX_FS","replace","checkH264Support","videoPresent","match","h264Present","isSdpInvalid","parsedSdp","sdpTransform","parse","media","mediaLine","candidates","length","LoggerProxy","logger","error","hostCandidate","filter","candidate","type","HOST","ip","IPV4_REGEX","BAD_MEDIA_PORTS","includes","port","icePwd","iceUfrag","limitBandwidth","offerSdp","split","CARRIAGE_RETURN","i","M_LINE","join","setContentSlides","screenPc","A_CONTENT_SLIDES","iceCandidate","peerConnection","remoteQualityLevel","resolve","reject","timeout","setTimeout","localDescription","invalidSdpPresent","InvalidSdpError","RETRY_TIMEOUT","ICE_TIMEOUT","onicecandidate","evt","clearTimeout","replaceTrack","track","senders","getSenders","forEach","sender","kind","err","addStream","stream","tracksPresent","find","getTracks","addTrack","setRemoteSessionDetails","typeStr","remoteSdp","meetingId","log","signalingState","Metrics","postEvent","event","eventType","REMOTE_SDP_RECEIVED","data","canProceed","errors","generateErrorPayload","name","MEDIA_ENGINE","HAVE_LOCAL_OFFER","STABLE","OFFER","setRemoteDescription","window","RTCSessionDescription","then","remoteDescription","catch","metricName","METRICS_OPERATIONAL_MEASURES","PEERCONNECTION_FAILURE","correlation_id","reason","message","stack","metadata","sendOperationalMetric","MediaError","createOffer","enableRtx","description","setLocalDescription","LOCAL_SDP_GENERATED","INVALID_ICE_CANDIDATE","code","close","rollBackLocalDescription","ROLLBACK","updatePeerConnection","params","createAnswer","peerconnection","HAVE_REMOTE_OFFER","sdpConstraints","answer","connectionState","PEER_CONNECTION_STATE","CLOSED","setPeerConnectionEvents","meeting","mediaProperties","connectionFailed","reconnectionManager","iceState","reconnect","networkDisconnect","ICE_END","uploadLogs","file","function","CONNECTION_FAILURE","correlationId","locus_id","locusId","oniceconnectionstatechange","info","iceConnectionState","ICE_STATE","CHECKING","ICE_START","COMPLETED","CONNECTED","setNetworkStatus","NETWORK_STATUS","iceReconnected","DISCONNECTED","waitForIceReconnect","FAILED","onconnectionstatechange","CONNECTION_STATE","NEW","CONNECTING"],"mappings":"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","sourcesContent":["\n// We need to figure out how to pass a webex logger instance to these util files\n\n/* globals RTCSessionDescription */\n\nimport window from 'global/window';\nimport sdpTransform from 'sdp-transform'; // https://github.com/clux/sdp-transform\n\nimport Metrics from '../metrics';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport StaticConfig from '../common/config';\nimport {\n  RETRY_TIMEOUT,\n  ICE_TIMEOUT,\n  HOST,\n  AUDIO,\n  SDP,\n  ICE_STATE,\n  CONNECTION_STATE,\n  NETWORK_STATUS,\n  PEER_CONNECTION_STATE,\n  OFFER,\n  QUALITY_LEVELS,\n  MAX_FRAMESIZES,\n  METRICS_OPERATIONAL_MEASURES,\n  IPV4_REGEX\n} from '../constants';\nimport {error, eventType} from '../metrics/config';\nimport MediaError from '../common/errors/media';\nimport ParameterError from '../common/errors/parameter';\nimport {InvalidSdpError} from '../common/errors/webex-errors';\nimport BrowserDetection from '../common/browser-detection';\n\nconst {isBrowser} = BrowserDetection();\n\n/**\n * @export\n * @public\n */\nconst pc = {};\n\n/**\n * munges the bandwidth limit into the sdp\n * @param {String} sdpLines\n * @param {Number} index\n * @returns {String}\n */\nconst insertBandwidthLimit = (sdpLines, index) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser\n  let limit;\n  let periodicKeyFrame = '';\n\n  if (sdpLines[index].search(AUDIO) !== -1) {\n    limit = StaticConfig.meetings.bandwidth.audio;\n  }\n  else {\n    limit = StaticConfig.meetings.bandwidth.video;\n    periodicKeyFrame = SDP.PERIODIC_KEYFRAME;\n    sdpLines.splice(index + 2, 0, periodicKeyFrame);\n  }\n  sdpLines.splice(index + 1, 0, `${SDP.B_LINE}:${limit}`);\n\n  return sdpLines;\n};\n\n/**\n * needed for calliope max-fs\n * @param {String} sdp\n * @param {String} [level=QUALITY_LEVELS.HIGH] quality level for max-fs\n * @returns {String}\n */\nconst setMaxFs = (sdp, level = QUALITY_LEVELS.HIGH) => {\n  if (!MAX_FRAMESIZES[level]) {\n    throw new ParameterError(`setMaxFs: unable to set max framesize, value for level \"${level}\" is not defined`);\n  }\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert with sdp parser, no munging\n  let replaceSdp = sdp;\n  const maxFsLine = `${SDP.MAX_FS}${MAX_FRAMESIZES[level]}`;\n\n  replaceSdp = replaceSdp.replace(/(\\na=fmtp:(\\d+).*level-asymmetry-allowed=1.*)/gi, `$1;${maxFsLine}`);\n\n  return replaceSdp;\n};\n\n/**\n * checks that sdp has h264 codec in it\n * @param {String} sdp\n * @returns {boolean}\n */\nconst checkH264Support = (sdp) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser to read rtp.codec\n  const videoPresent = sdp.match(/\\nm=video.*/g);\n  const h264Present = sdp.match(/\\na=rtpmap:\\d+\\sH264.*/g);\n\n  if (videoPresent) {\n    return !!h264Present;\n  }\n\n  return true;\n};\n\n/**\n * validates the sdp, checks port, candidates, and ice info\n * @param {String} sdp\n * @returns {String}\n */\nconst isSdpInvalid = (sdp) => {\n  const parsedSdp = sdpTransform.parse(sdp);\n\n  for (const mediaLine of parsedSdp.media) {\n    if (mediaLine.candidates && mediaLine.candidates.length === 0) {\n      LoggerProxy.logger.error('PeerConnectionManager:index#isSdpInvalid --> iceCandidate: Ice candadate never completed');\n\n      return 'iceCandidate: Ice candadate never completed';\n    }\n    // Sometimes the candidates might be there but only IPV6 we need to makes sure we have IPV4\n    const hostCandidate = mediaLine.candidates.filter((candidate) => !!(candidate.type === HOST && candidate.ip.match(IPV4_REGEX)));\n\n    if (hostCandidate.length === 0) {\n      LoggerProxy.logger.error('PeerConnectionManager:index#isSdpInvalid --> iceCandidate: no IPV4 candidate present');\n\n      return 'iceCandidate: no IPV4 candidate present';\n    }\n\n    if (SDP.BAD_MEDIA_PORTS.includes(mediaLine.port)) {\n      LoggerProxy.logger.error('PeerConnectionManager:index#isSdpInvalid --> iceCandidate: Found invalid port number for the ice candidate');\n\n      return 'iceCandidate: Found invalid port number for the ice candidate';\n    }\n    if (!mediaLine.icePwd || !mediaLine.iceUfrag) {\n      LoggerProxy.logger.error('PeerConnectionManager:index#isSdpInvalid --> iceCandidate: ice ufrag and password not found');\n\n      return 'iceCandidate: ice ufrag and password not found';\n    }\n  }\n\n  return '';\n};\n\n/**\n * munges the bandwidth into the sdp\n * @param {String} sdp\n * @returns {String}\n */\nconst limitBandwidth = (sdp) => {\n  // TODO convert to sdp parser\n  let offerSdp = sdp;\n  let sdpLines = offerSdp.split(SDP.CARRIAGE_RETURN);\n\n  for (let i = 0; i < sdpLines.length; i += 1) {\n    if (sdpLines[i].search(SDP.M_LINE) !== -1) {\n      sdpLines = insertBandwidthLimit(sdpLines, i);\n    }\n  }\n  offerSdp = sdpLines.join(SDP.CARRIAGE_RETURN);\n\n  return offerSdp;\n};\n\n/**\n * makes sure the screen pc sdp has content:slides for server\n * @param {RTCPeerConnection} screenPc\n * @returns {RTCPeerConnection}\n */\npc.setContentSlides = (screenPc) => {\n  if (screenPc && screenPc.sdp) {\n    screenPc.sdp += `${SDP.A_CONTENT_SLIDES}${SDP.CARRIAGE_RETURN}`;\n  }\n\n  return screenPc;\n};\n\n/**\n * handles ice trickling and establishes ICE connection onto peer connection object\n * @param {Object} peerConnection\n * @param {Object} options\n * @param {String} options.remoteQualityLevel\n * @returns {Promise.RTCPeerConnection}\n */\npc.iceCandidate = (peerConnection, {remoteQualityLevel}) =>\n  new Promise((resolve, reject) => {\n    // TODO: we dont need timeout as we can check the api state and validate.\n    const timeout = setTimeout(() => {\n      peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n      peerConnection.sdp = setMaxFs(peerConnection.sdp, remoteQualityLevel);\n      peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n      if (isSdpInvalid(peerConnection.sdp)) {\n        setTimeout(() => {\n          // peerconnection does gather ice candidate IP but in some cases due to firewall\n          // or proxy the ice candidate does not get gathered so we need to wait and then retry\n          // if still not valid then throw an error saying missing ice candidate\n          // if ice candidate still not present after retry\n          const invalidSdpPresent = isSdpInvalid(peerConnection.sdp);\n\n          if (!invalidSdpPresent) {\n            resolve(peerConnection);\n          }\n          else {\n            LoggerProxy.logger.error('PeerConnectionManager:index#iceCandidate --> SDP not valid after waiting.');\n            reject(new InvalidSdpError(invalidSdpPresent));\n          }\n        }, RETRY_TIMEOUT);\n      }\n      else {\n        resolve(peerConnection);\n      }\n    }, ICE_TIMEOUT);\n\n    peerConnection.onicecandidate = (evt) => {\n      if (!evt.candidate && !peerConnection.sdp) {\n        peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n        peerConnection.sdp = setMaxFs(peerConnection.sdp, remoteQualityLevel);\n        peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n        if (evt.candidate === null && !isSdpInvalid(peerConnection.sdp)) {\n          clearTimeout(timeout);\n          resolve(peerConnection);\n        }\n      }\n    };\n  });\n\n/**\n * swapping tracks\n * @param {Object} peerConnection\n * @param {Object} track\n * @returns {undefined}\n */\npc.replaceTrack = (peerConnection, track) => {\n  try {\n    const senders = peerConnection.getSenders();\n\n    if (senders.length > 0) {\n      senders.forEach((sender) => {\n        if (sender.track && sender.track.kind === track.kind) {\n          sender.replaceTrack(track);\n        }\n      });\n    }\n  }\n  catch (err) {\n    LoggerProxy.logger.error(`PeerConnectionManager:index#replaceTrack --> Error replacing track, ${err}`);\n  }\n};\n\n/**\n * adding streams to peerConnection\n * @param {Object} peerConnection\n * @param {Object} stream\n * @returns {undefined}\n */\npc.addStream = (peerConnection, stream) => {\n  try {\n    if (stream && !isBrowser('edge')) {\n      const tracksPresent = peerConnection.getSenders && peerConnection.getSenders().find((sender) => sender.track != null);\n\n      if (tracksPresent) {\n        stream.getTracks().forEach((track) => {\n          pc.replaceTrack(peerConnection, track);\n        });\n\n        return;\n      }\n      stream.getTracks().forEach((track) => {\n        peerConnection.addTrack(track, stream);\n      });\n      // // TODO : may come back disable addTracks for chrome they are moving back to addStream\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=764414\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=738918#c7\n      //   peerConnection.addStream(stream);\n    }\n    else if (isBrowser('edge')) {\n      peerConnection.addStream(stream);\n    }\n  }\n  catch (err) {\n    LoggerProxy.logger.error(`PeerConnectionManager:index#addStream --> Error adding stream, error: ${error}`);\n  }\n};\n\n/**\n * setting the remote description\n * @param {Object} peerConnection\n * @param {String} typeStr\n * @param {String} remoteSdp\n * @param {String} meetingId\n * @returns {undefined}\n */\npc.setRemoteSessionDetails = (peerConnection, typeStr, remoteSdp, meetingId) => {\n  LoggerProxy.logger.log(`PeerConnectionManager:index#setRemoteSessionDetails --> Setting the remote description type: ${typeStr}State: ${peerConnection.signalingState}`);\n  let sdp = remoteSdp;\n\n  sdp = sdp.replace(/\\na=extmap.*/g, '');\n\n  // making sure that the remoteDescription is only set when there is a answer for offer\n  // or there is a offer from the server\n\n  if (!sdp) {\n    Metrics.postEvent({\n      event: eventType.REMOTE_SDP_RECEIVED,\n      meetingId,\n      data: {\n        canProceed: false,\n        errors: [Metrics.generateErrorPayload(2001, true,\n          error.name.MEDIA_ENGINE, 'missing remoteSdp')]\n      }\n    });\n  }\n  if (peerConnection.signalingState === SDP.HAVE_LOCAL_OFFER || (peerConnection.signalingState === SDP.STABLE && typeStr === SDP.OFFER)) {\n    return peerConnection.setRemoteDescription(\n      new window.RTCSessionDescription({\n        type: typeStr,\n        sdp\n      })\n    )\n      .then(() => {\n        if (!peerConnection.remoteDescription) {\n          Metrics.postEvent({\n            event: eventType.REMOTE_SDP_RECEIVED,\n            meetingId\n          });\n        }\n      })\n      .catch((error) => {\n        LoggerProxy.logger.error(`Peer-connection-manager:index#setRemoteDescription --> ${error} missing remotesdp`);\n\n\n        const metricName = METRICS_OPERATIONAL_MEASURES.PEERCONNECTION_FAILURE;\n        const data = {\n          correlation_id: meetingId,\n          reason: error.message,\n          stack: error.stack\n        };\n        const metadata = {\n          type: error.name\n        };\n\n        Metrics.sendOperationalMetric(metricName, data, metadata);\n\n        return Metrics.postEvent({\n          event: eventType.REMOTE_SDP_RECEIVED,\n          meetingId,\n          data: {\n            canProceed: false,\n            errors: [Metrics.generateErrorPayload(2001, true,\n              error.name.MEDIA_ENGINE, 'missing remoteSdp')]\n          }\n        });\n      });\n  }\n\n  return Promise.reject(new MediaError('PeerConnection in wrong state'));\n};\n\n/**\n * create offer with a valid paramater\n * @param {Object} peerConnection\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @param {string} meetingProperties.enableRtx\n * @returns {RTCPeerConnection}\n */\npc.createOffer = (peerConnection, {meetingId, remoteQualityLevel, enableRtx}) => {\n  LoggerProxy.logger.log('PeerConnectionManager:index#createOffer --> creating a new offer');\n\n  return peerConnection\n    .createOffer()\n    .then((description) => {\n      // bug https://bugs.chromium.org/p/chromium/issues/detail?id=1020642\n      // chrome currently generates RTX line irrespective of weither the server side supports it\n      // we are removing apt as well because its associated with rtx line\n\n      if (!enableRtx) {\n        description.sdp = description.sdp.replace(/\\r\\na=rtpmap:\\d+ rtx\\/\\d+/g, '');\n        description.sdp = description.sdp.replace(/\\r\\na=fmtp:\\d+ apt=\\d+/g, '');\n      }\n\n      return peerConnection.setLocalDescription(description);\n    })\n    .then(() => pc.iceCandidate(peerConnection, {remoteQualityLevel}))\n    .then(() => {\n      peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n      peerConnection.sdp = setMaxFs(peerConnection.sdp, remoteQualityLevel);\n      if (!checkH264Support(peerConnection.sdp)) {\n        throw new MediaError('openH264 is downloading please Wait. Upload logs if not working on second try');\n      }\n      peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n      pc.setContentSlides(peerConnection);\n\n      Metrics.postEvent({\n        event: eventType.LOCAL_SDP_GENERATED,\n        meetingId\n      });\n\n      return peerConnection;\n    })\n    .catch((error) => {\n      LoggerProxy.logger.error(`Peer-connection-manager:index#createOffer --> ${error}`);\n      if (error instanceof InvalidSdpError) {\n        Metrics.sendOperationalMetric(\n          METRICS_OPERATIONAL_MEASURES.INVALID_ICE_CANDIDATE,\n          {\n            correlation_id: meetingId,\n            code: error.code,\n            reason: error.message\n          }\n        );\n      }\n      else {\n        const metricName = METRICS_OPERATIONAL_MEASURES.PEERCONNECTION_FAILURE;\n        const data = {\n          correlation_id: meetingId,\n          reason: error.message,\n          stack: error.stack\n        };\n        const metadata = {\n          type: error.name\n        };\n\n        Metrics.sendOperationalMetric(metricName, data, metadata);\n      }\n\n      Metrics.postEvent({\n        event: eventType.LOCAL_SDP_GENERATED,\n        meetingId,\n        data: {\n          canProceed: false,\n          errors: [\n            Metrics.generateErrorPayload(2001, true,\n              error.name.MEDIA_ENGINE)]\n        }\n      });\n      pc.close(peerConnection);\n      throw error;\n    });\n};\n\n/**\n * rollBack local description in peerconnection\n * @param {Object} peerConnection\n * @returns {Promise.RTCPeerConnection}\n */\npc.rollBackLocalDescription = (peerConnection) => peerConnection\n  .setLocalDescription(new RTCSessionDescription({type: SDP.ROLLBACK}))\n  .then(() => peerConnection)\n  .catch((err) => {\n    LoggerProxy.logger.error(`Peer-connection-manager:index#setLocalDescription --> ${err} `);\n\n    return Promise.error(err);\n  });\n\n/**\n * @param {Object} params {\n * @param {Boolean} params.offerToReceiveAudio\n * @param {Boolean} params.offerToReceiveVideo\n * @param {string} params.offerSdp\n * @param {MediaStream} params.stream\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {Promise.<Array>} [MediaSDP, ScreenSDP]\n */\npc.updatePeerConnection = (params, {meetingId, remoteQualityLevel}) => {\n  LoggerProxy.logger.log(`PeerConnectionManager:index#updatePeerConnection --> updating the peerConnection with params: ${params}`);\n\n  const {peerConnection, offerSdp} = params;\n\n  return pc.createAnswer({\n    peerConnection,\n    offerSdp: offerSdp[0]\n  }, {meetingId, remoteQualityLevel}).then((peerconnection) => {\n    // The content slides should also be set when we are sending inactive\n    pc.setContentSlides(peerconnection);\n\n    return Promise.resolve([peerconnection.sdp]);\n  });\n};\n\n/**\n * @param {Object} params\n * @param {Object} params.peerConnection\n * @param {Object} params.sdpConstraints\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {RTCPeerConnection} peerConnection\n */\npc.createAnswer = (params, {meetingId, remoteQualityLevel}) => {\n  const {peerConnection} = params;\n\n  // TODO: Some times to many mercury event comes at the same time\n  // Need to maintain state of peerconnection\n  if (peerConnection.signalingState === SDP.HAVE_REMOTE_OFFER) {\n    return Promise.resolve(peerConnection);\n  }\n\n  return pc.setRemoteSessionDetails(peerConnection, OFFER, params.offerSdp, meetingId)\n    .then(() => peerConnection.createAnswer(params.sdpConstraints))\n    .then((answer) =>\n\n      peerConnection.setLocalDescription(answer))\n    .then(() => pc.iceCandidate(peerConnection, {remoteQualityLevel}))\n    .then(() => {\n      peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n      peerConnection.sdp = setMaxFs(peerConnection.sdp, remoteQualityLevel);\n      if (!checkH264Support(peerConnection.sdp)) {\n        throw new MediaError('openH264 is downloading please Wait. Upload logs if not working on second try');\n      }\n\n      peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n      return peerConnection;\n    })\n    .catch((error) => {\n      if (error instanceof InvalidSdpError) {\n        Metrics.sendOperationalMetric(\n          METRICS_OPERATIONAL_MEASURES.INVALID_ICE_CANDIDATE,\n          {\n            correlation_id: meetingId\n          }\n        );\n      }\n      else {\n        const metricName = METRICS_OPERATIONAL_MEASURES.PEERCONNECTION_FAILURE;\n        const data = {\n          correlation_id: meetingId,\n          reason: error.message,\n          stack: error.stack\n        };\n        const metadata = {\n          type: error.name\n        };\n\n        Metrics.sendOperationalMetric(metricName, data, metadata);\n      }\n\n      LoggerProxy.logger.error(`PeerConnectionManager:index#setRemoteSessionDetails --> Error creating remote session, error: ${error}`);\n    });\n};\n\n/**\n * shut down the peer connection\n * @param {Object} peerConnection\n * @returns {undefined}\n */\npc.close = (peerConnection) => {\n  // peerConnection.close() fails on firefox on network changes and gives a Dom exception\n  // To avoid this we have added a try catch block.\n  // Please refer to https://bugzilla.mozilla.org/show_bug.cgi?id=1274407 for more information\n  LoggerProxy.logger.log('PeerConnectionManager:index#close --> pc: close() -> attempting to close the peer connection');\n\n  if (peerConnection && peerConnection.connectionState === PEER_CONNECTION_STATE.CLOSED) {\n    LoggerProxy.logger.log('PeerConnectionManager:index#close --> pc: close() -> connection already closed');\n\n    return Promise.resolve();\n  }\n  LoggerProxy.logger.log('PeerConnectionManager:index#close --> pc: close() -> closing the mediaPeerConnection');\n\n  return Promise.resolve()\n    .then(() => {\n      if (peerConnection && peerConnection.close) {\n        peerConnection.close();\n      }\n    });\n};\n\n\npc.setPeerConnectionEvents = (meeting) => {\n  // In case ICE fail\n  const {peerConnection} = meeting.mediaProperties;\n\n  const connectionFailed = () => {\n    if (meeting.reconnectionManager.iceState.resolve) {\n      // DISCONNECTED state triggers first then it goes to FAILED STATE\n      // sometimes the failed state can happen before 10 seconds (Which is the timer for the reconnect for ice disconnect)\n      meeting.reconnectionManager.iceState.resolve();\n    }\n\n    meeting.reconnect({networkDisconnect: true});\n    Metrics.postEvent({\n      event: eventType.ICE_END,\n      meeting,\n      data: {\n        canProceed: false,\n        errors: [\n          Metrics.generateErrorPayload(\n            2004, false, error.name.MEDIA_ENGINE\n          )]\n      }\n    });\n\n    meeting.uploadLogs({\n      file: 'peer-connection-manager/index',\n      function: 'connectionFailed'\n    });\n\n    Metrics.sendOperationalMetric(\n      METRICS_OPERATIONAL_MEASURES.CONNECTION_FAILURE,\n      {\n        correlation_id: meeting.correlationId,\n        locus_id: meeting.locusId\n      }\n    );\n  };\n\n  peerConnection.oniceconnectionstatechange = () => {\n    LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE CHANGE.');\n    switch (peerConnection.iceConnectionState) {\n      case ICE_STATE.CHECKING:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE CHECKING.');\n        Metrics.postEvent({event: eventType.ICE_START, meeting});\n        break;\n      case ICE_STATE.COMPLETED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE COMPLETED.');\n        break;\n      case ICE_STATE.CONNECTED:\n        // Ice connection state goes to connected when both client and server sends STUN packets and\n        // Established connected between them. Firefox does not trigger COMPLETED and only trigger CONNECTED\n        Metrics.postEvent({event: eventType.ICE_END, meeting});\n        meeting.setNetworkStatus(NETWORK_STATUS.CONNECTED);\n        meeting.reconnectionManager.iceReconnected();\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE CONNECTED.');\n        break;\n      case ICE_STATE.CLOSED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE CLOSED.');\n        break;\n      case ICE_STATE.DISCONNECTED:\n        meeting.setNetworkStatus(NETWORK_STATUS.DISCONNECTED);\n        meeting.reconnectionManager.waitForIceReconnect()\n          .catch(() => {\n            LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE DISCONNECTED. Automatic Reconnection Timed Out.');\n\n            connectionFailed();\n          });\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE DISCONNECTED.');\n        break;\n      case ICE_STATE.FAILED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE FAILED.');\n        // notify of ice failure\n        // Ice failure is the only indicator currently for identifying the actual connection drop\n        // Firefox takes sometime 10-15 seconds to go to failed state\n        connectionFailed();\n        break;\n      default:\n        break;\n    }\n  };\n\n  peerConnection.onconnectionstatechange = () => {\n    LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE CHANGE.');\n    switch (peerConnection.connectionState) {\n      case CONNECTION_STATE.NEW:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE NEW.');\n        break;\n      case CONNECTION_STATE.CONNECTING:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE CONNECTING.');\n        break;\n      case CONNECTION_STATE.CONNECTED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE CONNECTED.');\n        break;\n      case CONNECTION_STATE.CLOSED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE CLOSED.');\n        break;\n      case CONNECTION_STATE.DISCONNECTED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE DISCONNECTED.');\n        break;\n      case CONNECTION_STATE.FAILED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE FAILED.');\n        // Special case happens only on chrome where there is no ICE FAILED event\n        // only CONNECTION FAILED event gets triggered\n\n        connectionFailed();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\nexport default pc;\n"]}