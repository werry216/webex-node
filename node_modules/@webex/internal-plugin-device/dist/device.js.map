{"version":3,"sources":["device.js"],"names":["decider","config","ephemeral","Device","WebexPlugin","extend","namespace","extraProperties","idAttribute","children","features","FeaturesModel","props","clientMessagingGiphy","customerCompanyName","customerLogoUrl","deviceType","helpUrl","intranetInactivityDuration","intranetInactivityCheckUrl","inNetworkInactivityDuration","ecmEnabledForAllUsers","ecmSupportedStorageProviders","modificationTime","navigationBarColor","partnerCompanyName","partnerLogoUrl","peopleInsightsEnabled","reportingSiteDesc","reportingSiteUrl","searchEncryptionKeyUrl","showSupportText","supportProviderCompanyName","supportProviderLogoUrl","url","userId","webFileShareControl","webSocketUrl","whiteboardFileShareControl","derived","registered","deps","fn","session","logoutTimer","lastUserActivityDate","isReachabilityChecked","isInMeeting","isInNetwork","meetingStarted","webex","trigger","meetingEnded","refresh","logger","info","canRegister","then","register","body","serialize","mediaCluster","ttl","ephemeralDeviceTTL","headers","defaults","request","method","uri","response","processRegistrationSuccess","catch","reason","statusCode","clear","reject","service","resource","unregister","warn","resolve","services","internal","waitForCatalog","canRegisterWaitDuration","get","Error","join","checkNetworkReachability","resetLogoutTimer","trackingid","args","prototype","getWebSocketUrl","wait","waitForRegistration","convertUrlToPriorityHostUrl","error","message","wsUrl","serviceHostMap","set","delay","refreshTimer","DEVICE_EVENT_REGISTRATION_SUCCESS","clearTimeout","off","unset","enableInactivityEnforcement","setLogoutTimer","duration","on","logout","timeout","timeoutTimer","once","markUrlFailedAndGetNew","markFailedUrl","initialize","FEATURE_COLLECTION_NAMES","forEach","collectionName","model","value","options","listenTo","oneFlight"],"mappings":"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","sourcesContent":["// Internal Dependencies\nimport {deprecated, oneFlight} from '@webex/common';\nimport {persist, waitForValue, WebexPlugin} from '@webex/webex-core';\nimport {safeSetTimeout} from '@webex/common-timers';\n\n// Local Dependencies\nimport {\n  FEATURE_COLLECTION_NAMES,\n  DEVICE_EVENT_REGISTRATION_SUCCESS\n} from './constants';\nimport FeaturesModel from './features/features-model';\n\n/**\n * Determine if the plugin should be initialized based on cached storage.\n *\n * @returns {boolean} - If the device is ephemeral.\n */\nfunction decider() {\n  return !this.config.ephemeral;\n}\n\nconst Device = WebexPlugin.extend({\n\n  // Ampersand property members.\n\n  namespace: 'Device',\n\n  // Allow for extra properties to prevent the plugin from failing due to\n  // **WDM** service DTO changes.\n  extraProperties: 'allow',\n\n  idAttribute: 'url',\n\n  children: {\n    /**\n     * The class object that contains all of the feature collections.\n     *\n     * @type {FeaturesModel}\n     */\n    features: FeaturesModel\n  },\n\n  /**\n   * A collection of device properties mostly assigned by the retrieved DTO from\n   * the **WDM** service that are mapped against the ampersand properties.\n   *\n   * @type {Object}\n   */\n  props: {\n    /**\n     * This property determines whether or not giphy support is enabled.\n     *\n     * @type {'ALLOW' | 'BLOCK'}\n     */\n    clientMessagingGiphy: 'string',\n\n    /**\n     * This property should store the company name.\n     *\n     * @type {string}\n     */\n    customerCompanyName: 'string',\n\n    /**\n     * This property should store the logo url.\n     *\n     * @type {string}\n     */\n    customerLogoUrl: 'string',\n\n    /**\n     * This property doesn't have any real values, but is sent during device\n     * refresh to prevent the **wdm** service from falling back to an iOS device\n     * type.\n     *\n     * @type {string}\n     */\n    deviceType: 'string',\n\n    /**\n     * This property should store the help url.\n     *\n     * @type {string}\n     */\n    helpUrl: 'string',\n\n    /**\n     * This property should store the intranet inactivity timer duration.\n     *\n     * @type {number}\n     */\n    intranetInactivityDuration: 'number',\n\n    /**\n     * This property stores the url required to validate if the device is able\n     * to actively reach the intranet network.\n     *\n     * @type {string}\n     */\n    intranetInactivityCheckUrl: 'string',\n\n    /**\n     * This property stores the inactivity timer duration, and could possibly\n     * deprecate the `intranetInactivityDuration` property.\n     *\n     * @type {number}\n     */\n    inNetworkInactivityDuration: 'number',\n\n    /**\n     * This property stores the ECM (external content management) enabled value\n     * for the whole organization.\n     *\n     * @type {boolean}\n     */\n    ecmEnabledForAllUsers: ['boolean', false, false],\n\n    /**\n     * This property stores an array of ECM (external content management)\n     * providers that are currently available.\n     *\n     * @returns {Array<string>}\n     */\n    ecmSupportedStorageProviders: ['array', false, (() => [])],\n\n    /**\n     * This property stores the modification time value retrieved from the\n     * **WDM** endpoint formatted as ISO 8601.\n     *\n     * @type {string}\n     */\n    modificationTime: 'string',\n\n    /**\n     * This property stores the navigation bar color.\n     *\n     * @type {string}\n     */\n    navigationBarColor: 'string',\n\n    /**\n     * This property stores the partner company's name when available.\n     *\n     * @type {string}\n     */\n    partnerCompanyName: 'string',\n\n    /**\n     * This property stores the partner company's logo when available.\n     *\n     * @type {string}\n     */\n    partnerLogoUrl: 'string',\n\n    /**\n     * This property stores the availability of people data from the **WDM**\n     * service.\n     *\n     * @type {boolean}\n     */\n    peopleInsightsEnabled: 'boolean',\n\n    /**\n     * This property stores the reporting site's description when available.\n     *\n     * @type {string}\n     */\n    reportingSiteDesc: 'string',\n\n    /**\n     * This property stores the reporting site's access url when available.\n     *\n     * @type {string}\n     */\n    reportingSiteUrl: 'string',\n\n    /**\n     * This property stores the encryption key url when available.\n     *\n     * @type {string}\n     */\n    searchEncryptionKeyUrl: 'string',\n\n    /**\n     * This property stores the availability of support-provided text from the\n     * **WDM** service.\n     *\n     * @type {boolean}\n     */\n    showSupportText: 'boolean',\n\n    /**\n     * This property stores the support provider's company name when available.\n     *\n     * @type {string}\n     */\n    supportProviderCompanyName: 'string',\n\n    /**\n     * This property stores the support provider's logo url when available.\n     *\n     * @type {string}\n     */\n    supportProviderLogoUrl: 'string',\n\n    /**\n     * This property stores the device's url retrieved from a registration\n     * request. This property gets set via the initial registration process by a\n     * `this.set()` method.\n     *\n     * @type {string}\n     */\n    url: 'string',\n\n    /**\n     * This property stores the device's userId uuid value, which can also be\n     * derived from the device's registerd user's userId retrieved from\n     * the **Hydra** service.\n     *\n     * @type {string}\n     */\n    userId: 'string',\n\n    /**\n     * This property stores whether or not file sharing is enabled\n     *\n     * @type {'BLOCK_BOTH' | 'BLOCK_UPLOAD'}\n     */\n    webFileShareControl: 'string',\n\n    /**\n     * This property stores the current web socket url used by the registered\n     * device.\n     *\n     * @type {string}\n     */\n    webSocketUrl: 'string',\n\n    /**\n     * This property stores the value indicating whether or not white board file\n     * sharing is enabled for the current device.\n     *\n     * @type {'ALLOW' | 'BLOCK'}\n     */\n    whiteboardFileShareControl: 'string'\n  },\n\n  /**\n   * A list of derived properties that populate based when their parent data\n   * available via the device's properties.\n   *\n   * @type {Object}\n   */\n  derived: {\n    /**\n     * This property determines if the current device is registered.\n     *\n     * @type {boolean}\n     */\n    registered: {\n      deps: ['url'],\n\n      /**\n       * Checks if the device is registered by validating that the url exists.\n       * Amperstand does not allow this to method to be written as an arrow\n       * function.\n       *\n       * @returns {boolean}\n       */\n      fn() {\n        return !!(this.url);\n      }\n    }\n  },\n\n  /**\n   * Stores timer data as well as other state details.\n   *\n   * @type {Object}\n   */\n  session: {\n    /**\n     * This property stores the logout timer object\n     *\n     * @type {any}\n     */\n    logoutTimer: 'any',\n\n    /**\n     * This property stores the date for the last activity the user made\n     * with the current device.\n     *\n     * @type {number}\n     */\n    lastUserActivityDate: 'number',\n\n    /**\n     * This property stores whether or not the reachability check has been\n     * performed to prevent the reachability check from performing its\n     * operation more than once after a successful check.\n     *\n     * @returns {boolean}\n     */\n    isReachabilityChecked: ['boolean', false, false],\n\n    /**\n     * This property stores whether or not the current device is in a meeting\n     * to prevent an unneeded timeout of a meeting due to inactivity.\n     *\n     * @type {boolean}\n     */\n    isInMeeting: 'boolean',\n\n    /**\n     * This property identifies if the device is currently in network to prevent\n     * the `resetLogoutTimer()` method from being called repeatedly once its\n     * known client is connected to the organization's internal network.\n     *\n     * @type {boolean}\n     */\n    isInNetwork: 'boolean'\n  },\n\n  // Event method members.\n\n  /**\n   * Trigger meeting started event for webex instance. Used by web-client team.\n   *\n   * @returns {void}\n   */\n  meetingStarted() {\n    this.webex.trigger('meeting started');\n  },\n\n  /**\n   * Trigger meeting ended event for webex instance. Used by web-client team.\n   *\n   * @returns {void}\n   */\n  meetingEnded() {\n    this.webex.trigger('meeting ended');\n  },\n\n  // Registration method members\n\n  /* eslint-disable require-jsdoc */\n  /**\n   * Refresh the current registered device if able.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  @oneFlight\n  @waitForValue('@')\n  refresh() {\n    this.logger.info('device: refreshing');\n\n    // Validate that the device can be registered.\n    return this.canRegister()\n      .then(() => {\n        // Validate if the device is not registered and register instead.\n        if (!this.registered) {\n          this.logger.info('device: device not registered, registering');\n\n          return this.register();\n        }\n\n        // Merge body configurations, overriding defaults.\n        const body = {\n          ...(this.serialize()),\n          ...(this.config.body ? this.config.body : {})\n        };\n\n        // Remove unneeded properties from the body object.\n        delete body.features;\n        delete body.mediaCluster;\n\n        // Append a ttl value if the device is marked as ephemeral.\n        if (this.config.ephemeral) {\n          body.ttl = this.config.ephemeralDeviceTTL;\n        }\n\n        // Merge header configurations, overriding defaults.\n        const headers = {\n          ...(this.config.defaults.headers ? this.config.defaults.headers : {}),\n          ...(this.config.headers ? this.config.headers : {})\n        };\n\n        return this.request({\n          method: 'PUT',\n          uri: this.url,\n          body,\n          headers\n        })\n          .then((response) => this.processRegistrationSuccess(response))\n          .catch((reason) => {\n            // Handle a 404 error, which indicates that the device is no longer\n            // valid and needs to be registered as a new device.\n            if (reason.statusCode === 404) {\n              this.logger.info('device: refresh failed, device is not valid');\n              this.logger.info('device: attempting to register a new device');\n\n              this.clear();\n\n              return this.register();\n            }\n\n            return Promise.reject(reason);\n          });\n      });\n  },\n\n  /**\n   * Register or refresh a device depending on the current device state. Device\n   * registration utilizes the services plugin to send the request to the\n   * **WDM** service.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  @oneFlight\n  @waitForValue('@')\n  register() {\n    this.logger.info('device: registering');\n\n    // Validate that the device can be registered.\n    return this.canRegister()\n      .then(() => {\n        // Validate if the device is already registered and refresh instead.\n        if (this.registered) {\n          this.logger.info('device: device already registered, refreshing');\n\n          return this.refresh();\n        }\n\n        // Merge body configurations, overriding defaults.\n        const body = {\n          ...(this.config.defaults.body ? this.config.defaults.body : {}),\n          ...(this.config.body ? this.config.body : {})\n        };\n\n        // Merge header configurations, overriding defaults.\n        const headers = {\n          ...(this.config.defaults.headers ? this.config.defaults.headers : {}),\n          ...(this.config.headers ? this.config.headers : {})\n        };\n\n        // Append a ttl value if the device is marked as ephemeral\n        if (this.config.ephemeral) {\n          body.ttl = this.config.ephemeralDeviceTTL;\n        }\n\n        // This will be replaced by a `create()` method.\n        return this.request({\n          method: 'POST',\n          service: 'wdm',\n          resource: 'devices',\n          body,\n          headers\n        })\n          .then((response) => this.processRegistrationSuccess(response));\n      });\n  },\n\n  /**\n   * Unregister the current registered device if available. Unregistering a\n   * device utilizes the services plugin to send the request to the **WDM**\n   * service.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  @oneFlight\n  @waitForValue('@')\n  unregister() {\n    this.logger.info('device: unregistering');\n\n    if (!this.registered) {\n      this.logger.warn('device: not registered');\n\n      return Promise.resolve();\n    }\n\n    return this.request({\n      uri: this.url,\n      method: 'DELETE'\n    })\n      .then(() => this.clear());\n  },\n  /* eslint-enable require-jsdoc */\n\n  // Helper method members\n\n  /**\n   * Determine if registration methods can be performed. This method utilizes\n   * the `services` plugin to confirm if the appropriate service urls are\n   * available for device registration.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  canRegister() {\n    this.logger.info('device: validating if registration can occur');\n\n    // Destructure the services plugin for ease of reference.\n    const {services} = this.webex.internal;\n\n    // Wait for the postauth catalog to populate.\n    return services.waitForCatalog(\n      'postauth',\n      this.config.canRegisterWaitDuration\n    )\n      .then(() => (\n        // Validate that the service exists after waiting for the catalog.\n        services.get('wdm') ?\n          Promise.resolve() :\n          Promise.reject(new Error([\n            'device: cannot register,',\n            '\\'wdm\\' service is not available from the postauth catalog'\n          ].join(' ')))\n      ));\n  },\n\n  /**\n   * Check if the device can currently reach the inactivity check url.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  checkNetworkReachability() {\n    this.logger.info('device: checking network reachability');\n\n    // Validate if the device has been checked and reset the logout timer.\n    if (this.isReachabilityChecked) {\n      return Promise.resolve(this.resetLogoutTimer());\n    }\n\n    this.isReachabilityChecked = true;\n\n    // Validate if the device has a intranet checking url.\n    if (!this.intranetInactivityCheckUrl) {\n      this.isInNetwork = false;\n\n      return Promise.resolve(this.resetLogoutTimer());\n    }\n\n    // Clear unnecessary headers for reachability request.\n    const headers = {\n      'cisco-no-http-redirect': null,\n      'spark-user-agent': null,\n      trackingid: null\n    };\n\n    // Send the network reachability request.\n    return this.request({\n      headers,\n      method: 'GET',\n      uri: this.intranetInactivityCheckUrl\n    })\n      .then(() => {\n        this.isInNetwork = true;\n\n        return Promise.resolve(this.resetLogoutTimer());\n      })\n      .catch(() => {\n        this.logger.info('device: did not reach ping endpoint');\n        this.logger.info('device: triggering off-network timer');\n\n        this.isInNetwork = false;\n\n        return Promise.resolve(this.resetLogoutTimer());\n      });\n  },\n\n  /**\n   * Clears the registration ttl value if available.\n   *\n   * @param {Object} options - Values to be cleared.\n   * @returns {void}\n   */\n  clear(...args) {\n    this.logger.info('device: clearing registered device');\n\n    // Prototype the extended class in order to preserve the parent member.\n    Reflect.apply(WebexPlugin.prototype.clear, this, args);\n  },\n\n  /**\n   * Get the current websocket url with the appropriate priority host.\n   *\n   * @param {boolean} [wait=false] - Willing to wait on a valid url.\n   * @returns {Promise<string, Error>} - The priority-mapped web socket url.\n   */\n  getWebSocketUrl(wait = false) {\n    this.logger.info('device: getting the current websocket url');\n\n    // Destructure the services plugin for ease of reference.\n    const {services} = this.webex.internal;\n\n    // Validate if the method should wait for registration.\n    if (wait) {\n      return this.waitForRegistration()\n        .then(() => services.convertUrlToPriorityHostUrl(this.webSocketUrl))\n        .catch((error) => {\n          this.logger.warn(error.message);\n\n          return Promise.reject(new Error(\n            'device: failed to get the current websocket url'\n          ));\n        });\n    }\n\n    // Validate if the device is registered.\n    if (!this.registered) {\n      return Promise.reject(new Error(\n        'device: cannot get websocket url, device is not registered'\n      ));\n    }\n\n    // Attempt to collect the priority-host-mapped web socket URL.\n    const wsUrl = services.convertUrlToPriorityHostUrl(this.webSocketUrl);\n\n    // Validate that the url was collected.\n    if (wsUrl) {\n      return Promise.resolve(wsUrl);\n    }\n\n    return Promise.reject(new Error(\n      'device: failed to get the current websocket url'\n    ));\n  },\n\n  /**\n   * Process a successful device registration.\n   *\n   * @param {Object} response - response object from registration success.\n   * @returns {void}\n   */\n  processRegistrationSuccess(response) {\n    this.logger.info('device: received registration payload');\n\n    // Clone the response body for service cleaning.\n    const body = {...response.body};\n\n    // Clean service data.\n    delete body.services;\n    delete body.serviceHostMap;\n\n    // Assign the recieved DTO from **WDM** to this device.\n    this.set(body);\n\n    // Validate if device is ephemeral and setup refresh timer.\n    if (this.config.ephemeral) {\n      this.logger.info('device: enqueuing device refresh');\n\n      const delay = (this.config.ephemeralDeviceTTL / 2 + 60) * 1000;\n\n      this.refreshTimer = safeSetTimeout(() => this.refresh(), delay);\n    }\n\n    // Emit the registration:success event.\n    this.trigger(DEVICE_EVENT_REGISTRATION_SUCCESS, this);\n  },\n\n  /**\n   * Reset the current local logout timer for the registered device if\n   * registered.\n   *\n   * @returns {void}\n   */\n  resetLogoutTimer() {\n    this.logger.info('device: resetting logout timer');\n\n    // Clear current logout timer.\n    clearTimeout(this.logoutTimer);\n\n    // Remove last activity date event listener.\n    this.off('change:lastUserActivityDate');\n\n    // Remove the logout timer.\n    this.unset('logoutTimer');\n\n    // Validate if the device is currently in a meeting and is configured to\n    // required inactivity enforcement.\n    if (!this.isInMeeting && this.config.enableInactivityEnforcement &&\n      this.isReachabilityChecked) {\n      if (this.isInNetwork) {\n        this.setLogoutTimer(this.inNetworkInactivityDuration);\n      }\n      else {\n        this.setLogoutTimer(this.intranetInactivityDuration);\n      }\n    }\n  },\n\n  /**\n   * Set the value of the logout timer for the current registered device.\n   *\n   * @param {number} duration - Value in seconds of the new logout timer.\n   * @returns {void}\n   */\n  setLogoutTimer(duration) {\n    this.logger.info('device: setting logout timer');\n\n    if (!duration || duration <= 0) {\n      return;\n    }\n\n    // Setup user activity date event listener.\n    this.on('change:lastUserActivityDate', () => { this.resetLogoutTimer(); });\n\n    // Initialize a new timer.\n    this.logoutTimer = safeSetTimeout(() => {\n      this.webex.logout();\n    }, duration * 1000);\n  },\n\n  /**\n   * Wait for the device to be registered.\n   *\n   * @param {number} [timeout=10] - The maximum duration to wait, in seconds.\n   * @returns {Promise<void, Error>}\n   */\n  waitForRegistration(timeout = 10) {\n    this.logger.info('device: waiting for registration');\n\n    return new Promise((resolve, reject) => {\n      if (this.registered) {\n        resolve();\n      }\n\n      const timeoutTimer = safeSetTimeout(() => reject(\n        new Error('device: timeout occured while waiting for registration')\n      ), timeout * 1000);\n\n      this.once(DEVICE_EVENT_REGISTRATION_SUCCESS, () => {\n        clearTimeout(timeoutTimer);\n        resolve();\n      });\n    });\n  },\n\n  // Deprecated methods.\n\n  /**\n   * Mark a url as failed and get the next priority host url.\n   *\n   * @param {string} url - The url to mark as failed.\n   * @returns {Promise<string>} - The next priority url.\n   */\n  @deprecated('device#markUrlFailedAndGetNew(): Use services#markFailedUrl()')\n  markUrlFailedAndGetNew(url) {\n    return Promise.resolve(this.webex.internal.services.markFailedUrl(url));\n  },\n\n  // Ampersand method members\n\n  /* eslint-disable require-jsdoc */\n  /**\n   * Initializer method for the device plugin.\n   *\n   * @override\n   * @param {Array<any>} args - An array of items to be mapped as properties.\n   * @returns {void}\n   */\n  @persist('@', decider)\n  initialize(...args) {\n    // Prototype the extended class in order to preserve the parent member.\n    Reflect.apply(WebexPlugin.prototype.initialize, this, args);\n\n    // Initialize feature events and listeners.\n    FEATURE_COLLECTION_NAMES.forEach((collectionName) => {\n      this.features.on(`change:${collectionName}`, (model, value, options) => {\n        this.trigger('change', this, options);\n        this.trigger('change:features', this, this.features, options);\n      });\n    });\n\n    // Initialize network reachability checking event for url change.\n    this.on('change:intranetInactivityCheckUrl', () => {\n      this.checkNetworkReachability();\n    });\n\n    // Initialize network reachability checking event for duration change.\n    this.on('change:intranetInactivityDuration', () => {\n      this.checkNetworkReachability();\n    });\n\n    // Initialize network reachability checking event for duration change.\n    this.on('change:inNetworkInactivityDuration', () => {\n      this.checkNetworkReachability();\n    });\n\n    // Initialize listener for activity checking.\n    this.listenTo(this.webex, 'user-activity', () => {\n      this.lastUserActivityDate = Date.now();\n    });\n\n    // Initialize listener for meeting started event.\n    this.listenTo(this.webex, 'meeting started', () => {\n      this.isInMeeting = true;\n      this.resetLogoutTimer();\n    });\n\n    // Initialize listener for meeting ended event.\n    this.listenTo(this.webex, 'meeting ended', () => {\n      this.isInMeeting = false;\n      this.resetLogoutTimer();\n    });\n  }\n  /* eslint-enable require-jsdoc */\n});\n\nexport default Device;\n"]}