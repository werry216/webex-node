"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _set2 = _interopRequireDefault(require("lodash/set"));

var _httpCore = require("@webex/http-core");

var _constants = require("../constants");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
  * Adds 'cisco-device-url' header, as appropriate, to requests
  */
var DeviceUrlInterceptor = /*#__PURE__*/function (_Interceptor) {
  (0, _inherits2.default)(DeviceUrlInterceptor, _Interceptor);

  var _super = _createSuper(DeviceUrlInterceptor);

  function DeviceUrlInterceptor() {
    (0, _classCallCheck2.default)(this, DeviceUrlInterceptor);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(DeviceUrlInterceptor, [{
    key: "onRequest",
    value:
    /**
     * @see Interceptor#onRequest
     * @param {Object} options
     * @returns {Object}
     */
    function onRequest(options) {
      var headers = options.headers,
          service = options.service,
          uri = options.uri;
      var _this$webex$internal = this.webex.internal,
          device = _this$webex$internal.device,
          services = _this$webex$internal.services; // Check if header is already set before moving forward

      if (!device.url || headers && _constants.CISCO_DEVICE_URL in headers && !headers[_constants.CISCO_DEVICE_URL]) {
        return _promise.default.resolve(options);
      } // Wait for catalog and service to be defined.


      return services.waitForService({
        service: service,
        url: uri
      }).then(function (url) {
        // Grab the service name with the url returned from waitForService
        var _ref = services.getServiceFromUrl(url) || {},
            serviceName = _ref.name;

        var invalidServices = ['idbroker', 'oauth', 'saml']; // Check if service is not one of the invalid services
        // Assign the url to the device header

        if (serviceName && !invalidServices.includes(serviceName)) {
          (0, _set2.default)(options, "headers['".concat(_constants.CISCO_DEVICE_URL, "']"), device.url);
        }

        return options;
      }).catch(function (error) {
        // Validate that the error came from getServiceFromUrl
        if (error.message.match(/was not found after waiting/)) {
          return options;
        }

        return _promise.default.reject(error);
      });
    }
  }], [{
    key: "create",
    value:
    /**
     * @returns {DeviceUrlInterceptor}
     */
    function create() {
      /* eslint no-invalid-this: [0] */
      return new DeviceUrlInterceptor({
        webex: this
      });
    }
  }]);
  return DeviceUrlInterceptor;
}(_httpCore.Interceptor);

exports.default = DeviceUrlInterceptor;
//# sourceMappingURL=device-url.js.map
