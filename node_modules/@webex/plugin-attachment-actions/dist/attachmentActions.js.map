{"version":3,"sources":["attachmentActions.js"],"names":["debug","require","AttachmentActions","WebexPlugin","extend","initialize","args","prototype","listen","webex","SDK_EVENT","EXTERNAL","RESOURCE","ATTACHMENT_ACTIONS","then","envelope","eventEnvelope","internal","mercury","connect","listenTo","INTERNAL","WEBEX_ACTIVITY","event","onWebexApiEvent","create","attachmentAction","request","method","service","resource","body","res","get","id","items","activity","data","verb","ACTIVITY_VERB","CARD_ACTION","createdEvent","getattachmentActionEvent","EVENT_TYPE","CREATED","trigger","sdkEvent","cluster","target","url","created","published","actorId","hydraTypes","PEOPLE","actor","entryUUID","roomId","ROOM","messageId","MESSAGE","parent","personId","ATTACHMENT_ACTION","object","inputs","type","objectType","e","logger","error","message"],"mappings":";;;;;;;;;;;;;;;;;;AAIA;;AAGA;;AAPA;AACA;AACA;AAcA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,mBAAjB,CAAd;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,iBAAiB,GAAGC,uBAAYC,MAAZ,CAAmB;AAC3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,UAT2C,wBASvB;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAClB,wBAAcH,uBAAYI,SAAZ,CAAsBF,UAApC,EAAgD,IAAhD,EAAsDC,IAAtD;AACD,GAX0C;;AAa3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,MAzC2C,oBAyClC;AAAA;;AACP;AACA,WAAO,iCAAoB,KAAKC,KAAzB,EACLC,kBAAUC,QAAV,CAAmBC,QAAnB,CAA4BC,kBADvB,EAEJC,IAFI,CAEC,UAACC,QAAD,EAAc;AAClB,MAAA,KAAI,CAACC,aAAL,GAAqBD,QAArB,CADkB,CAGlB;;AACA,aAAO,KAAI,CAACN,KAAL,CAAWQ,QAAX,CAAoBC,OAApB,CAA4BC,OAA5B,GAAsCL,IAAtC,CAA2C,YAAM;AACtD,QAAA,KAAI,CAACM,QAAL,CAAc,KAAI,CAACX,KAAL,CAAWQ,QAAX,CAAoBC,OAAlC,EACER,kBAAUW,QAAV,CAAmBC,cADrB,EAEE,UAACC,KAAD;AAAA,iBAAW,KAAI,CAACC,eAAL,CAAqBD,KAArB,CAAX;AAAA,SAFF;AAGD,OAJM,CAAP;AAKD,KAXI,CAAP;AAYD,GAvD0C;;AAyD3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,MA1H2C,kBA0HpCC,gBA1HoC,EA0HlB;AACvB,WAAO,KAAKC,OAAL,CAAa;AAClBC,MAAAA,MAAM,EAAE,MADU;AAElBC,MAAAA,OAAO,EAAE,OAFS;AAGlBC,MAAAA,QAAQ,EAAE,oBAHQ;AAIlBC,MAAAA,IAAI,EAAEL;AAJY,KAAb,EAMJZ,IANI,CAMC,UAACkB,GAAD;AAAA,aAASA,GAAG,CAACD,IAAb;AAAA,KAND,CAAP;AAOD,GAlI0C;;AAoI3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,GAlM2C,eAkMvCP,gBAlMuC,EAkMrB;AACpB,QAAMQ,EAAE,GAAGR,gBAAgB,CAACQ,EAAjB,IAAuBR,gBAAlC;AAEA,WAAO,KAAKC,OAAL,CAAa;AAClBE,MAAAA,OAAO,EAAE,OADS;AAElBC,MAAAA,QAAQ,+BAAwBI,EAAxB;AAFU,KAAb,EAIJpB,IAJI,CAIC,UAACkB,GAAD;AAAA,aAASA,GAAG,CAACD,IAAJ,CAASI,KAAT,IAAkBH,GAAG,CAACD,IAA/B;AAAA,KAJD,CAAP;AAKD,GA1M0C;;AA4M3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEP,EAAAA,eArN2C,2BAqN3BD,KArN2B,EAqNpB;AAAA,QACda,QADc,GACFb,KAAK,CAACc,IADJ,CACdD,QADc;AAGrB;;AACA,YAAQA,QAAQ,CAACE,IAAjB;AACE,WAAK5B,kBAAUW,QAAV,CAAmBkB,aAAnB,CAAiCC,WAAtC;AACE,YAAMC,YAAY,GAChB,KAAKC,wBAAL,CAA8BN,QAA9B,EACE1B,kBAAUC,QAAV,CAAmBgC,UAAnB,CAA8BC,OADhC,CADF;;AAIA,YAAIH,YAAJ,EAAkB;AAChBzC,UAAAA,KAAK,6DACD,wBAAeyC,YAAf,CADC,EAAL;AAEA,eAAKI,OAAL,CAAanC,kBAAUC,QAAV,CAAmBgC,UAAnB,CAA8BC,OAA3C,EAAoDH,YAApD;AACD;;AACD;;AAEF;AAAS;AACP;AACD;AAfH;AAiBD,GA1O0C;;AA4O3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,wBAtP2C,oCAsPlBN,QAtPkB,EAsPRb,KAtPQ,EAsPD;AACxC,QAAI;AACF,UAAMuB,QAAQ,GAAG,yBAAU,KAAK9B,aAAf,CAAjB;AACA,UAAM+B,OAAO,GAAG,mCAAsB,KAAKtC,KAA3B,EAAkC2B,QAAQ,CAACY,MAAT,CAAgBC,GAAlD,CAAhB;AAEAH,MAAAA,QAAQ,CAACvB,KAAT,GAAiBA,KAAjB;AACAuB,MAAAA,QAAQ,CAACT,IAAT,CAAca,OAAd,GAAwBd,QAAQ,CAACe,SAAjC;AACAL,MAAAA,QAAQ,CAACM,OAAT,GACE,8BAAiBC,mBAAWC,MAA5B,EAAoClB,QAAQ,CAACmB,KAAT,CAAeC,SAAnD,EAA8DT,OAA9D,CADF;AAEAD,MAAAA,QAAQ,CAACT,IAAT,CAAcoB,MAAd,GACE,8BAAiBJ,mBAAWK,IAA5B,EAAkCtB,QAAQ,CAACY,MAAT,CAAgBd,EAAlD,EAAsDa,OAAtD,CADF;AAEAD,MAAAA,QAAQ,CAACT,IAAT,CAAcsB,SAAd,GACE,8BAAiBN,mBAAWO,OAA5B,EAAqCxB,QAAQ,CAACyB,MAAT,CAAgB3B,EAArD,EAAyDa,OAAzD,CADF;AAEAD,MAAAA,QAAQ,CAACT,IAAT,CAAcyB,QAAd,GACE,8BAAiBT,mBAAWC,MAA5B,EAAoClB,QAAQ,CAACmB,KAAT,CAAeC,SAAnD,EAA8DT,OAA9D,CADF,CAZE,CAcF;AACA;AACA;;AAEAD,MAAAA,QAAQ,CAACT,IAAT,CAAcH,EAAd,GACE,8BAAiBmB,mBAAWU,iBAA5B,EAA+C3B,QAAQ,CAACF,EAAxD,EAA4Da,OAA5D,CADF;;AAEA,UAAIX,QAAQ,CAAC4B,MAAT,CAAgBC,MAApB,EAA4B;AAC1BnB,QAAAA,QAAQ,CAACT,IAAT,CAAc4B,MAAd,GAAuB7B,QAAQ,CAAC4B,MAAT,CAAgBC,MAAvC;AACD;;AACDnB,MAAAA,QAAQ,CAACT,IAAT,CAAc6B,IAAd,GAAqB9B,QAAQ,CAAC4B,MAAT,CAAgBG,UAArC;AAEA,aAAOrB,QAAP;AACD,KA1BD,CA2BA,OAAOsB,CAAP,EAAU;AACR,WAAK3D,KAAL,CAAW4D,MAAX,CAAkBC,KAAlB,2FACkC/C,KADlC,qBACkD6C,CAAC,CAACG,OADpD;AAGA,aAAO,IAAP;AACD;AACF,GAxR0C;AAAA;AAAA,CAAnB,CAA1B;;eA4RerE,iB","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  WebexPlugin\n} from '@webex/webex-core';\nimport {\n  SDK_EVENT,\n  createEventEnvelope,\n  constructHydraId,\n  getHydraClusterString,\n  hydraTypes\n} from '@webex/common';\nimport {cloneDeep} from 'lodash';\n\nconst debug = require('debug')('attachmentActions');\n\n\n/**\n * @typedef {Object} AttachmentActionObject\n * @property {string} id - (server generated) Unique identifier for the attachment action\n * @property {string} messageId - The ID of the message in which attachment action is to be performed\n * @property {string} type - The type of attachment action eg., submit\n * @property {Object} inputs - The inputs for form fields in attachment message\n * @property {string} personId - (server generated) The ID for the author of the attachment action\n * @property {string} roomId - (server generated) The ID for the room of the message\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\n/**\n * AttachmentActions are events that communicate information when a user clicks on an\n * Action.Submit button in a card displayed in Webex\n * Information conveyed in an AttachmentAction includes details about the user that\n * clicked the button along with any card specific inputs. See the\n * {@link https://developer.webex.com/docs/api/v1/attachment-actions|Attachments Actions API Documentation}\n * for more details\n * @class\n */\nconst AttachmentActions = WebexPlugin.extend({\n  /**\n   * Initializer used to generate AttachmentActions\n   * as a plugin wrapped around the provided arguments.\n   * @private\n   * @see WebexPlugin.initialize\n   * @param  {...any} args\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(WebexPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Register to listen for incoming attachmentAction events\n   * This is an alternate approach to registering for attachmentAction webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * The attachmentActions.listen() event objects can also include additional fields not\n   * available in the webhook's JSON payload, specifically: `inputs`.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Messages\n   * @returns {Promise}\n   * @example\n   * webex.attachmentActions.listen()\n   *   .then(() => {\n   *     console.log('listening to attachmentActions events');\n   *     webex.attachmentActions.on('created', (event) => console.log(`Got an attachmentActions:created event:\\n${event}`));\n   *   })\n   *   .catch((e) => console.error(`Unable to register for attachmentAction events: ${e}`));\n   * // Some app logic...\n   * // WHen it is time to cleanup\n   * webex.attachmentActions.stopListening();\n   * webex.attachmentActions.off('created');\n   */\n  listen() {\n    // Create a common envelope that we will wrap all events in\n    return createEventEnvelope(this.webex,\n      SDK_EVENT.EXTERNAL.RESOURCE.ATTACHMENT_ACTIONS)\n      .then((envelope) => {\n        this.eventEnvelope = envelope;\n\n        // Register to listen to events\n        return this.webex.internal.mercury.connect().then(() => {\n          this.listenTo(this.webex.internal.mercury,\n            SDK_EVENT.INTERNAL.WEBEX_ACTIVITY,\n            (event) => this.onWebexApiEvent(event));\n        });\n      });\n  },\n\n  /**\n     * Post a new attachment action for a message with attachment.\n     * @instance\n     * @memberof AttachmentActions\n     * @param {AttachmentActionObject} attachmentAction\n     * @returns {Promise<AttachmentActionObject>}\n     * @example\n     * webex.rooms.create({title: 'Create Message with card Example'})\n     *   .then(function(room) {\n     *     return webex.messages.create({\n     *       text: 'Howdy!',\n     *       roomId: room.id,\n     *       attachments:[ {\n     *          contentType: 'application/vnd.microsoft.card.adaptive',\n     *         content: {\n     *           type: 'AdaptiveCard',\n     *           version: '1.0',\n     *           body: [\n     *            {\n     *             type: 'TextBlock',\n     *             text: '',\n     *             size: 'large'\n     *             },\n     *           {\n     *             type: 'TextBlock',\n     *             text: 'Adaptive Cards',\n     *             separation: 'none'\n     *           }\n     *           {\n     *           type: 'Input.Date',\n     *           id: 'dueDate'\n     *           }\n     *       ],\n     *     actions: [\n     *         {\n     *             type: 'Action.Submit',\n     *             title: 'Due Date'\n     *         }\n     *     ]\n     *   }\n     *  }]\n     *     });\n     *   })\n     *   .then(function(message) {\n     *    return webex.attachmentActions.create({\n     *      type: 'submit',\n     *      messageId: message.id,\n     *      inputs:{\n     *        dueDate: '26/06/1995'\n     *      }\n     *    })\n     *    .then(function(attachmentAction)){\n     *      var assert = require('assert');\n     *      assert(attachmentAction.id);\n     *      assert(attachmentAction.type);\n     *      assert(attachmentAction.personId);\n     *      assert(attachmentAction.inputs);\n     *      assert(attachmentAction.messageId);\n     *      assert(attachmentAction.roomId);\n     *      assert(attachmentAction.created);\n     *      return 'success';\n     *     }\n     *   });\n     *   // => success\n     */\n  create(attachmentAction) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'attachment/actions',\n      body: attachmentAction\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single attachment action.\n   * @instance\n   * @memberof AttachmentActions\n   * @param {string} attachmentAction\n   * @returns {Promise<AttachmentActionObject>}\n   * @example\n   * var attachmentAction;\n   * webex.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id,\n   *       attachments:[ {\n   *          contentType: 'application/vnd.microsoft.card.adaptive',\n   *         content: {\n   *           type: 'AdaptiveCard',\n   *           version: '1.0',\n   *           body: [\n   *            {\n   *             type: 'TextBlock',\n   *             text: '',\n   *             size: 'large'\n   *             },\n   *           {\n   *             type: 'TextBlock',\n   *             text: 'Adaptive Cards',\n   *             separation: 'none'\n   *           },\n   *           {\n   *           type: 'Input.Date',\n   *           id: 'dueDate'\n   *           }\n   *       ],\n   *     actions: [\n   *         {\n   *             type: 'Action.Submit',\n   *             title: 'Due Date'\n   *         }\n   *     ]\n   *   }\n   *  }]\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     return webex.attachmentActions.create({\n   *      type: 'submit',\n   *      messageId: message.id,\n   *      inputs:{\n   *        dueDate: '26/06/1995'\n   *      });\n   *   })\n   *   .then(function(attachmentAction) {\n   *     return webex.attachmentActions.get(attachmentAction.id)\n   *   })\n   *    .then(function(attachmentAction){\n   *        var assert = require('assert');\n   *        assert.deepEqual(attachmentAction, attachmentAction);\n   *        return 'success';\n   *      })\n   *   // => success\n   */\n  get(attachmentAction) {\n    const id = attachmentAction.id || attachmentAction;\n\n    return this.request({\n      service: 'hydra',\n      resource: `attachment/actions/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * This function is called when an internal mercury events fires,\n   * if the user registered for these events with the listen() function.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof AttachmentAction\n   * @param {Object} event\n   * @returns {void}\n   */\n  onWebexApiEvent(event) {\n    const {activity} = event.data;\n\n    /* eslint-disable no-case-declarations */\n    switch (activity.verb) {\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.CARD_ACTION:\n        const createdEvent =\n          this.getattachmentActionEvent(activity,\n            SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (createdEvent) {\n          debug(`attachmentAction \"created\" payload: \\\n            ${JSON.stringify(createdEvent)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, createdEvent);\n        }\n        break;\n\n      default: {\n        break;\n      }\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the attachmentAction resource,\n   * adhering to Hydra's Webehook data structure messages.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof AttachmentAction\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getattachmentActionEvent(activity, event) {\n    try {\n      const sdkEvent = cloneDeep(this.eventEnvelope);\n      const cluster = getHydraClusterString(this.webex, activity.target.url);\n\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId =\n        constructHydraId(hydraTypes.PEOPLE, activity.actor.entryUUID, cluster);\n      sdkEvent.data.roomId =\n        constructHydraId(hydraTypes.ROOM, activity.target.id, cluster);\n      sdkEvent.data.messageId =\n        constructHydraId(hydraTypes.MESSAGE, activity.parent.id, cluster);\n      sdkEvent.data.personId =\n        constructHydraId(hydraTypes.PEOPLE, activity.actor.entryUUID, cluster);\n      // Seems like it would be nice to have this, but its not in the hydra webhook\n      // sdkEvent.data.personEmail =\n      //   activity.actor.emailAddress || activity.actor.entryEmail;\n\n      sdkEvent.data.id =\n        constructHydraId(hydraTypes.ATTACHMENT_ACTION, activity.id, cluster);\n      if (activity.object.inputs) {\n        sdkEvent.data.inputs = activity.object.inputs;\n      }\n      sdkEvent.data.type = activity.object.objectType;\n\n      return sdkEvent;\n    }\n    catch (e) {\n      this.webex.logger.error(`Unable to generate SDK event from mercury \\\n'socket activity for attachmentAction:${event} event: ${e.message}`);\n\n      return null;\n    }\n  }\n\n});\n\nexport default AttachmentActions;\n"]}