{"version":3,"sources":["authorization.js"],"names":["OAUTH2_CSRF_TOKEN","EMPTY_OBJECT_STRING","base64","encode","Authorization","WebexPlugin","extend","derived","isAuthenticating","deps","fn","isAuthorizing","session","default","type","ready","namespace","initialize","attrs","options","ret","prototype","parse","location","url","webex","getWindow","href","_checkForErrors","hash","includes","substr","querystring","state","JSON","decode","tokenData","_parseHash","_cleanUrl","process","nextTick","credentials","set","supertoken","initiateLogin","csrf_token","_generateSecurityToken","config","clientType","initiateAuthorizationCodeGrant","initiateImplicitGrant","logger","info","buildLoginUrl","response_type","resolve","requestAccessTokenFromJwt","jwt","hydraUri","internal","services","get","slice","env","HYDRA_SERVICE_URL","request","method","uri","headers","authorization","then","body","access_token","token","token_type","expires_in","expiresIn","initServiceCatalogs","logout","noRedirect","buildLogoutUrl","query","error","ErrorConstructor","grantErrors","select","history","replaceState","forEach","key","stringify","format","uuid","v4","sessionStorage","setItem","_verifySecurityToken","undefined","refresh_token_expires_in","sessionToken","getItem","removeItem","Error","oneFlight"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;AACA;;AAEA;;AACA;;AAEA;;;;AAEA,IAAMA,iBAAiB,GAAG,mBAA1B;;AACA,IAAMC,mBAAmB,GAAGC,eAAOC,MAAP,CAAc,wBAAe,EAAf,CAAd,CAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,aAAa,GAAGC,uBAAYC,MAAZ,SA+GnB,2BAAc,eAAd,CA/GmB,UA+HnB,2BAAc,eAAd,CA/HmB,UAAmB;AACvCC,EAAAA,OAAO,EAAE;AACP;AACJ;AACA;AACA;AACA;AACA;AACIC,IAAAA,gBAAgB,EAAE;AAChBC,MAAAA,IAAI,EAAE,CAAC,eAAD,CADU;AAEhBC,MAAAA,EAFgB,gBAEX;AACH,eAAO,KAAKC,aAAZ;AACD;AAJe;AAPX,GAD8B;AAgBvCC,EAAAA,OAAO,EAAE;AACP;AACJ;AACA;AACA;AACA;AACA;AACID,IAAAA,aAAa,EAAE;AACbE,MAAAA,OAAO,EAAE,KADI;AAEbC,MAAAA,IAAI,EAAE;AAFO,KAPR;AAWPC,IAAAA,KAAK,EAAE;AACLF,MAAAA,OAAO,EAAE,KADJ;AAELC,MAAAA,IAAI,EAAE;AAFD;AAXA,GAhB8B;AAiCvCE,EAAAA,SAAS,EAAE,aAjC4B;;AAmCvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACAC,EAAAA,UA9CuC,sBA8C5BC,KA9C4B,EA8CrBC,OA9CqB,EA8CZ;AAAA;;AACzB,QAAMC,GAAG,GAAG,oBAAcf,uBAAYgB,SAAZ,CAAsBJ,UAApC,EAAgD,IAAhD,EAAsD,CAACC,KAAD,EAAQC,OAAR,CAAtD,CAAZ,CADyB,CAGzB;AACA;AACA;;AACA,QAAID,KAAK,CAACI,KAAN,KAAgB,KAApB,EAA2B;AACzB,WAAKP,KAAL,GAAa,IAAb;AAEA,aAAOK,GAAP;AACD;;AACD,QAAMG,QAAQ,GAAGC,aAAIF,KAAJ,CAAU,KAAKG,KAAL,CAAWC,SAAX,GAAuBH,QAAvB,CAAgCI,IAA1C,EAAgD,IAAhD,CAAjB;;AAEA,SAAKC,eAAL,CAAqBL,QAArB;;AAbyB,QAepBM,IAfoB,GAeZN,QAfY,CAepBM,IAfoB;;AAiBzB,QAAI,CAACA,IAAL,EAAW;AACT,WAAKd,KAAL,GAAa,IAAb;AAEA,aAAOK,GAAP;AACD;;AACD,QAAIS,IAAI,CAACC,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACtBD,MAAAA,IAAI,GAAGA,IAAI,CAACE,MAAL,CAAY,CAAZ,CAAP;AACD;;AACDR,IAAAA,QAAQ,CAACM,IAAT,GAAgBG,qBAAYV,KAAZ,CAAkBO,IAAlB,CAAhB;;AACA,QAAIN,QAAQ,CAACM,IAAT,CAAcI,KAAlB,EAAyB;AACvBV,MAAAA,QAAQ,CAACM,IAAT,CAAcI,KAAd,GAAsBC,IAAI,CAACZ,KAAL,CAAWpB,eAAOiC,MAAP,CAAcZ,QAAQ,CAACM,IAAT,CAAcI,KAA5B,CAAX,CAAtB;AACD;;AACD,QAAMG,SAAS,GAAG,KAAKC,UAAL,CAAgBd,QAAhB,CAAlB;;AAEA,QAAI,CAACa,SAAL,EAAgB;AACd,aAAOhB,GAAP;AACD;;AACD,SAAKkB,SAAL,CAAef,QAAf,EAlCyB,CAoCzB;;;AACAgB,IAAAA,OAAO,CAACC,QAAR,CAAiB,YAAM;AACrB,MAAA,KAAI,CAACf,KAAL,CAAWgB,WAAX,CAAuBC,GAAvB,CAA2B;AAACC,QAAAA,UAAU,EAAEP;AAAb,OAA3B;;AACA,MAAA,KAAI,CAACrB,KAAL,GAAa,IAAb;AACD,KAHD;AAKA,WAAOK,GAAP;AACD,GAzFsC;;AA2FvC;AACF;AACA;AACA;AACA;AACA;AACA;AACEwB,EAAAA,aAlGuC,2BAkGX;AAAA,QAAdzB,OAAc,uEAAJ,EAAI;AAC1BA,IAAAA,OAAO,CAACc,KAAR,GAAgBd,OAAO,CAACc,KAAR,IAAiB,EAAjC;AACAd,IAAAA,OAAO,CAACc,KAAR,CAAcY,UAAd,GAA2B,KAAKC,sBAAL,EAA3B,CAF0B,CAI1B;AACA;;AACA,QAAI,KAAKC,MAAL,CAAYC,UAAZ,KAA2B,cAA/B,EAA+C;AAC7C,aAAO,KAAKC,8BAAL,CAAoC9B,OAApC,CAAP;AACD;;AAED,WAAO,KAAK+B,qBAAL,CAA2B/B,OAA3B,CAAP;AACD,GA7GsC;;AAgHvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE+B,EAAAA,qBAxHuC,iCAwHjB/B,OAxHiB,EAwHR;AAC7B,SAAKgC,MAAL,CAAYC,IAAZ,CAAiB,+CAAjB;AACA,SAAK3B,KAAL,CAAWC,SAAX,GAAuBH,QAAvB,GAAkC,KAAKE,KAAL,CAAWgB,WAAX,CAAuBY,aAAvB,CAAqC,qBAAc;AAACC,MAAAA,aAAa,EAAE;AAAhB,KAAd,EAAwCnC,OAAxC,CAArC,CAAlC;AAEA,WAAO,iBAAQoC,OAAR,EAAP;AACD,GA7HsC;;AAgIvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEN,EAAAA,8BAxIuC,0CAwIR9B,OAxIQ,EAwIC;AACtC,SAAKgC,MAAL,CAAYC,IAAZ,CAAiB,yDAAjB;AACA,SAAK3B,KAAL,CAAWC,SAAX,GAAuBH,QAAvB,GAAkC,KAAKE,KAAL,CAAWgB,WAAX,CAAuBY,aAAvB,CAAqC,qBAAc;AAACC,MAAAA,aAAa,EAAE;AAAhB,KAAd,EAAuCnC,OAAvC,CAArC,CAAlC;AAEA,WAAO,iBAAQoC,OAAR,EAAP;AACD,GA7IsC;;AAgJvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,yBA/JuC,2CA+JN;AAAA;;AAAA,QAANC,GAAM,QAANA,GAAM;AAC/B,QAAIC,QAAQ,GAAG,KAAKjC,KAAL,CAAWkC,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,OAAjC,EAA0C,IAA1C,CAAf;;AAEA,QAAIH,QAAQ,IAAIA,QAAQ,CAACI,KAAT,CAAe,CAAC,CAAhB,MAAuB,GAAvC,EAA4C;AAC1C;AACA;AACAJ,MAAAA,QAAQ,IAAI,GAAZ;AACD;;AAEDA,IAAAA,QAAQ,GAAGA,QAAQ,IACjBnB,OAAO,CAACwB,GAAR,CAAYC,iBADH,IAET,gCAFF;AAIA,WAAO,KAAKvC,KAAL,CAAWwC,OAAX,CAAmB;AACxBC,MAAAA,MAAM,EAAE,MADgB;AAExBC,MAAAA,GAAG,YAAKT,QAAL,cAFqB;AAGxBU,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAEZ;AADR;AAHe,KAAnB,EAOJa,IAPI,CAOC;AAAA,UAAEC,IAAF,SAAEA,IAAF;AAAA,aAAa;AACjBC,QAAAA,YAAY,EAAED,IAAI,CAACE,KADF;AAEjBC,QAAAA,UAAU,EAAE,QAFK;AAGjBC,QAAAA,UAAU,EAAEJ,IAAI,CAACK;AAHA,OAAb;AAAA,KAPD,EAYJN,IAZI,CAYC,UAACG,KAAD,EAAW;AACf,MAAA,MAAI,CAAChD,KAAL,CAAWgB,WAAX,CAAuBC,GAAvB,CAA2B;AACzBC,QAAAA,UAAU,EAAE8B;AADa,OAA3B;AAGD,KAhBI,EAiBJH,IAjBI,CAiBC;AAAA,aAAM,MAAI,CAAC7C,KAAL,CAAWkC,QAAX,CAAoBC,QAApB,CAA6BiB,mBAA7B,EAAN;AAAA,KAjBD,CAAP;AAkBD,GA9LsC;;AAgMvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,MAxMuC,oBAwMlB;AAAA,QAAd3D,OAAc,uEAAJ,EAAI;;AACnB,QAAI,CAACA,OAAO,CAAC4D,UAAb,EAAyB;AACvB,WAAKtD,KAAL,CAAWC,SAAX,GAAuBH,QAAvB,GAAkC,KAAKE,KAAL,CAAWgB,WAAX,CAAuBuC,cAAvB,CAAsC7D,OAAtC,CAAlC;AACD;AACF,GA5MsC;;AA8MvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACES,EAAAA,eAtNuC,2BAsNvBL,QAtNuB,EAsNb;AAAA,QACjB0D,KADiB,GACR1D,QADQ,CACjB0D,KADiB;;AAGxB,QAAIA,KAAK,IAAIA,KAAK,CAACC,KAAnB,EAA0B;AACxB,UAAMC,gBAAgB,GAAGC,uBAAYC,MAAZ,CAAmBJ,KAAK,CAACC,KAAzB,CAAzB;;AAEA,YAAM,IAAIC,gBAAJ,CAAqBF,KAArB,CAAN;AACD;AACF,GA9NsC;;AAgOvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE3C,EAAAA,SAxOuC,qBAwO7Bf,QAxO6B,EAwOnB;AAClBA,IAAAA,QAAQ,GAAG,yBAAUA,QAAV,CAAX;;AACA,QAAI,KAAKE,KAAL,CAAWC,SAAX,GAAuB4D,OAAvB,IAAkC,KAAK7D,KAAL,CAAWC,SAAX,GAAuB4D,OAAvB,CAA+BC,YAArE,EAAmF;AACjF,OACE,cADF,EAEE,YAFF,EAGE,YAHF,EAIE,eAJF,EAKE,0BALF,EAMEC,OANF,CAMU,UAACC,GAAD;AAAA,eAAS,6BAAuBlE,QAAQ,CAACM,IAAhC,EAAsC4D,GAAtC,CAAT;AAAA,OANV;;AAOA,UAAI,CAAC,uBAAQlE,QAAQ,CAACM,IAAT,CAAcI,KAAtB,CAAL,EAAmC;AACjCV,QAAAA,QAAQ,CAACM,IAAT,CAAcI,KAAd,GAAsB/B,eAAOC,MAAP,CAAc,wBAAe,oBAAKoB,QAAQ,CAACM,IAAT,CAAcI,KAAnB,EAA0B,YAA1B,CAAf,CAAd,CAAtB;;AACA,YAAIV,QAAQ,CAACM,IAAT,CAAcI,KAAd,KAAwBhC,mBAA5B,EAAiD;AAC/C,uCAAuBsB,QAAQ,CAACM,IAAhC,EAAsC,OAAtC;AACD;AACF,OALD,MAMK;AACH,qCAAuBN,QAAQ,CAACM,IAAhC,EAAsC,OAAtC;AACD;;AACDN,MAAAA,QAAQ,CAACM,IAAT,GAAgBG,qBAAY0D,SAAZ,CAAsBnE,QAAQ,CAACM,IAA/B,CAAhB;AACA,WAAKJ,KAAL,CAAWC,SAAX,GAAuB4D,OAAvB,CAA+BC,YAA/B,CAA4C,EAA5C,EAAgD,IAAhD,EAAsD/D,aAAImE,MAAJ,CAAWpE,QAAX,CAAtD;AACD;AACF,GA9PsC;;AAgQvC;AACF;AACA;AACA;AACA;AACA;AACA;AACEuB,EAAAA,sBAvQuC,oCAuQd;AACvB,SAAKK,MAAL,CAAYC,IAAZ,CAAiB,sCAAjB;;AAEA,QAAMqB,KAAK,GAAGmB,cAAKC,EAAL,EAAd;;AAEA,SAAKpE,KAAL,CAAWC,SAAX,GAAuBoE,cAAvB,CAAsCC,OAAtC,CAA8C,mBAA9C,EAAmEtB,KAAnE;AAEA,WAAOA,KAAP;AACD,GA/QsC;;AAiRvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEpC,EAAAA,UAzRuC,sBAyR5Bd,QAzR4B,EAyRlB;AACnB,QAAMM,IAAI,GAAG,yBAAUN,QAAQ,CAACM,IAAnB,CAAb;;AAEA,QAAIA,IAAJ,EAAU;AACR,WAAKmE,oBAAL,CAA0BnE,IAA1B;AACD;;AACD,QAAI,CAACA,IAAI,CAAC2C,YAAV,EAAwB;AACtB,WAAKzD,KAAL,GAAa,IAAb;AAEA,aAAOkF,SAAP;AACD;;AACD,QAAIpE,IAAI,CAAC8C,UAAT,EAAqB;AACnB9C,MAAAA,IAAI,CAAC8C,UAAL,GAAkB,wBAAS9C,IAAI,CAAC8C,UAAd,EAA0B,EAA1B,CAAlB;AACD;;AACD,QAAI9C,IAAI,CAACqE,wBAAT,EAAmC;AACjCrE,MAAAA,IAAI,CAACqE,wBAAL,GAAgC,wBAASrE,IAAI,CAACqE,wBAAd,EAAwC,EAAxC,CAAhC;AACD;;AAED,WAAOrE,IAAP;AACD,GA5SsC;;AA8SvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEmE,EAAAA,oBAvTuC,gCAuTlBnE,IAvTkB,EAuTZ;AACzB,QAAMsE,YAAY,GAAG,KAAK1E,KAAL,CAAWC,SAAX,GAAuBoE,cAAvB,CAAsCM,OAAtC,CAA8CpG,iBAA9C,CAArB;AAEA,SAAKyB,KAAL,CAAWC,SAAX,GAAuBoE,cAAvB,CAAsCO,UAAtC,CAAiDrG,iBAAjD;;AACA,QAAI,CAACmG,YAAL,EAAmB;AACjB;AACD;;AAED,QAAI,CAACtE,IAAI,CAACI,KAAV,EAAiB;AACf,YAAM,IAAIqE,KAAJ,+BAAiCH,YAAjC,sCAAN;AACD;;AAED,QAAI,CAACtE,IAAI,CAACI,KAAL,CAAWY,UAAhB,EAA4B;AAC1B,YAAM,IAAIyD,KAAJ,+BAAiCH,YAAjC,sCAAN;AACD;;AAED,QAAM1B,KAAK,GAAG5C,IAAI,CAACI,KAAL,CAAWY,UAAzB;;AAEA,QAAI4B,KAAK,KAAK0B,YAAd,EAA4B;AAC1B,YAAM,IAAIG,KAAJ,sBAAwB7B,KAAxB,0CAA6D0B,YAA7D,EAAN;AACD;AACF,GA5UsC;AAAA;AAAA,CAAnB,4ZA+InBI,iBA/ImB,6FAAtB;;eA+UenG,a","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint camelcase: [0] */\n\nimport querystring from 'querystring';\nimport url from 'url';\n\nimport {base64, oneFlight, whileInFlight} from '@webex/common';\nimport {grantErrors, WebexPlugin} from '@webex/webex-core';\nimport {cloneDeep, isEmpty, omit} from 'lodash';\nimport uuid from 'uuid';\n\nconst OAUTH2_CSRF_TOKEN = 'oauth2-csrf-token';\nconst EMPTY_OBJECT_STRING = base64.encode(JSON.stringify({}));\n\n/**\n * Browser support for OAuth2. Automatically parses the URL hash for an access\n * token\n * @class\n * @name AuthorizationBrowser\n */\nconst Authorization = WebexPlugin.extend({\n  derived: {\n    /**\n     * Alias of {@link AuthorizationBrowser#isAuthorizing}\n     * @instance\n     * @memberof AuthorizationBrowser\n     * @type {boolean}\n     */\n    isAuthenticating: {\n      deps: ['isAuthorizing'],\n      fn() {\n        return this.isAuthorizing;\n      }\n    }\n  },\n\n  session: {\n    /**\n     * Indicates if an Authorization Code exchange is inflight\n     * @instance\n     * @memberof AuthorizationBrowser\n     * @type {boolean}\n     */\n    isAuthorizing: {\n      default: false,\n      type: 'boolean'\n    },\n    ready: {\n      default: false,\n      type: 'boolean'\n    }\n  },\n\n  namespace: 'Credentials',\n\n  /**\n   * Initializer\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} attrs {@link AmpersandState}\n   * @param {boolean} attrs.parse Controls whether or not the the url should get\n   * parsed for an access token\n   * @private\n   * @returns {Authorization}\n   */\n  // eslint-disable-next-line complexity\n  initialize(attrs, options) {\n    const ret = Reflect.apply(WebexPlugin.prototype.initialize, this, [attrs, options]);\n\n    // Reminder, we can't do parse based on config, because config is not\n    // available until nextTick and we want to be able to throw errors found in\n    // the url.\n    if (attrs.parse === false) {\n      this.ready = true;\n\n      return ret;\n    }\n    const location = url.parse(this.webex.getWindow().location.href, true);\n\n    this._checkForErrors(location);\n\n    let {hash} = location;\n\n    if (!hash) {\n      this.ready = true;\n\n      return ret;\n    }\n    if (hash.includes('#')) {\n      hash = hash.substr(1);\n    }\n    location.hash = querystring.parse(hash);\n    if (location.hash.state) {\n      location.hash.state = JSON.parse(base64.decode(location.hash.state));\n    }\n    const tokenData = this._parseHash(location);\n\n    if (!tokenData) {\n      return ret;\n    }\n    this._cleanUrl(location);\n\n    // Wait until nextTick in case `credentials` hasn't initialized yet\n    process.nextTick(() => {\n      this.webex.credentials.set({supertoken: tokenData});\n      this.ready = true;\n    });\n\n    return ret;\n  },\n\n  /**\n   * Kicks off an oauth flow\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} options\n   * @returns {Promise}\n   */\n  initiateLogin(options = {}) {\n    options.state = options.state || {};\n    options.state.csrf_token = this._generateSecurityToken();\n\n    // If we're not explicitly a confidential client, assume we're a public\n    // client\n    if (this.config.clientType === 'confidential') {\n      return this.initiateAuthorizationCodeGrant(options);\n    }\n\n    return this.initiateImplicitGrant(options);\n  },\n\n  @whileInFlight('isAuthorizing')\n  /**\n   * Kicks off the Authorization Code grant flow. Typically called via\n   * {@link AuthorizationBrowser#initiateLogin}\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} options\n   * @returns {Promise}\n   */\n  initiateImplicitGrant(options) {\n    this.logger.info('authorization: initiating implicit grant flow');\n    this.webex.getWindow().location = this.webex.credentials.buildLoginUrl(Object.assign({response_type: 'token'}, options));\n\n    return Promise.resolve();\n  },\n\n  @whileInFlight('isAuthorizing')\n  /**\n   * Kicks off the Implicit Code grant flow. Typically called via\n   * {@link AuthorizationBrowser#initiateLogin}\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} options\n   * @returns {Promise}\n   */\n  initiateAuthorizationCodeGrant(options) {\n    this.logger.info('authorization: initiating authorization code grant flow');\n    this.webex.getWindow().location = this.webex.credentials.buildLoginUrl(Object.assign({response_type: 'code'}, options));\n\n    return Promise.resolve();\n  },\n\n  @oneFlight\n  /**\n   * Requests a Webex access token for a user already authenticated into\n   * your product.\n   *\n   * Note: You'll need to supply a jwtRefreshCallback of the form\n   * `Promise<jwt> = jwtRefreshCallback(webex)` for automatic token refresh to\n   * work.\n   *\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} options\n   * @param {Object} options.jwt This is a jwt generated by your backend that\n   * identifies a user in your system\n   * @returns {Promise}\n   */\n  requestAccessTokenFromJwt({jwt}) {\n    let hydraUri = this.webex.internal.services.get('hydra', true);\n\n    if (hydraUri && hydraUri.slice(-1) !== '/') {\n      // add a `/` to hydra's uri from the services catalog so that\n      // it matches the current env service format.\n      hydraUri += '/';\n    }\n\n    hydraUri = hydraUri ||\n      process.env.HYDRA_SERVICE_URL ||\n      'https://api.ciscospark.com/v1/';\n\n    return this.webex.request({\n      method: 'POST',\n      uri: `${hydraUri}jwt/login`,\n      headers: {\n        authorization: jwt\n      }\n    })\n      .then(({body}) => ({\n        access_token: body.token,\n        token_type: 'Bearer',\n        expires_in: body.expiresIn\n      }))\n      .then((token) => {\n        this.webex.credentials.set({\n          supertoken: token\n        });\n      })\n      .then(() => this.webex.internal.services.initServiceCatalogs());\n  },\n\n  /**\n   * Called by {@link WebexCore#logout()}. Redirects to the logout page\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} options\n   * @param {boolean} options.noRedirect if true, does not redirect\n   * @returns {Promise}\n   */\n  logout(options = {}) {\n    if (!options.noRedirect) {\n      this.webex.getWindow().location = this.webex.credentials.buildLogoutUrl(options);\n    }\n  },\n\n  /**\n   * Checks if the result of the login redirect contains an error string\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} location\n   * @private\n   * @returns {Promise}\n   */\n  _checkForErrors(location) {\n    const {query} = location;\n\n    if (query && query.error) {\n      const ErrorConstructor = grantErrors.select(query.error);\n\n      throw new ErrorConstructor(query);\n    }\n  },\n\n  /**\n   * Removes no-longer needed values from the url (access token, csrf token, etc)\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} location\n   * @private\n   * @returns {Promise}\n   */\n  _cleanUrl(location) {\n    location = cloneDeep(location);\n    if (this.webex.getWindow().history && this.webex.getWindow().history.replaceState) {\n      [\n        'access_token',\n        'token_type',\n        'expires_in',\n        'refresh_token',\n        'refresh_token_expires_in'\n      ].forEach((key) => Reflect.deleteProperty(location.hash, key));\n      if (!isEmpty(location.hash.state)) {\n        location.hash.state = base64.encode(JSON.stringify(omit(location.hash.state, 'csrf_token')));\n        if (location.hash.state === EMPTY_OBJECT_STRING) {\n          Reflect.deleteProperty(location.hash, 'state');\n        }\n      }\n      else {\n        Reflect.deleteProperty(location.hash, 'state');\n      }\n      location.hash = querystring.stringify(location.hash);\n      this.webex.getWindow().history.replaceState({}, null, url.format(location));\n    }\n  },\n\n  /**\n   * Generates a CSRF token and sticks in in sessionStorage\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @private\n   * @returns {Promise}\n   */\n  _generateSecurityToken() {\n    this.logger.info('authorization: generating csrf token');\n\n    const token = uuid.v4();\n\n    this.webex.getWindow().sessionStorage.setItem('oauth2-csrf-token', token);\n\n    return token;\n  },\n\n  /**\n   * Parses the url hash into an access token object\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} location\n   * @private\n   * @returns {Object}\n   */\n  _parseHash(location) {\n    const hash = cloneDeep(location.hash);\n\n    if (hash) {\n      this._verifySecurityToken(hash);\n    }\n    if (!hash.access_token) {\n      this.ready = true;\n\n      return undefined;\n    }\n    if (hash.expires_in) {\n      hash.expires_in = parseInt(hash.expires_in, 10);\n    }\n    if (hash.refresh_token_expires_in) {\n      hash.refresh_token_expires_in = parseInt(hash.refresh_token_expires_in, 10);\n    }\n\n    return hash;\n  },\n\n  /**\n   * Checks if the CSRF token in sessionStorage is the same as the one returned\n   * in the url.\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} hash\n   * @private\n   * @returns {Promise}\n   */\n  _verifySecurityToken(hash) {\n    const sessionToken = this.webex.getWindow().sessionStorage.getItem(OAUTH2_CSRF_TOKEN);\n\n    this.webex.getWindow().sessionStorage.removeItem(OAUTH2_CSRF_TOKEN);\n    if (!sessionToken) {\n      return;\n    }\n\n    if (!hash.state) {\n      throw new Error(`Expected CSRF token ${sessionToken}, but not found in redirect hash`);\n    }\n\n    if (!hash.state.csrf_token) {\n      throw new Error(`Expected CSRF token ${sessionToken}, but not found in redirect hash`);\n    }\n\n    const token = hash.state.csrf_token;\n\n    if (token !== sessionToken) {\n      throw new Error(`CSRF token ${token} does not match stored token ${sessionToken}`);\n    }\n  }\n});\n\nexport default Authorization;\n"]}